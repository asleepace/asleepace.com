---
import BaseHead from '@/components/astro/BaseHead.astro'
import Header from '@/components/astro/Header.astro'
import Footer from '@/components/astro/Footer.astro'
import { siteData } from '@/consts'
import { LockKeyholeIcon } from 'lucide-react'

export const prerender = false
export const route = '/admin/login'

// const sessionCookie = Astro.cookies?.get('session')
// const hasSessionCookie = Boolean(sessionCookie)
// const isLoggedIn = Boolean(Astro.locals.isLoggedIn && Astro.locals.user)

// if (hasSessionCookie && isLoggedIn) {
//   console.log(`GET ${route} redirecting to ADMIN_HOME ...`, Astro.request)
//   return Astro.redirect(PATH.ADMIN_HOME, 302)
// }

// if (hasSessionCookie && !isLoggedIn) {
//   Astro.cookies.delete('session', { path: '/' })
// }

// NOTE: Astro.redirect() is not working here for logged in users.

const error = Astro.url.searchParams.get('error')

const ERROR_CASES = {
  invalid_credentials: 'Invalid username or password.',
  invalid_password: 'Invalid password.',
  bad_content: 'Invalid content type.',
  unknown: 'An unknown error occurred: ' + error,
}

const message = error && error in ERROR_CASES ? ERROR_CASES[error] : error
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={siteData.title} description={siteData.description} />
  </head>
  <body
    class="min-h-screen flex flex-col bg-white bg-cover bg-fixed"
    style="background: url(/images/bg-login.jpeg); background-position: center; background-attachment: fixed;"
  >
    <Header title="" class:list="before:bg-glass overflow-hidden" />
    <main
      class="flex flex-col inset-shadow-2xs grow self-stretch w-full justify-center items-center mx-auto p-4 from-neutral-200/30 via-white/0 to-neutral-200/30 bg-gradient-to-r"
    >
      <div class="absolute bg-glass inset-shadow -z-10 inset-0"></div>
      <div
        class="flex flex-col items-center gap-2 py-4 bg-white/85 focus-within:bg-white/95 transition-all duration-300 rounded-2xl p-4"
      >
        <div class="flex flex-col items-center justify-center py-4">
          <LockKeyholeIcon
            className="text-neutral-300 text-shadow my-2 mb-3"
            size={34}
          />
          <p
            class="text-4xl font-semibold tracking-wider text-neutral-900/90 text-center"
          >
            Admin
          </p>
          <p class="text-lg tracking-wide text-center">
            {
              message ? (
                <span class="text-red-500">{message}</span>
              ) : (
                <span class="text-neutral-400/90">
                  {'Please login to continue'}
                </span>
              )
            }
          </p>
        </div>
        <!-- Login Form -->
        <form
          id="login-form"
          action="/api/auth"
          class="flex flex-col mt-4 gap-2 w-[300px] *:transition-colors *:duration-100"
          method="post"
        >
          <div class="h-thin w-full bg-neutral-200/90"></div>

          <input
            autofocus
            class="border border-gray-300 bg-transparent mix-blend-multiply text-center focus:ring-0 outline-none focus:border-blue-400 focus:placeholder:opacity-0 rounded-md p-2 text-sm"
            autocomplete="email"
            id="username"
            type="text"
            name="username"
            placeholder="Username"
          />
          <input
            class="border border-gray-300 bg-transparent mix-blend-multiply focus:backdrop-blur-2xl text-center focus:ring-0 outline-none focus:border-blue-400 rounded-md focus:placeholder:opacity-0 p-2 text-sm"
            autocomplete="current-password"
            id="password"
            type="password"
            name="password"
            placeholder="Password"
          />
          <div class="h-thin w-full bg-neutral-200/90"></div>
          <button
            class="bg-blue-500 hover:bg-blue-400 transition-all duration-300 text-white text-sm tracking-wide rounded-xl p-3"
            type="submit">Submit</button
          >
        </form>
      </div>
    </main>
    <div class="backdrop-blur-lg">
      <Footer />
    </div>
    <script>
      async function createSecureCredentials() {
        // Check if WebAuthn is supported
        if (!window.PublicKeyCredential) {
          console.log('WebAuthn not supported')
          return
        }

        // Registration options
        const registrationOptions: PublicKeyCredentialCreationOptions = {
          challenge: new Uint8Array(32), // Get from your server
          rp: {
            name: 'Asleepace',
            id: 'asleepace.com',
          },
          user: {
            id: new TextEncoder().encode('user123'),
            name: 'colin_teahan@yahoo.com',
            displayName: 'Colin Teahan',
          },
          pubKeyCredParams: [
            {
              type: 'public-key',
              alg: -7, // ES256 algorithm
            },
          ],
          authenticatorSelection: {
            authenticatorAttachment: 'platform', // For built-in biometrics
            userVerification: 'required',
          },
          timeout: 60000,
          attestation: 'direct',
        }

        // Create credential
        try {
          const credential = await navigator.credentials.create({
            publicKey: registrationOptions,
          })

          if (!credential?.id) throw new Error('Missing credential id!')
          if (!credential?.rawId) throw new Error('Missing credential id!')

          // Send credential to your server for storage
          const response = await fetch('/register-webauthn', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              id: credential.id,
              rawId: Array.from(new Uint8Array(credential.rawId)),
              response: {
                attestationObject: Array.from(
                  new Uint8Array(credential.response.attestationObject)
                ),
                clientDataJSON: Array.from(
                  new Uint8Array(credential.response.clientDataJSON)
                ),
              },
            }),
          })
        } catch (error) {
          console.log('Registration failed:', error)
        }
      }

      async function isBiometricAvailable() {
        return (
          window.PublicKeyCredential &&
          (await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable())
        )
      }

      async function handlePublicKeyLogin() {
        // Authentication options
        const authenticationOptions: CredentialRequestOptions = {
          challenge: new Uint8Array(32), // Get from your server
          timeout: 60000,
          rpId: 'asleepace.com',
          userVerification: 'required',
        }
        try {
          const assertion = await navigator.credentials.get({
            publicKey: authenticationOptions,
          })

          // Send assertion to server for verification
          const response = await fetch('/verify-webauthn', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              id: assertion.id,
              rawId: Array.from(new Uint8Array(assertion.rawId)),
              response: {
                authenticatorData: Array.from(
                  new Uint8Array(assertion.response.authenticatorData)
                ),
                clientDataJSON: Array.from(
                  new Uint8Array(assertion.response.clientDataJSON)
                ),
                signature: Array.from(
                  new Uint8Array(assertion.response.signature)
                ),
              },
            }),
          })

          if (response.ok) {
            // User authenticated successfully
            window.location.href = '/dashboard'
          }
        } catch (error) {
          console.log('Authentication failed:', error)
        }
      }

      document.getElementById('login-form')?.addEventListener('focusin', () => {
        handlePublicKeyLogin().then(console.log).catch(console.warn)
      })
    </script>
  </body>
</html>
