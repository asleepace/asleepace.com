[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.7.5","content-config-digest","fd61b873c9d57068","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://asleepace.com\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":false},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12,34,35,69,70,89,90,108,109,139,140,222,223,265,266,293,294,324,325,387,388],"stock-picks-2025",{"id":11,"data":13,"body":18,"filePath":19,"digest":20,"rendered":21},{"title":14,"description":15,"pubDate":16,"heroImage":17},"Top Stock Picks for 2025","Investment Opportunities for 2025 focusing on quantum computing, renewable energy, artificial intelligence, and emerging technologies.",["Date","2024-12-24T08:00:00.000Z"],"/images/stock-picks-2025.png","The following analysis presents a carefully researched selection of companies that show promising growth potential for 2025 and beyond. This assessment is based on market trends, technological advancement trajectories, and emerging sector analysis.\n\nKey sectors identified for potential growth in 2025 include:\n\n- Energy (Traditional and Renewable)\n- Artificial Intelligence and Machine Learning\n- Quantum Computing\n- Space Technology and Exploration\n- Digital Assets and Blockchain Technology\n\nWhile this analysis reflects thorough market research, it should be considered as informational content rather than financial advice. Investors should conduct their own due diligence before making investment decisions.\n\n## Market Leaders and Growth Opportunities\n\n1. **Tesla (TSLA)**\n   Electric vehicle pioneer and renewable energy innovator with established market leadership and continued expansion in global markets.\n\n2. **Nvidia (NVDA)**\n   Industry leader in AI infrastructure and GPU technology, well-positioned in the expanding artificial intelligence and machine learning sectors.\n\n3. **Quantum Computing (QUBT)**\n   Early mover in quantum computing technology development with strategic positioning in an emerging high-potential market.\n\n4. **Rocket Lab (RKLB)**\n   Leading private space launch provider with established commercial satellite deployment capabilities and expanding space services portfolio.\n\n5. **Bitcoin (BTC)**\n   Primary digital asset with institutional adoption and increasing integration into traditional financial systems.\n\n6. **Intuitive Machines (LUNR)**\n   Space exploration and infrastructure company developing critical technologies for lunar and deep space missions.\n\n7. **Uranium Energy Corp (UEC)**\n   U.S.-based uranium mining and exploration company positioned to benefit from increasing nuclear energy adoption.\n\n8. **Applied Digital (APLD)**\n   Technology infrastructure provider specializing in data center operations and high-performance computing solutions.\n\n9. **Energy Transfer (ET)**\n   Comprehensive energy infrastructure company operating across natural gas transportation and storage segments.\n\n10. **Alphabet (GOOGL)**\n    Technology conglomerate with strong positions in cloud computing, artificial intelligence research, and quantum computing initiatives.\n\nIt's crucial to understand that investment in equity markets carries inherent risks. Market conditions can change rapidly, and past performance does not guarantee future results. Investors should carefully consider their investment objectives, risk tolerance, and time horizon when evaluating any investment opportunities.","src/content/blog/stock-picks-2025.md","5d6772e1e4726913",{"html":22,"metadata":23},"\u003Cp>The following analysis presents a carefully researched selection of companies that show promising growth potential for 2025 and beyond. This assessment is based on market trends, technological advancement trajectories, and emerging sector analysis.\u003C/p>\n\u003Cp>Key sectors identified for potential growth in 2025 include:\u003C/p>\n\u003Cul>\n\u003Cli>Energy (Traditional and Renewable)\u003C/li>\n\u003Cli>Artificial Intelligence and Machine Learning\u003C/li>\n\u003Cli>Quantum Computing\u003C/li>\n\u003Cli>Space Technology and Exploration\u003C/li>\n\u003Cli>Digital Assets and Blockchain Technology\u003C/li>\n\u003C/ul>\n\u003Cp>While this analysis reflects thorough market research, it should be considered as informational content rather than financial advice. Investors should conduct their own due diligence before making investment decisions.\u003C/p>\n\u003Ch2 id=\"market-leaders-and-growth-opportunities\">Market Leaders and Growth Opportunities\u003C/h2>\n\u003Col>\n\u003Cli>\n\u003Cp>\u003Cstrong>Tesla (TSLA)\u003C/strong>\nElectric vehicle pioneer and renewable energy innovator with established market leadership and continued expansion in global markets.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Nvidia (NVDA)\u003C/strong>\nIndustry leader in AI infrastructure and GPU technology, well-positioned in the expanding artificial intelligence and machine learning sectors.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Quantum Computing (QUBT)\u003C/strong>\nEarly mover in quantum computing technology development with strategic positioning in an emerging high-potential market.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Rocket Lab (RKLB)\u003C/strong>\nLeading private space launch provider with established commercial satellite deployment capabilities and expanding space services portfolio.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Bitcoin (BTC)\u003C/strong>\nPrimary digital asset with institutional adoption and increasing integration into traditional financial systems.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Intuitive Machines (LUNR)\u003C/strong>\nSpace exploration and infrastructure company developing critical technologies for lunar and deep space missions.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Uranium Energy Corp (UEC)\u003C/strong>\nU.S.-based uranium mining and exploration company positioned to benefit from increasing nuclear energy adoption.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Applied Digital (APLD)\u003C/strong>\nTechnology infrastructure provider specializing in data center operations and high-performance computing solutions.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Energy Transfer (ET)\u003C/strong>\nComprehensive energy infrastructure company operating across natural gas transportation and storage segments.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Alphabet (GOOGL)\u003C/strong>\nTechnology conglomerate with strong positions in cloud computing, artificial intelligence research, and quantum computing initiatives.\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003Cp>It’s crucial to understand that investment in equity markets carries inherent risks. Market conditions can change rapidly, and past performance does not guarantee future results. Investors should carefully consider their investment objectives, risk tolerance, and time horizon when evaluating any investment opportunities.\u003C/p>",{"headings":24,"localImagePaths":29,"remoteImagePaths":30,"frontmatter":31,"imagePaths":33},[25],{"depth":26,"slug":27,"text":28},2,"market-leaders-and-growth-opportunities","Market Leaders and Growth Opportunities",[],[],{"title":14,"description":15,"pubDate":32,"heroImage":17,"slug":11},"Dec 24 2024",[],"online-code-editor",{"id":34,"data":36,"body":41,"filePath":42,"digest":43,"rendered":44},{"title":37,"description":38,"pubDate":39,"heroImage":40},"Online Code Editor","a simple online code editor which can compile and run typescript code.",["Date","2025-01-15T08:00:00.000Z"],"/images/online-editor-cover.jpg","Introducing my **Online Code Editor** (v1.0) a simple online code editor which can compile and run typescript code!\n\n\u003Cbutton href=\"/code\" className=\"bg-blue-500 hover:bg-blue-400 hover:underline w-full py-4 rounded-xl text-white\">Click to open online text editor!\u003C/button>\n\n### Technical Overview\n\nThe code editor appears to be a custom React-based implementation that likely provides in-browser code editing capabilities. It's built using TypeScript and seems to handle several key features:\n\n### Core Components\n\n- `Code.tsx`: Main editor component\n- `useSyntax.ts`: Custom hook for syntax handling\n\n### Key Features\n\n1. **Selection Management**\n\n   - Tracks cursor position and text selection\n   - Handles range selection with `Selection` API\n   - Includes safety checks for editor reference and anchor nodes\n\n2. **Text Content Handling**\n\n   - Manages code content through `innerText`\n   - Tracks total text length and code length separately\n   - Includes debug logging for content management\n\n3. **Client-Side Rendering**\n   - Uses `prerender = false` flag, indicating it's meant to run purely on the client side\n   - This makes sense for a code editor as it needs direct DOM access\n\n### Technical Implementation Notes\n\n- Uses React refs (`editorRef`) to maintain direct DOM access\n- Implements selection range management for cursor positioning\n- Includes debug logging with '[caret]' prefix for tracking selection and content states\n\nNote: This is still a work in progress and is mainly just an exploration of how to implement an online code editor with React, HTML, CSS and Tailwind. The hardest part was handling the text selection along with copy / paste.\n\n### What's next?\n\nNote this is still a work in progress and mainly just something I wanted to build for myself. At some point I'll add some more quality of life features like syntax highlighting, auto-completion, and more. Either way, this was a fun project to build and I'm glad I was able to share it with you all!","src/content/blog/online-code-editor.md","83c14903adf28184",{"html":45,"metadata":46},"\u003Cp>Introducing my \u003Cstrong>Online Code Editor\u003C/strong> (v1.0) a simple online code editor which can compile and run typescript code!\u003C/p>\n\u003Cp>\u003Cbutton href=\"/code\" class=\"bg-blue-500 hover:bg-blue-400 hover:underline w-full py-4 rounded-xl text-white\">Click to open online text editor!\u003C/button>\u003C/p>\n\u003Ch3 id=\"technical-overview\">Technical Overview\u003C/h3>\n\u003Cp>The code editor appears to be a custom React-based implementation that likely provides in-browser code editing capabilities. It’s built using TypeScript and seems to handle several key features:\u003C/p>\n\u003Ch3 id=\"core-components\">Core Components\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Ccode>Code.tsx\u003C/code>: Main editor component\u003C/li>\n\u003Cli>\u003Ccode>useSyntax.ts\u003C/code>: Custom hook for syntax handling\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"key-features\">Key Features\u003C/h3>\n\u003Col>\n\u003Cli>\n\u003Cp>\u003Cstrong>Selection Management\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>Tracks cursor position and text selection\u003C/li>\n\u003Cli>Handles range selection with \u003Ccode>Selection\u003C/code> API\u003C/li>\n\u003Cli>Includes safety checks for editor reference and anchor nodes\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Text Content Handling\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>Manages code content through \u003Ccode>innerText\u003C/code>\u003C/li>\n\u003Cli>Tracks total text length and code length separately\u003C/li>\n\u003Cli>Includes debug logging for content management\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Client-Side Rendering\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>Uses \u003Ccode>prerender = false\u003C/code> flag, indicating it’s meant to run purely on the client side\u003C/li>\n\u003Cli>This makes sense for a code editor as it needs direct DOM access\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"technical-implementation-notes\">Technical Implementation Notes\u003C/h3>\n\u003Cul>\n\u003Cli>Uses React refs (\u003Ccode>editorRef\u003C/code>) to maintain direct DOM access\u003C/li>\n\u003Cli>Implements selection range management for cursor positioning\u003C/li>\n\u003Cli>Includes debug logging with ‘[caret]’ prefix for tracking selection and content states\u003C/li>\n\u003C/ul>\n\u003Cp>Note: This is still a work in progress and is mainly just an exploration of how to implement an online code editor with React, HTML, CSS and Tailwind. The hardest part was handling the text selection along with copy / paste.\u003C/p>\n\u003Ch3 id=\"whats-next\">What’s next?\u003C/h3>\n\u003Cp>Note this is still a work in progress and mainly just something I wanted to build for myself. At some point I’ll add some more quality of life features like syntax highlighting, auto-completion, and more. Either way, this was a fun project to build and I’m glad I was able to share it with you all!\u003C/p>",{"headings":47,"localImagePaths":64,"remoteImagePaths":65,"frontmatter":66,"imagePaths":68},[48,52,55,58,61],{"depth":49,"slug":50,"text":51},3,"technical-overview","Technical Overview",{"depth":49,"slug":53,"text":54},"core-components","Core Components",{"depth":49,"slug":56,"text":57},"key-features","Key Features",{"depth":49,"slug":59,"text":60},"technical-implementation-notes","Technical Implementation Notes",{"depth":49,"slug":62,"text":63},"whats-next","What’s next?",[],[],{"title":37,"description":38,"pubDate":67,"heroImage":40,"slug":34},"Jan 15 2025",[],"santa-rally-mara-thon",{"id":69,"data":71,"body":76,"filePath":77,"digest":78,"rendered":79},{"title":72,"description":73,"pubDate":74,"heroImage":75},"Santa Rally Mara-thon","Marathon Digital soars over 51% this past week as inflation cools and speculation around a Bitcoin ETF rises, all in time for the holidays!",["Date","2023-12-22T08:00:00.000Z"],"/images/santa-rally.png","With only one trading day left before Christmas, it appears that Santa may have come early this year! At the time of writing [Marathon Digital (MARA)](https://www.mara.com/) is flirting with the **$27.00** price point and up over **52%** this week alone!\n\n\u003C!-- TradingView Widget BEGIN -->\n\u003Cdiv class=\"stock-chart\" style=\"440px; border-radius:4px; overflow:none;\">\n\u003Cdiv class=\"tradingview-widget-container; corner-radius:8px;\">\n  \u003Cdiv class=\"tradingview-widget-container__widget\">\u003C/div>\n  \u003Cscript type=\"text/javascript\" src=\"https://s3.tradingview.com/external-embedding/embed-widget-advanced-chart.js\" async>\n  {\n  \"width\": \"100%\",\n  \"height\": \"440\",\n  \"symbol\": \"NASDAQ:MARA\",\n  \"interval\": \"H\",\n  \"timezone\": \"Etc/UTC\",\n  \"theme\": \"dark\",\n  \"style\": \"3\",\n  \"locale\": \"en\",\n  \"enable_publishing\": false,\n  \"hide_top_toolbar\": true,\n  \"save_image\": false,\n  \"hide_volume\": true,\n  \"support_host\": \"https://www.tradingview.com\"\n}\n  \u003C/script>\n\u003C/div>\n\u003Cdiv class=\"tradingview-widget-copyright\">\u003Ca href=\"https://www.tradingview.com/\" rel=\"noopener nofollow\" target=\"_blank\">\u003Cspan class=\"orange-text\">Track all markets on TradingView\u003C/span>\u003C/a>\u003C/div>\n\u003C/div>\n\u003C!-- TradingView Widget END -->\n\nFor those who are unfamiliar [Marathon Digital](https://www.mara.com/) is a bitcoin mining company with a focus on blockchain technologies and various digital assets. While crypto has definitely fallen out of favor in recent memory, it appears that things might be changing...\n\n> Before market open, Marathon shook up the crypto miner scene by announcing that it had agreed to acquire a pair of Bitcoin (CRYPTO: BTC) mining sites. It bought the pair from subsidiaries of finance company Generate Capital at a price of $178.6 million. This purchase price is to be paid entirely in cash. [Source](https://finance.yahoo.com/news/why-marathon-digital-other-crypto-235300345.html)\n\nI’ve been following this stock along with her little brother [Riot Platforms (RIOT)](https://www.riotplatforms.com/) since the height of the pandemic, and after what can only be described as a boring year for trading all around, I’m finally starting to feel excited again!\n\nRumors have also been circulating for quite some time about the U.S. Securities and Exchange Commission approving [spot bitcoin ETFs](https://www.cnbc.com/2023/12/22/the-spot-bitcoin-etf-race-could-quickly-reach-your-401k-plan.html) in early January 2024. This prospect along with the halving scheduled later next year has sent Bitcoins price skyrocketing 64.33% over the past 3 months with Marathon Digital and Riot Platforms following in hot pursuit.\n\nAlong with this the Fed has taken a less hawkish stance as inflation has retreated faster than anticipated, with more rumors quickly circulating that interest rates could start coming down as early as March. While this is still purely speculation, the Fed’s favorite inflation metric the Personal Consumption Expenditures Price Index numbers came in at [3.2% beating expectations of 3.3%](https://www.cnbc.com/2023/12/22/pce-inflation-november-2023-.html) and signaling we may see a soft landing yet.\n\nCouple this with the yearly Santa Rally after a long year of dismal returns and a new generation of retail options trader, it’s possible we may have the perfect ingredients for a real Christmas miracle!\n\n**NOTE**: _This is not financial advice and I am currently holding 100 Shares along with several options contracts for 12/29_","src/content/blog/santa-rally-mara-thon.md","4ac7f59f48633983",{"html":80,"metadata":81},"\u003Cp>With only one trading day left before Christmas, it appears that Santa may have come early this year! At the time of writing \u003Ca href=\"https://www.mara.com/\">Marathon Digital (MARA)\u003C/a> is flirting with the \u003Cstrong>$27.00\u003C/strong> price point and up over \u003Cstrong>52%\u003C/strong> this week alone!\u003C/p>\n\u003C!-- TradingView Widget BEGIN -->\n\u003Cdiv class=\"stock-chart\" style=\"440px; border-radius:4px; overflow:none;\">\n\u003Cdiv class=\"tradingview-widget-container; corner-radius:8px;\">\n  \u003Cdiv class=\"tradingview-widget-container__widget\">\u003C/div>\n  \u003Cscript type=\"text/javascript\" src=\"https://s3.tradingview.com/external-embedding/embed-widget-advanced-chart.js\" async>\n  {\n  \"width\": \"100%\",\n  \"height\": \"440\",\n  \"symbol\": \"NASDAQ:MARA\",\n  \"interval\": \"H\",\n  \"timezone\": \"Etc/UTC\",\n  \"theme\": \"dark\",\n  \"style\": \"3\",\n  \"locale\": \"en\",\n  \"enable_publishing\": false,\n  \"hide_top_toolbar\": true,\n  \"save_image\": false,\n  \"hide_volume\": true,\n  \"support_host\": \"https://www.tradingview.com\"\n}\n  \u003C/script>\n\u003C/div>\n\u003Cdiv class=\"tradingview-widget-copyright\">\u003Ca href=\"https://www.tradingview.com/\" rel=\"noopener nofollow\" target=\"_blank\">\u003Cspan class=\"orange-text\">Track all markets on TradingView\u003C/span>\u003C/a>\u003C/div>\n\u003C/div>\n\u003C!-- TradingView Widget END -->\n\u003Cp>For those who are unfamiliar \u003Ca href=\"https://www.mara.com/\">Marathon Digital\u003C/a> is a bitcoin mining company with a focus on blockchain technologies and various digital assets. While crypto has definitely fallen out of favor in recent memory, it appears that things might be changing…\u003C/p>\n\u003Cblockquote>\n\u003Cp>Before market open, Marathon shook up the crypto miner scene by announcing that it had agreed to acquire a pair of Bitcoin (CRYPTO: BTC) mining sites. It bought the pair from subsidiaries of finance company Generate Capital at a price of $178.6 million. This purchase price is to be paid entirely in cash. \u003Ca href=\"https://finance.yahoo.com/news/why-marathon-digital-other-crypto-235300345.html\">Source\u003C/a>\u003C/p>\n\u003C/blockquote>\n\u003Cp>I’ve been following this stock along with her little brother \u003Ca href=\"https://www.riotplatforms.com/\">Riot Platforms (RIOT)\u003C/a> since the height of the pandemic, and after what can only be described as a boring year for trading all around, I’m finally starting to feel excited again!\u003C/p>\n\u003Cp>Rumors have also been circulating for quite some time about the U.S. Securities and Exchange Commission approving \u003Ca href=\"https://www.cnbc.com/2023/12/22/the-spot-bitcoin-etf-race-could-quickly-reach-your-401k-plan.html\">spot bitcoin ETFs\u003C/a> in early January 2024. This prospect along with the halving scheduled later next year has sent Bitcoins price skyrocketing 64.33% over the past 3 months with Marathon Digital and Riot Platforms following in hot pursuit.\u003C/p>\n\u003Cp>Along with this the Fed has taken a less hawkish stance as inflation has retreated faster than anticipated, with more rumors quickly circulating that interest rates could start coming down as early as March. While this is still purely speculation, the Fed’s favorite inflation metric the Personal Consumption Expenditures Price Index numbers came in at \u003Ca href=\"https://www.cnbc.com/2023/12/22/pce-inflation-november-2023-.html\">3.2% beating expectations of 3.3%\u003C/a> and signaling we may see a soft landing yet.\u003C/p>\n\u003Cp>Couple this with the yearly Santa Rally after a long year of dismal returns and a new generation of retail options trader, it’s possible we may have the perfect ingredients for a real Christmas miracle!\u003C/p>\n\u003Cp>\u003Cstrong>NOTE\u003C/strong>: \u003Cem>This is not financial advice and I am currently holding 100 Shares along with several options contracts for 12/29\u003C/em>\u003C/p>",{"headings":82,"localImagePaths":83,"remoteImagePaths":84,"frontmatter":85,"imagePaths":88},[],[],[],{"title":72,"description":73,"pubDate":86,"heroImage":75,"author":87,"slug":69},"Dec 22 2023","Colin Teahan",[],"clever-extract-replace-algorithm",{"id":89,"data":91,"body":96,"filePath":97,"digest":98,"rendered":99},{"title":92,"description":93,"pubDate":94,"heroImage":95},"Clever Extract & Replace Algorithm","A simple algorithm for extracting strings and replacing values written in TypeScript.",["Date","2022-12-16T08:00:00.000Z"],"/images/blog-placeholder-3.jpg","> A simple algorithm which recursively extracts specified keys from arbitrary data as a flat array, and can then replace those keys when called with another flat array of strings.\n\n```ts\nexport type ExtractAndReplaceProps = (\n  data: unknown,\n  keys: Set\u003Cstring>,\n  replace?: string[]\n) => string[]\n\nexport const extar: ExtractAndReplaceProps = (data, keys, replace) =>\n  Object.entries(data).reduce((previous, [key, value]) => {\n    if (typeof value === 'object')\n      return previous.concat(extar(value, keys, replace))\n    if (typeof value === 'string' && keys.has(key)) {\n      if (replace) data[key] = replace.shift() // replace that element if specified\n      return previous.concat(value) // always extract original element\n    }\n    return previous\n  }, [] as string[])\n```\n\nThe other day my colleague was working on a translation micro-service and was contemplating on how to best extract specific strings from arbitrary JSON data to send to the translation API. The translation API only accepts a flat array of strings, and would return the same translated. He was tinkering with several approaches, but to be honest they were all needlessly complex and over-engineered.\n\nFor the next couple of days this problem lingered in the back of my mind, festering, begging for a simple and elegant solution. Finally, I decided to take a stab at the problem and was quite happy with the solution (simplified above). First, things first let's map out the requirements:\n\n- a function which takes arbitrary and possibly nested JSON data\n- a set of keys which we would like to extract\n- returns a flat array of strings\n- a way to map these values back to the original data\n\nThe data would be fairly uniform, but could have several layers of nesting along with arbitrary keys, so my first step was just to traverse the data recursively. I remember from implementing a deep copy function in TypeScript in the past we would need something like the following:\n\n```ts\nfunction traverse(data: unknown) {\n  if (typeof data !== 'object') return\n  if (Array.isArray(data)) {\n    for (const value of data) {\n      traverse(value)\n    }\n  } else {\n    for (const key in data) {\n      traverse(data[key])\n    }\n  }\n}\n```\n\nBasically, the idea is to recursively traverse any array elements and objects values. Since the `typeof` operator returns `'object'` for both arrays and objects, we also need to perform an additional check to see if the value is an array.\n\nHowever, I was not happy with this approach as it felt a bit too clunky and verbose. Sometimes I really wish the `typeof` operator would return `'array'` for arrays, but then I remembered that arrays are objects in TypeScript, and that I could use this to my advantage.\n\n```ts\nfunction traverse(data: unknown) {\n  if (typeof data !== 'object') return\n  for (const keyOrIndex in data) {\n    traverse(data[keyOrIndex])\n  }\n}\n```\n\nSweet! The **for...in** loop will return **0, 1, 2, 3...** for arrays and **key1**, **key2**, **key3**... for objects. Not exactly groundbreaking, but this was a step in the right direction! The next step was to extract specific string values from the data. Since this data would be subject to change over time, one of the requirements was to be able to pass a list of strings which we wanted to extract. This would be a perfect place for a `Set\u003Cstring>`!\n\n```ts\nfunction extract(data: unknown, keys: Set\u003Cstring>): string[] {\n  if (typeof data !== 'object') return []\n  let extracted: string[] = []\n  for (const keyOrIndex in data) {\n    const value = data[keyOrIndex]\n    if (typeof value === 'string' && keys.has(keyOrIndex)) {\n      extracted.push(value)\n    } else {\n      const subValuesExtracted = extract(value, keys)\n      extracted = extracted.concat(subValuesExtracted)\n    }\n  }\n  return extracted\n}\n```","src/content/blog/first-post.md","c1ad68c54e026aa3",{"html":100,"metadata":101},"\u003Cblockquote>\n\u003Cp>A simple algorithm which recursively extracts specified keys from arbitrary data as a flat array, and can then replace those keys when called with another flat array of strings.\u003C/p>\n\u003C/blockquote>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> type\u003C/span>\u003Cspan style=\"color:#B392F0\"> ExtractAndReplaceProps\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  data\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> unknown\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  keys\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Set\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  replace\u003C/span>\u003Cspan style=\"color:#F97583\">?:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> const\u003C/span>\u003Cspan style=\"color:#B392F0\"> extar\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> ExtractAndReplaceProps\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">data\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">keys\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">replace\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  Object.\u003C/span>\u003Cspan style=\"color:#B392F0\">entries\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(data).\u003C/span>\u003Cspan style=\"color:#B392F0\">reduce\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">previous\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, [\u003C/span>\u003Cspan style=\"color:#FFAB70\">key\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">value\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">typeof\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> value \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'object'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> previous.\u003C/span>\u003Cspan style=\"color:#B392F0\">concat\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">extar\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(value, keys, replace))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">typeof\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> value \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'string'\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> keys.\u003C/span>\u003Cspan style=\"color:#B392F0\">has\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(key)) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (replace) data[key] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> replace.\u003C/span>\u003Cspan style=\"color:#B392F0\">shift\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() \u003C/span>\u003Cspan style=\"color:#6A737D\">// replace that element if specified\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> previous.\u003C/span>\u003Cspan style=\"color:#B392F0\">concat\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(value) \u003C/span>\u003Cspan style=\"color:#6A737D\">// always extract original element\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> previous\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }, [] \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[])\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The other day my colleague was working on a translation micro-service and was contemplating on how to best extract specific strings from arbitrary JSON data to send to the translation API. The translation API only accepts a flat array of strings, and would return the same translated. He was tinkering with several approaches, but to be honest they were all needlessly complex and over-engineered.\u003C/p>\n\u003Cp>For the next couple of days this problem lingered in the back of my mind, festering, begging for a simple and elegant solution. Finally, I decided to take a stab at the problem and was quite happy with the solution (simplified above). First, things first let’s map out the requirements:\u003C/p>\n\u003Cul>\n\u003Cli>a function which takes arbitrary and possibly nested JSON data\u003C/li>\n\u003Cli>a set of keys which we would like to extract\u003C/li>\n\u003Cli>returns a flat array of strings\u003C/li>\n\u003Cli>a way to map these values back to the original data\u003C/li>\n\u003C/ul>\n\u003Cp>The data would be fairly uniform, but could have several layers of nesting along with arbitrary keys, so my first step was just to traverse the data recursively. I remember from implementing a deep copy function in TypeScript in the past we would need something like the following:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> traverse\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">data\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> unknown\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">typeof\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> data \u003C/span>\u003Cspan style=\"color:#F97583\">!==\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'object'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (Array.\u003C/span>\u003Cspan style=\"color:#B392F0\">isArray\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(data)) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> value\u003C/span>\u003Cspan style=\"color:#F97583\"> of\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> data) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      traverse\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(value)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> key\u003C/span>\u003Cspan style=\"color:#F97583\"> in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> data) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      traverse\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(data[key])\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Basically, the idea is to recursively traverse any array elements and objects values. Since the \u003Ccode>typeof\u003C/code> operator returns \u003Ccode>'object'\u003C/code> for both arrays and objects, we also need to perform an additional check to see if the value is an array.\u003C/p>\n\u003Cp>However, I was not happy with this approach as it felt a bit too clunky and verbose. Sometimes I really wish the \u003Ccode>typeof\u003C/code> operator would return \u003Ccode>'array'\u003C/code> for arrays, but then I remembered that arrays are objects in TypeScript, and that I could use this to my advantage.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> traverse\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">data\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> unknown\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">typeof\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> data \u003C/span>\u003Cspan style=\"color:#F97583\">!==\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'object'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> keyOrIndex\u003C/span>\u003Cspan style=\"color:#F97583\"> in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> data) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    traverse\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(data[keyOrIndex])\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Sweet! The \u003Cstrong>for…in\u003C/strong> loop will return \u003Cstrong>0, 1, 2, 3…\u003C/strong> for arrays and \u003Cstrong>key1\u003C/strong>, \u003Cstrong>key2\u003C/strong>, \u003Cstrong>key3\u003C/strong>… for objects. Not exactly groundbreaking, but this was a step in the right direction! The next step was to extract specific string values from the data. Since this data would be subject to change over time, one of the requirements was to be able to pass a list of strings which we wanted to extract. This would be a perfect place for a \u003Ccode>Set&#x3C;string>\u003C/code>!\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> extract\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">data\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> unknown\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">keys\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Set\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[] {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">typeof\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> data \u003C/span>\u003Cspan style=\"color:#F97583\">!==\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'object'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> []\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> extracted\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> []\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> keyOrIndex\u003C/span>\u003Cspan style=\"color:#F97583\"> in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> data) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> value\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> data[keyOrIndex]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">typeof\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> value \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'string'\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> keys.\u003C/span>\u003Cspan style=\"color:#B392F0\">has\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(keyOrIndex)) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      extracted.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(value)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> subValuesExtracted\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> extract\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(value, keys)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      extracted \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> extracted.\u003C/span>\u003Cspan style=\"color:#B392F0\">concat\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(subValuesExtracted)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> extracted\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>",{"headings":102,"localImagePaths":103,"remoteImagePaths":104,"frontmatter":105,"imagePaths":107},[],[],[],{"title":92,"description":93,"author":87,"pubDate":106,"heroImage":95,"slug":89},"Dec 16 2022",[],"typescript-snippets",{"id":108,"data":110,"body":115,"filePath":116,"digest":117,"rendered":118},{"title":111,"description":112,"pubDate":113,"heroImage":114},"Typescript Snippets","Useful TypeScript snippets for everyday use which can be easily copied and pasted.",["Date","2024-05-14T07:00:00.000Z"],"/images/typescript-banner.png","This document contains a collection of useful, interesting and sometimes quirky snippets of TypeScript I've gathered over the years. Some of these patterns are not unique to TypeScript, but in these examples they should be also type-safe (hopefully).\n\n### Builder Pattern\n\nThe following snippet creates a typed object by progressively adding properties, this can be useful for defining different errors in an application.\n\n**CAVEAT**: In order for the `this` in `register()` method to work correctly, the definition cannot use an arrow function.\n\n```ts\ntype ErrorRegistry\u003CT extends string> = Record\u003CT, number> & {\n  register\u003CK extends string>(error: K, code: number): ErrorRegistry\u003CK | T>\n}\n\nfunction createErrorRegistry\u003CT extends string>(domain: T) {\n  const errorRegistry = {\n    register\u003CK extends T>(error: K, code: number) {\n      return {\n        ...this,\n        [error]: code,\n      } as ErrorRegistry\u003CT | K>\n    },\n  } as ErrorRegistry\u003CT>\n  return errorRegistry\n}\n\nconst output = createErrorRegistry('app')\n  .register('linking', 100)\n  .register('billing', 200)\n  .register('surface', 200)\n```\n\n[Typescript Playground Link](https://www.typescriptlang.org/play/?target=99#code/C4TwDgpgBAogTnA9nAShA5gSwM7DiAHgBUoIAPYCAOwBNspc5Mr0A+KAXijQGNkbiAGihUArgFsARhDjsAZFADeAKChqocDDkpwCAaVIVqdBnmZsAFDKRwAXFD3C+NCPbFSZASnvwbaLIyEBgA+UESsygC+ysoAZqJUPMCYiFRQPJoAhpS+yP7a+MSGlLT0jOasFjSI4pnM9kSeSqrqfFS4pAh5WoGczeoDGj06+sXG9OFWXXYOTogubhLScE0qg+tDwKJwaWsb+wB0R8AAFjiCLfvrANrWyAC69s4Ql1eRUJn0uajDhSShenYrwG0RBHy+03ygWIEQGmi2O06fl+ICiMTaHUQomAYGxfQyEGyEG+ULwIAsAHJMmAwBTPK8DpoAjpKQAbZgAa3MFOEAEYAAz8+kDRnDGSUySYVnslg8qAAJkFwvUouZ4op2G2sUyPAgcsVQvRqWwiFZEAOrMQ6AsWJx2KaAHoHVAgA)\n\n### Branded Types\n\nThe following snippet defines a utility type `Brand\u003Cany, string>` which can be used to create an alias of an existing type, which is more strict than the original type.\n\n```ts\ndeclare const BrandSymbol: unique symbol\n\ntype Brand\u003CT, Description extends string> = T & {\n  [BrandSymbol]: Description\n}\n\n// example usage\n\ntype UserId = Brand\u003Cnumber, 'UserId'>\n\nfunction trackUser(userId: UserId) {\n  console.log('user:', userId)\n}\n\nconst userOne = 123 as UserId\nconst userTwo = 123\n\ntrackUser(userOne) // ok\ntrackUser(userTwo) // error\n```\n\n[Typescript Playground Link](https://www.typescriptlang.org/play/?target=99#code/FAEwpgxgNghgTmABBA9gOwM4BdECE4xogDKAngLYBGKUAXIgK5oCWAjg0hhdVMMFqQAOSfIRAAeACoAaRABEwGCHGaCszdIjAAPLGCIZE2FWgDmAPkQBeRJMQAyRAG9giN4gDaoomSo0AuvQKSipqGmjAAL58APQxWtow5IJQSAwYMKZgfALCiACqGGBwAJIg1ngEROJoDFTFsgDkhcVljeZ8AGZMEOqaWAQQANYtcAAU6a0g9KNlAJTOru6omDRgAHRQKKZjjZNwtI2y+-NRfCvYjEVwAPJoSDYAjABMAMyIMIazIMAXOPuSADuKAqL1eOUGI2uE2udzACziiBQQ34kNGMOKQJQCPixTgKDgfCAA)\n\n### Monad\\*\n\nThe following is a monad-like type which has support for operatings over elements of an array, or the array itself.\n\n```ts\n/**\n * This class facilitates the chaining of operations on a value,\n * each task will either return a new Monad or MonadIterable.\n */\nexport class Monad\u003CI> {\n  constructor(public value: I) {}\n\n  public pipe\u003CO>(operation: (value: I) => O[]): MonadIterable\u003CO[]>\n\n  public pipe\u003CO>(operation: (value: I) => O): Monad\u003CO>\n\n  public pipe\u003CO>(operation: (value: I) => O): Monad\u003CO> | MonadIterable\u003CO[]> {\n    const result = operation(this.value)\n    return Array.isArray(result) ? new MonadIterable(result) : new Monad(result)\n  }\n\n  public print(label?: string): Monad\u003CI> {\n    console.log(`${label}:` ?? 'value:', this.value)\n    return this\n  }\n}\n\n/**\n * This is an extension of the Monad class that allows for operations\n * on iterable values. The reduce method will convert back to\n * a basic Monad.\n */\nexport class MonadIterable\u003CI extends any[]> extends Monad\u003Cany> {\n  public iterate\u003CO>(\n    operation: (value: I[number], index?: number, array?: I) => O\n  ): MonadIterable\u003CO[]> {\n    return new MonadIterable(this.value.map(operation))\n  }\n\n  public filter\u003CO>(\n    operation: (value: I[number], index?: number, array?: I) => O\n  ): MonadIterable\u003CI> {\n    return new MonadIterable(this.value.filter(operation))\n  }\n\n  public reduce\u003CO>(\n    operation: (prev: O, value: I[number], index?: number, array?: I) => O,\n    initialValue: Partial\u003CO> = {}\n  ): Monad\u003CO> {\n    return new Monad(this.value.reduce(operation, initialValue))\n  }\n\n  /**\n   * Converts an iterable monad back into a normal monad.\n   */\n  public combine\u003CO>(operation: (value: I) => O): Monad\u003CO> {\n    return new Monad(operation(this.value))\n  }\n}\n```\n\n[Try it on the TypeScript playground!](https://www.typescriptlang.org/play/?target=99#code/PQKhCgAIUgVALAlgZ0gYwDYENmoGZZqIaIAuWpApqqfJevFogHYsDmkA9nlwA6UAnCok7NUoyFkgA3LBgCulADRQYlQvEjlkAa0gB3YhkiUydAZAGVS8gc0mRmlfZACyorABMuF98y8AklRCAEYYlAB0qsDgmDiofl4APAEAfJAA3uBQ6KLIpALyaKScAgAUvPJhiGgycooAXJABAJSZAL7ZkJCV1bW8iPxJAPKpZZz8QqQizE1lsgqUTa2QALzpwwDaALotTYmeQYJYYZQjO6ldPVUk-YNno+OTwqJzC43NbeuQw3tuHp4Rpccr1bj17kCnsdpq9IPN6ktPmsNn8DkDIAAff7+Q7BE7hc7bdJZbrdNB5UiWajyDCU1Z8aEzMq0FARd6UFo5bpWGx2SAAQQEQgAnhEUIKRWUrMgaaQ2gB+RzObGBPGnKXU2ltJpOFwHDUyrU5Togm41HoCFikMrYEKUDDypr5S3MNiogEpYlc3JiTjhCIYThsMoAAwAJBlbfb2g0Q5B5YqAOTshqJpRaJDINkIzmkqm8+ws5DG8Am0AQaBwTOQFCSeyUAAeVDEMy4PFo9AO6GwuAzFEkGED+nwpQZUxmxcrEjIx1OdUWWar9CsniK9AAttZ4JxvIZBz7pIJKSFCHoSqoHCfkOaDlFoDE4r2DkdQgSAiYm5RmJ5UFhmMKLg-ZsfxVQE-2FL1TT6Gs8SoSEJkZWF4UWZZNmYeR1ztARtnTFhPEbR1HAwrD0ywIUsGFQiVm+X59gBF98QeQCSVJHlbHsXVQIY9Ui2zRYInXLBeChcdRBaXNIBNbpQXNPBiGCeDnhhWY4RTZo0OIwQcJrb8CJ1TSBFI8jKOWL4UTonFuLfL08zYvlOOfNVwmZTM+MUCI5NpQQRJeZhxJLKCwRXNdIW9BDRJUiorGkJphnTNSAg0zCtNw3SG0I9DksMyRjKosyfhUPMWDIRA5AANQRJoAAUyOmOR0XpDJOm6d0cXRFjuWsdilT1AEXNZdkImCtBKB85TUpK8qcwkqTIHLLkYAAYVEQ8BFIX97BnV8NwBSATzQPQrU4BxmFKQTjHXAE726EAYmks1anJTCWAeMZwt8t5KqRGjWuSUZMm9OyOOVfV3uU-qs3Zfzuk6MtgDWVZEaR5GUdRtH0YxzHwGAeGAFEGywddeHCbH4cx8mKcprHYgpLh5FISo6R60CygyecPgARkkiTugiAZ+DKZkcB0fLtB0Nz6BgAAmAAGGWecgPn7kFzKQny1WIhKABlAp2DKaHSSVgWymdPzkUgU2ImQYmyDKAAiO2Dd5raKFGso0EYAR8o9siIh9gRlvw-lrXlhWPPk7zxmKTh8s4aPNc4HWXWDAAOJ3FeGt3eGi9M0FsL3zYAOQMqLKGkNoAGp0Hz9N5e9PmXWtO28-yTh1wAfSjDBHfr9kgA)\n\n### Define Class via Enum (WIP)\n\n**NOTE**: This has only been tested on TypeScript 5.4.5 and is still expiramental, see [here for example](https://www.typescriptlang.org/play/?target=99&ts=5.5.0-beta#code/MYewdgziA2CmB0w4EMBOAKAlAKF72YArgLYAEAqhLKgMrAAWsxypA3tqZ6YVagJIATUgF5SAcj4A5ACoBRAOKyASqUkB5SavIAZbWIA0HLgDMAlqggAXScmKwR4uQA1pqjVt0GjnaMis27BzFnV3VNSR09QwBfXEsATwAHe1kiYgBhXwgIAB5pAD4Hdi5SMFgAd1J0eBq0AHMIAC5SZDB4gG0AXUxm6WxY7ATk0gB1VFNLWGQAIzg8wtFWUgBaVCmBcGh40naABVJTMFIAa1h4kGNSaU7evc7SaIBuPCGUtN3UEETcgqLvHdO20OJzOFyuN1KJGm1FIAB9SFZxmA6nDSNMQDApkd4QARZCTfq4MC2WAQRLIYD2TJ+CBsf6wAAeiRAqEspGMhDAwEspnApCQNIAYp9iKkSDlZPorvl0AQSHRGMxmrIeqQxRksj9CsUSlw1pZCKgjgLsnTdeb+eBEYRuSz0PUmmr3p9vhL8pg6f8Lbq4Gz6KYBAICDRLPjYMrnV9crIFqQ1NMAFawbnwGmmOpgdCsaJSh04L3ekwsqqgSBsxIu6gJA5HOXEBVMZAe9gFwu60tQODwaAgOroAAGQbMYEOKIrXyr2wAJKxx8lWfFov38222-Gkymh4dYB8Jwv0JZ-RApXPJ1KdavV3XqDM4M1LKhCLBDJfL6WzHVDbfw6QH0+X6+bblOMoazD+f7Pq2gFcHUsBsgAbsg0BPlgZrQZe+qGkc-qBsGoaTO0p4Lp0UHoTmpHQVQCFIShZQMpYABqNGwM2FHoZwOFBmAIZhoRlbEQ4dGMcxbGvrE7FcNEOBkaJ4kWtELS0hehZlJU9qoA0EYkLuroxqqfTenJnCxAMrykAA0mctKiICYKvGClDUA2zDYAA9K5XAAHoAPwvEk9jOcgABChwCKOfwlDw1CCM0aTQqg-xmBY1gks0iKjv8WQpXYaUPhlAwmrSjmoKQjKTGAAi0tS2SIJqwogKKaQ5PZlzFYFUqBSFFWjjKbUMI2rH-FRASwOgHLQNAI25UidSsd6HZsu0SX+CSUpZSN9yiONk0kvAZLQBM6AAESkEd0kWoepgQPAy3ZfYW3mCtdhQZd13rSSDjvc9JQmXg2ALaQxDxMVgkVBQvBZv8UX8AIzQAIwAEwAMwAZwt1TeI6QwIcXglF9P7BFM9CtLjXBlagyD3o+sD9PmQPFXtcEjcdQUgNMpBBTaxyTKgZ24B2mLdr26D07wmBAA).\n\nThis allows us to define an enum which will auto-_magically_ be created into a class definition, and then extended. This is great for a simple ORM with SQLite!\n\n```ts\n// SPECIAL TYPES\n\ntype EnumClass\u003CT> = {\n  new (...args: any[]): T\n}\n\ntype Writeable\u003CT> = { -readonly [P in keyof T]: T[P] }\n\ntype EnumProps\u003CT> = {\n  [key in keyof T]: number | string | boolean | Date\n}\n\n// THE MAGIC\n\nnamespace Class {\n  export function classFromEnum\u003CE, T>(enumSchema: E): EnumClass\u003CT> {\n    return class {\n      constructor(args: EnumProps\u003CE>) {\n        let hiddenState: EnumProps\u003CE> = Object.assign({}, args)\n\n        for (const property in enumSchema) {\n          console.log(`defining property ${property}`)\n\n          Object.defineProperty(this, property, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            get value() {\n              return hiddenState[property]\n            },\n            set value(nextValue) {\n              hiddenState[property] = nextValue\n            },\n          })\n        }\n      }\n    } as {\n      new (args: EnumProps\u003CE>): T\n    }\n  }\n}\n\n// EXAMPLE UASGES\n\nenum UserSchema {\n  userId = 'INTEGER NON NULL',\n  firstName = 'TEXT NON NULL',\n  lastName = 'TEXT NON NULL',\n}\n\ntype SchemaBinding = {\n  userId: number\n  firstName: string\n  lastName: string\n}\n\nclass User extends Class.classFromEnum\u003Ctypeof UserSchema, SchemaBinding>(\n  UserSchema\n) {\n  setName(fullName: string) {\n    const [firstName, lastName] = fullName.split(' ')\n    this.firstName = firstName\n    this.lastName = lastName\n  }\n}\n\nconst myUser = new User({\n  userId: 123,\n  firstName: 'Bob',\n  lastName: 'Smitch',\n  extra: true,\n})\n\nmyUser.setName('Colin Teahan')\n\nconsole.log(myUser.firstName) // Colin\n```\n\n[Try it on the TypeScript Playground](https://www.typescriptlang.org/play/?target=99&ts=5.5.0-beta#code/MYewdgziA2CmB0w4EMBOAKAlAKF72YArgLYAEAqhLKgMrAAWsxypA3tqZ6YVagJIATUgF5SAcj4A5ACoBRAOKyASqUkB5SavIAZbWIA0HLgDMAlqggAXScmKwR4uQA1pqjVt0GjnaMis27BzFnV3VNSR09QwBfXEsATwAHe1kiYgBhXwgIAB5pAD4Hdi5SMFgAd1J0eBq0AHMIAC5SZDB4gG0AXUxm6WxY7ATk0gB1VFNLWGQAIzg8wtFWUgBaVCmBcGh40naABVJTMFIAa1h4kGNSaU7evc7SaIBuPCGUtN3UEETcgqLvHdO20OJzOFyuN1KJGm1FIAB9SFZxmA6nDSNMQDApkd4QARZCTfq4MC2WAQRLIYD2TJ+CBsf6wAAeiRAqEspGMhDAwEspnApCQNIAYp9iKkSDlZPorvl0AQSHRGMxmrIeqQxRksj9CsUSlw1pZCKgjgLsnTdeb+eBEYRuSz0PUmmr3p9vhL8pg6f8Lbq4Gz6KYBAICDRLPjYMrnV9crIFqQ1NMAFawbnwGmmOpgdCsaJSh04L3ekwsqqgSBsxIu6gJA5HOXEBVMZAe9gFwu60tQODwaAgOroAAGQbMYEOKIrXyr2wAJKxx8lWfFov38222-Gkymh4dYB8Jwv0JZ-RApXPJ1KdavV3XqDM4M1LKhCLBDJfL6WzHVDbfw6QH0+X6+bblOMoazD+f7Pq2gFcHUsBsgAbsg0BPlgZrQZe+qGkc-qBsGoaTO0p4Lp0UHoTmpHQVQCFIShZQMpYABqNGwM2FHoZwOFBmAIZhoRlbEQ4dGMcxbGvrE7FcNEOBkaJ4kWtELS0hehZlJU9qoA0EYkLuroxqqfTenJnCxAMrykAA0mctKiICYKvGClDUA2zDYAA9K5XAAHoAPwvEk9jOcgABChwCKOfwlDw1CCM0aTQqg-xmBY1gks0iKjv8WQpXYaUPhlAwmrSjmoKQjKTGAAi0tS2SIJqwogKKaQ5PZlzFYFUqBSFFWjjKbUMI2rH-FRASwOgHLQNAI25UidSsd6HZsu0SX+CSUpZSN9yiONk0kvAZLQBM6AAESkEd0kWoepgQPAy3ZfYW3mCtdhQZd13rSSDjvc9JQmXg2ALaQxDxMVgkVBQvBZv8UX8AIzQAIwAEwAMwAZwt1TeI6QwIcXglF9P7BFM9CtLjXBlagyD3o+sD9PmQPFXtcEjcdQUgNMpBBTaxyTKgZ24B2mLdr26D07wmBAA)","src/content/blog/typescript-snippets.md","670d77fa6c39eeb4",{"html":119,"metadata":120},"\u003Cp>This document contains a collection of useful, interesting and sometimes quirky snippets of TypeScript I’ve gathered over the years. Some of these patterns are not unique to TypeScript, but in these examples they should be also type-safe (hopefully).\u003C/p>\n\u003Ch3 id=\"builder-pattern\">Builder Pattern\u003C/h3>\n\u003Cp>The following snippet creates a typed object by progressively adding properties, this can be useful for defining different errors in an application.\u003C/p>\n\u003Cp>\u003Cstrong>CAVEAT\u003C/strong>: In order for the \u003Ccode>this\u003C/code> in \u003Ccode>register()\u003C/code> method to work correctly, the definition cannot use an arrow function.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> ErrorRegistry\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#F97583\"> extends\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> Record\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  register\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">K\u003C/span>\u003Cspan style=\"color:#F97583\"> extends\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003Cspan style=\"color:#FFAB70\">error\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> K\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">code\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> ErrorRegistry\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">K\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> createErrorRegistry\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#F97583\"> extends\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003Cspan style=\"color:#FFAB70\">domain\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> errorRegistry\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    register\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">K\u003C/span>\u003Cspan style=\"color:#F97583\"> extends\u003C/span>\u003Cspan style=\"color:#B392F0\"> T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003Cspan style=\"color:#FFAB70\">error\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> K\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">code\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        ...\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        [error]: code,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      } \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#B392F0\"> ErrorRegistry\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> K\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  } \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#B392F0\"> ErrorRegistry\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> errorRegistry\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> output\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> createErrorRegistry\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'app'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  .\u003C/span>\u003Cspan style=\"color:#B392F0\">register\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'linking'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  .\u003C/span>\u003Cspan style=\"color:#B392F0\">register\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'billing'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">200\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  .\u003C/span>\u003Cspan style=\"color:#B392F0\">register\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'surface'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">200\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Ca href=\"https://www.typescriptlang.org/play/?target=99#code/C4TwDgpgBAogTnA9nAShA5gSwM7DiAHgBUoIAPYCAOwBNspc5Mr0A+KAXijQGNkbiAGihUArgFsARhDjsAZFADeAKChqocDDkpwCAaVIVqdBnmZsAFDKRwAXFD3C+NCPbFSZASnvwbaLIyEBgA+UESsygC+ysoAZqJUPMCYiFRQPJoAhpS+yP7a+MSGlLT0jOasFjSI4pnM9kSeSqrqfFS4pAh5WoGczeoDGj06+sXG9OFWXXYOTogubhLScE0qg+tDwKJwaWsb+wB0R8AAFjiCLfvrANrWyAC69s4Ql1eRUJn0uajDhSShenYrwG0RBHy+03ygWIEQGmi2O06fl+ICiMTaHUQomAYGxfQyEGyEG+ULwIAsAHJMmAwBTPK8DpoAjpKQAbZgAa3MFOEAEYAAz8+kDRnDGSUySYVnslg8qAAJkFwvUouZ4op2G2sUyPAgcsVQvRqWwiFZEAOrMQ6AsWJx2KaAHoHVAgA\">Typescript Playground Link\u003C/a>\u003C/p>\n\u003Ch3 id=\"branded-types\">Branded Types\u003C/h3>\n\u003Cp>The following snippet defines a utility type \u003Ccode>Brand&#x3C;any, string>\u003C/code> which can be used to create an alias of an existing type, which is more strict than the original type.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">declare\u003C/span>\u003Cspan style=\"color:#F97583\"> const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> BrandSymbol\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> unique\u003C/span>\u003Cspan style=\"color:#79B8FF\"> symbol\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> Brand\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">Description\u003C/span>\u003Cspan style=\"color:#F97583\"> extends\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> T\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  [BrandSymbol]\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Description\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// example usage\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> UserId\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> Brand\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'UserId'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> trackUser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">userId\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> UserId\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'user:'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, userId)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> userOne\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 123\u003C/span>\u003Cspan style=\"color:#F97583\"> as\u003C/span>\u003Cspan style=\"color:#B392F0\"> UserId\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> userTwo\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 123\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">trackUser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(userOne) \u003C/span>\u003Cspan style=\"color:#6A737D\">// ok\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">trackUser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(userTwo) \u003C/span>\u003Cspan style=\"color:#6A737D\">// error\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Ca href=\"https://www.typescriptlang.org/play/?target=99#code/FAEwpgxgNghgTmABBA9gOwM4BdECE4xogDKAngLYBGKUAXIgK5oCWAjg0hhdVMMFqQAOSfIRAAeACoAaRABEwGCHGaCszdIjAAPLGCIZE2FWgDmAPkQBeRJMQAyRAG9giN4gDaoomSo0AuvQKSipqGmjAAL58APQxWtow5IJQSAwYMKZgfALCiACqGGBwAJIg1ngEROJoDFTFsgDkhcVljeZ8AGZMEOqaWAQQANYtcAAU6a0g9KNlAJTOru6omDRgAHRQKKZjjZNwtI2y+-NRfCvYjEVwAPJoSDYAjABMAMyIMIazIMAXOPuSADuKAqL1eOUGI2uE2udzACziiBQQ34kNGMOKQJQCPixTgKDgfCAA\">Typescript Playground Link\u003C/a>\u003C/p>\n\u003Ch3 id=\"monad\">Monad*\u003C/h3>\n\u003Cp>The following is a monad-like type which has support for operatings over elements of an array, or the array itself.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">/**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"> * This class facilitates the chaining of operations on a value,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"> * each task will either return a new Monad or MonadIterable.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"> */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#B392F0\"> Monad\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">I\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  constructor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">public\u003C/span>\u003Cspan style=\"color:#FFAB70\"> value\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> I\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  public\u003C/span>\u003Cspan style=\"color:#B392F0\"> pipe\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">O\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003Cspan style=\"color:#B392F0\">operation\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">value\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> I\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> O\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[])\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> MonadIterable\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">O\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[]>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  public\u003C/span>\u003Cspan style=\"color:#B392F0\"> pipe\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">O\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003Cspan style=\"color:#B392F0\">operation\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">value\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> I\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> O\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Monad\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">O\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  public\u003C/span>\u003Cspan style=\"color:#B392F0\"> pipe\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">O\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003Cspan style=\"color:#B392F0\">operation\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">value\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> I\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> O\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Monad\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">O\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#B392F0\"> MonadIterable\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">O\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[]> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> result\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> operation\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.value)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Array.\u003C/span>\u003Cspan style=\"color:#B392F0\">isArray\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(result) \u003C/span>\u003Cspan style=\"color:#F97583\">?\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> MonadIterable\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(result) \u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Monad\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(result)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  public\u003C/span>\u003Cspan style=\"color:#B392F0\"> print\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">label\u003C/span>\u003Cspan style=\"color:#F97583\">?:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Monad\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">I\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">label\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}:`\u003C/span>\u003Cspan style=\"color:#F97583\"> ??\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'value:'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.value)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">/**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"> * This is an extension of the Monad class that allows for operations\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"> * on iterable values. The reduce method will convert back to\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"> * a basic Monad.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"> */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#B392F0\"> MonadIterable\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">I\u003C/span>\u003Cspan style=\"color:#F97583\"> extends\u003C/span>\u003Cspan style=\"color:#79B8FF\"> any\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[]> \u003C/span>\u003Cspan style=\"color:#F97583\">extends\u003C/span>\u003Cspan style=\"color:#B392F0\"> Monad\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">any\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  public\u003C/span>\u003Cspan style=\"color:#B392F0\"> iterate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">O\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    operation\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">value\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> I\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">], \u003C/span>\u003Cspan style=\"color:#FFAB70\">index\u003C/span>\u003Cspan style=\"color:#F97583\">?:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">array\u003C/span>\u003Cspan style=\"color:#F97583\">?:\u003C/span>\u003Cspan style=\"color:#B392F0\"> I\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> O\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  )\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> MonadIterable\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">O\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[]> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> MonadIterable\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.value.\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(operation))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  public\u003C/span>\u003Cspan style=\"color:#B392F0\"> filter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">O\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    operation\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">value\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> I\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">], \u003C/span>\u003Cspan style=\"color:#FFAB70\">index\u003C/span>\u003Cspan style=\"color:#F97583\">?:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">array\u003C/span>\u003Cspan style=\"color:#F97583\">?:\u003C/span>\u003Cspan style=\"color:#B392F0\"> I\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> O\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  )\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> MonadIterable\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">I\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> MonadIterable\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.value.\u003C/span>\u003Cspan style=\"color:#B392F0\">filter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(operation))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  public\u003C/span>\u003Cspan style=\"color:#B392F0\"> reduce\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">O\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    operation\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">prev\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> O\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">value\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> I\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">], \u003C/span>\u003Cspan style=\"color:#FFAB70\">index\u003C/span>\u003Cspan style=\"color:#F97583\">?:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">array\u003C/span>\u003Cspan style=\"color:#F97583\">?:\u003C/span>\u003Cspan style=\"color:#B392F0\"> I\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> O\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">    initialValue\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Partial\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">O\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  )\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Monad\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">O\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Monad\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.value.\u003C/span>\u003Cspan style=\"color:#B392F0\">reduce\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(operation, initialValue))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  /**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">   * Converts an iterable monad back into a normal monad.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">   */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  public\u003C/span>\u003Cspan style=\"color:#B392F0\"> combine\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">O\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003Cspan style=\"color:#B392F0\">operation\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">value\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> I\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> O\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Monad\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">O\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Monad\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">operation\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.value))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Ca href=\"https://www.typescriptlang.org/play/?target=99#code/PQKhCgAIUgVALAlgZ0gYwDYENmoGZZqIaIAuWpApqqfJevFogHYsDmkA9nlwA6UAnCok7NUoyFkgA3LBgCulADRQYlQvEjlkAa0gB3YhkiUydAZAGVS8gc0mRmlfZACyorABMuF98y8AklRCAEYYlAB0qsDgmDiofl4APAEAfJAA3uBQ6KLIpALyaKScAgAUvPJhiGgycooAXJABAJSZAL7ZkJCV1bW8iPxJAPKpZZz8QqQizE1lsgqUTa2QALzpwwDaALotTYmeQYJYYZQjO6ldPVUk-YNno+OTwqJzC43NbeuQw3tuHp4Rpccr1bj17kCnsdpq9IPN6ktPmsNn8DkDIAAff7+Q7BE7hc7bdJZbrdNB5UiWajyDCU1Z8aEzMq0FARd6UFo5bpWGx2SAAQQEQgAnhEUIKRWUrMgaaQ2gB+RzObGBPGnKXU2ltJpOFwHDUyrU5Togm41HoCFikMrYEKUDDypr5S3MNiogEpYlc3JiTjhCIYThsMoAAwAJBlbfb2g0Q5B5YqAOTshqJpRaJDINkIzmkqm8+ws5DG8Am0AQaBwTOQFCSeyUAAeVDEMy4PFo9AO6GwuAzFEkGED+nwpQZUxmxcrEjIx1OdUWWar9CsniK9AAttZ4JxvIZBz7pIJKSFCHoSqoHCfkOaDlFoDE4r2DkdQgSAiYm5RmJ5UFhmMKLg-ZsfxVQE-2FL1TT6Gs8SoSEJkZWF4UWZZNmYeR1ztARtnTFhPEbR1HAwrD0ywIUsGFQiVm+X59gBF98QeQCSVJHlbHsXVQIY9Ui2zRYInXLBeChcdRBaXNIBNbpQXNPBiGCeDnhhWY4RTZo0OIwQcJrb8CJ1TSBFI8jKOWL4UTonFuLfL08zYvlOOfNVwmZTM+MUCI5NpQQRJeZhxJLKCwRXNdIW9BDRJUiorGkJphnTNSAg0zCtNw3SG0I9DksMyRjKosyfhUPMWDIRA5AANQRJoAAUyOmOR0XpDJOm6d0cXRFjuWsdilT1AEXNZdkImCtBKB85TUpK8qcwkqTIHLLkYAAYVEQ8BFIX97BnV8NwBSATzQPQrU4BxmFKQTjHXAE726EAYmks1anJTCWAeMZwt8t5KqRGjWuSUZMm9OyOOVfV3uU-qs3Zfzuk6MtgDWVZEaR5GUdRtH0YxzHwGAeGAFEGywddeHCbH4cx8mKcprHYgpLh5FISo6R60CygyecPgARkkiTugiAZ+DKZkcB0fLtB0Nz6BgAAmAAGGWecgPn7kFzKQny1WIhKABlAp2DKaHSSVgWymdPzkUgU2ImQYmyDKAAiO2Dd5raKFGso0EYAR8o9siIh9gRlvw-lrXlhWPPk7zxmKTh8s4aPNc4HWXWDAAOJ3FeGt3eGi9M0FsL3zYAOQMqLKGkNoAGp0Hz9N5e9PmXWtO28-yTh1wAfSjDBHfr9kgA\">Try it on the TypeScript playground!\u003C/a>\u003C/p>\n\u003Ch3 id=\"define-class-via-enum-wip\">Define Class via Enum (WIP)\u003C/h3>\n\u003Cp>\u003Cstrong>NOTE\u003C/strong>: This has only been tested on TypeScript 5.4.5 and is still expiramental, see \u003Ca href=\"https://www.typescriptlang.org/play/?target=99&#x26;ts=5.5.0-beta#code/MYewdgziA2CmB0w4EMBOAKAlAKF72YArgLYAEAqhLKgMrAAWsxypA3tqZ6YVagJIATUgF5SAcj4A5ACoBRAOKyASqUkB5SavIAZbWIA0HLgDMAlqggAXScmKwR4uQA1pqjVt0GjnaMis27BzFnV3VNSR09QwBfXEsATwAHe1kiYgBhXwgIAB5pAD4Hdi5SMFgAd1J0eBq0AHMIAC5SZDB4gG0AXUxm6WxY7ATk0gB1VFNLWGQAIzg8wtFWUgBaVCmBcGh40naABVJTMFIAa1h4kGNSaU7evc7SaIBuPCGUtN3UEETcgqLvHdO20OJzOFyuN1KJGm1FIAB9SFZxmA6nDSNMQDApkd4QARZCTfq4MC2WAQRLIYD2TJ+CBsf6wAAeiRAqEspGMhDAwEspnApCQNIAYp9iKkSDlZPorvl0AQSHRGMxmrIeqQxRksj9CsUSlw1pZCKgjgLsnTdeb+eBEYRuSz0PUmmr3p9vhL8pg6f8Lbq4Gz6KYBAICDRLPjYMrnV9crIFqQ1NMAFawbnwGmmOpgdCsaJSh04L3ekwsqqgSBsxIu6gJA5HOXEBVMZAe9gFwu60tQODwaAgOroAAGQbMYEOKIrXyr2wAJKxx8lWfFov38222-Gkymh4dYB8Jwv0JZ-RApXPJ1KdavV3XqDM4M1LKhCLBDJfL6WzHVDbfw6QH0+X6+bblOMoazD+f7Pq2gFcHUsBsgAbsg0BPlgZrQZe+qGkc-qBsGoaTO0p4Lp0UHoTmpHQVQCFIShZQMpYABqNGwM2FHoZwOFBmAIZhoRlbEQ4dGMcxbGvrE7FcNEOBkaJ4kWtELS0hehZlJU9qoA0EYkLuroxqqfTenJnCxAMrykAA0mctKiICYKvGClDUA2zDYAA9K5XAAHoAPwvEk9jOcgABChwCKOfwlDw1CCM0aTQqg-xmBY1gks0iKjv8WQpXYaUPhlAwmrSjmoKQjKTGAAi0tS2SIJqwogKKaQ5PZlzFYFUqBSFFWjjKbUMI2rH-FRASwOgHLQNAI25UidSsd6HZsu0SX+CSUpZSN9yiONk0kvAZLQBM6AAESkEd0kWoepgQPAy3ZfYW3mCtdhQZd13rSSDjvc9JQmXg2ALaQxDxMVgkVBQvBZv8UX8AIzQAIwAEwAMwAZwt1TeI6QwIcXglF9P7BFM9CtLjXBlagyD3o+sD9PmQPFXtcEjcdQUgNMpBBTaxyTKgZ24B2mLdr26D07wmBAA\">here for example\u003C/a>.\u003C/p>\n\u003Cp>This allows us to define an enum which will auto-\u003Cem>magically\u003C/em> be created into a class definition, and then extended. This is great for a simple ORM with SQLite!\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// SPECIAL TYPES\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> EnumClass\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  new\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#FFAB70\">args\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> any\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[])\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> T\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> Writeable\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#F97583\">-readonly\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#B392F0\">P\u003C/span>\u003Cspan style=\"color:#F97583\"> in\u003C/span>\u003Cspan style=\"color:#F97583\"> keyof\u003C/span>\u003Cspan style=\"color:#B392F0\"> T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#B392F0\">P\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> EnumProps\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  [\u003C/span>\u003Cspan style=\"color:#B392F0\">key\u003C/span>\u003Cspan style=\"color:#F97583\"> in\u003C/span>\u003Cspan style=\"color:#F97583\"> keyof\u003C/span>\u003Cspan style=\"color:#B392F0\"> T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#79B8FF\"> boolean\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> Date\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// THE MAGIC\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">namespace\u003C/span>\u003Cspan style=\"color:#B392F0\"> Class\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  export\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> classFromEnum\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">E\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003Cspan style=\"color:#FFAB70\">enumSchema\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> E\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> EnumClass\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      constructor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">args\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> EnumProps\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">E\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> hiddenState\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> EnumProps\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">E\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Object.\u003C/span>\u003Cspan style=\"color:#B392F0\">assign\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({}, args)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> property\u003C/span>\u003Cspan style=\"color:#F97583\"> in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> enumSchema) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`defining property ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">property\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          Object.\u003C/span>\u003Cspan style=\"color:#B392F0\">defineProperty\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, property, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            enumerable: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            configurable: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            writable: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            get\u003C/span>\u003Cspan style=\"color:#B392F0\"> value\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">              return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> hiddenState[property]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            set\u003C/span>\u003Cspan style=\"color:#B392F0\"> value\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">nextValue\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">              hiddenState[property] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> nextValue\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    } \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      new\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">args\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> EnumProps\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">E\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> T\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// EXAMPLE UASGES\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">enum\u003C/span>\u003Cspan style=\"color:#B392F0\"> UserSchema\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  userId\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'INTEGER NON NULL'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  firstName\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'TEXT NON NULL'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  lastName\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'TEXT NON NULL'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> SchemaBinding\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  userId\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  firstName\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  lastName\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> User\u003C/span>\u003Cspan style=\"color:#F97583\"> extends\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Class.\u003C/span>\u003Cspan style=\"color:#B392F0\">classFromEnum\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#F97583\">typeof\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> UserSchema, \u003C/span>\u003Cspan style=\"color:#B392F0\">SchemaBinding\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  UserSchema\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  setName\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">fullName\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">firstName\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">lastName\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> fullName.\u003C/span>\u003Cspan style=\"color:#B392F0\">split\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">' '\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.firstName \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> firstName\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.lastName \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lastName\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> myUser\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> User\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  userId: \u003C/span>\u003Cspan style=\"color:#79B8FF\">123\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  firstName: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Bob'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  lastName: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Smitch'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  extra: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">})\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">myUser.\u003C/span>\u003Cspan style=\"color:#B392F0\">setName\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Colin Teahan'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(myUser.firstName) \u003C/span>\u003Cspan style=\"color:#6A737D\">// Colin\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Ca href=\"https://www.typescriptlang.org/play/?target=99&#x26;ts=5.5.0-beta#code/MYewdgziA2CmB0w4EMBOAKAlAKF72YArgLYAEAqhLKgMrAAWsxypA3tqZ6YVagJIATUgF5SAcj4A5ACoBRAOKyASqUkB5SavIAZbWIA0HLgDMAlqggAXScmKwR4uQA1pqjVt0GjnaMis27BzFnV3VNSR09QwBfXEsATwAHe1kiYgBhXwgIAB5pAD4Hdi5SMFgAd1J0eBq0AHMIAC5SZDB4gG0AXUxm6WxY7ATk0gB1VFNLWGQAIzg8wtFWUgBaVCmBcGh40naABVJTMFIAa1h4kGNSaU7evc7SaIBuPCGUtN3UEETcgqLvHdO20OJzOFyuN1KJGm1FIAB9SFZxmA6nDSNMQDApkd4QARZCTfq4MC2WAQRLIYD2TJ+CBsf6wAAeiRAqEspGMhDAwEspnApCQNIAYp9iKkSDlZPorvl0AQSHRGMxmrIeqQxRksj9CsUSlw1pZCKgjgLsnTdeb+eBEYRuSz0PUmmr3p9vhL8pg6f8Lbq4Gz6KYBAICDRLPjYMrnV9crIFqQ1NMAFawbnwGmmOpgdCsaJSh04L3ekwsqqgSBsxIu6gJA5HOXEBVMZAe9gFwu60tQODwaAgOroAAGQbMYEOKIrXyr2wAJKxx8lWfFov38222-Gkymh4dYB8Jwv0JZ-RApXPJ1KdavV3XqDM4M1LKhCLBDJfL6WzHVDbfw6QH0+X6+bblOMoazD+f7Pq2gFcHUsBsgAbsg0BPlgZrQZe+qGkc-qBsGoaTO0p4Lp0UHoTmpHQVQCFIShZQMpYABqNGwM2FHoZwOFBmAIZhoRlbEQ4dGMcxbGvrE7FcNEOBkaJ4kWtELS0hehZlJU9qoA0EYkLuroxqqfTenJnCxAMrykAA0mctKiICYKvGClDUA2zDYAA9K5XAAHoAPwvEk9jOcgABChwCKOfwlDw1CCM0aTQqg-xmBY1gks0iKjv8WQpXYaUPhlAwmrSjmoKQjKTGAAi0tS2SIJqwogKKaQ5PZlzFYFUqBSFFWjjKbUMI2rH-FRASwOgHLQNAI25UidSsd6HZsu0SX+CSUpZSN9yiONk0kvAZLQBM6AAESkEd0kWoepgQPAy3ZfYW3mCtdhQZd13rSSDjvc9JQmXg2ALaQxDxMVgkVBQvBZv8UX8AIzQAIwAEwAMwAZwt1TeI6QwIcXglF9P7BFM9CtLjXBlagyD3o+sD9PmQPFXtcEjcdQUgNMpBBTaxyTKgZ24B2mLdr26D07wmBAA\">Try it on the TypeScript Playground\u003C/a>\u003C/p>",{"headings":121,"localImagePaths":134,"remoteImagePaths":135,"frontmatter":136,"imagePaths":138},[122,125,128,131],{"depth":49,"slug":123,"text":124},"builder-pattern","Builder Pattern",{"depth":49,"slug":126,"text":127},"branded-types","Branded Types",{"depth":49,"slug":129,"text":130},"monad","Monad*",{"depth":49,"slug":132,"text":133},"define-class-via-enum-wip","Define Class via Enum (WIP)",[],[],{"title":111,"description":112,"pubDate":137,"heroImage":114,"slug":108},"May 14 2024",[],"markdown-style-guide",{"id":139,"data":141,"body":146,"filePath":147,"digest":148,"rendered":149},{"title":142,"description":143,"pubDate":144,"heroImage":145},"Markdown Style Guide","Here is a sample of some basic Markdown syntax that can be used when writing Markdown content in Astro.",["Date","2022-07-01T07:00:00.000Z"],"/images/blog-placeholder-1.jpg","Here is a sample of some basic Markdown syntax that can be used when writing Markdown content in Astro.\n\n## Headings\n\nThe following HTML `\u003Ch1>`—`\u003Ch6>` elements represent six levels of section headings. `\u003Ch1>` is the highest section level while `\u003Ch6>` is the lowest.\n\n# H1\n\n## H2\n\n### H3\n\n#### H4\n\n##### H5\n\n###### H6\n\n## Paragraph\n\nXerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\n\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\n\n## Images\n\n![This is a placeholder image description](/images/blog-placeholder-1.jpg)\n\n## Blockquotes\n\nThe blockquote element represents content that is quoted from another source, optionally with a citation which must be within a `footer` or `cite` element, and optionally with in-line changes such as annotations and abbreviations.\n\n#### Blockquote without attribution\n\n> Tiam, ad mint andaepu dandae nostion secatur sequo quae.  \n> **Note** that you can use _Markdown syntax_ within a blockquote.\n\n#### Blockquote with attribution\n\n> Don't communicate by sharing memory, share memory by communicating.\u003Cbr>\n> — \u003Ccite>Rob Pike[^1]\u003C/cite>\n\n[^1]: The above quote is excerpted from Rob Pike's [talk](https://www.youtube.com/watch?v=PAAkCSZUG1c) during Gopherfest, November 18, 2015.\n\n## Tables\n\n| Italics   | Bold     | Code   |\n| --------- | -------- | ------ |\n| _italics_ | **bold** | `code` |\n\n## Code Blocks\n\n```html\n\u003C!DOCTYPE html>\n\u003Chtml lang=\"en\">\n  \u003Chead>\n    \u003Cmeta charset=\"utf-8\" />\n    \u003Ctitle>Example HTML5 Document\u003C/title>\n  \u003C/head>\n  \u003Cbody>\n    \u003Cp>Test\u003C/p>\n  \u003C/body>\n\u003C/html>\n```\n\n## List Types\n\n#### Ordered List\n\n1. First item\n2. Second item\n3. Third item\n\n#### Unordered List\n\n- List item\n- Another item\n- And another item\n\n#### Nested list\n\n- Fruit\n  - Apple\n  - Orange\n  - Banana\n- Dairy\n  - Milk\n  - Cheese\n\n## Other Elements — abbr, sub, sup, kbd, mark\n\n\u003Cabbr title=\"Graphics Interchange Format\">GIF\u003C/abbr> is a bitmap image format.\n\nH\u003Csub>2\u003C/sub>O\n\nX\u003Csup>n\u003C/sup> + Y\u003Csup>n\u003C/sup> = Z\u003Csup>n\u003C/sup>\n\nPress \u003Ckbd>\u003Ckbd>CTRL\u003C/kbd>+\u003Ckbd>ALT\u003C/kbd>+\u003Ckbd>Delete\u003C/kbd>\u003C/kbd> to end the session.\n\nMost \u003Cmark>salamanders\u003C/mark> are nocturnal, and hunt for insects, worms, and other small creatures.","src/content/blog/markdown-style-guide.md","1ca94047b686d362",{"html":150,"metadata":151},"\u003Cp>Here is a sample of some basic Markdown syntax that can be used when writing Markdown content in Astro.\u003C/p>\n\u003Ch2 id=\"headings\">Headings\u003C/h2>\n\u003Cp>The following HTML \u003Ccode>&#x3C;h1>\u003C/code>—\u003Ccode>&#x3C;h6>\u003C/code> elements represent six levels of section headings. \u003Ccode>&#x3C;h1>\u003C/code> is the highest section level while \u003Ccode>&#x3C;h6>\u003C/code> is the lowest.\u003C/p>\n\u003Ch1 id=\"h1\">H1\u003C/h1>\n\u003Ch2 id=\"h2\">H2\u003C/h2>\n\u003Ch3 id=\"h3\">H3\u003C/h3>\n\u003Ch4 id=\"h4\">H4\u003C/h4>\n\u003Ch5 id=\"h5\">H5\u003C/h5>\n\u003Ch6 id=\"h6\">H6\u003C/h6>\n\u003Ch2 id=\"paragraph\">Paragraph\u003C/h2>\n\u003Cp>Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\u003C/p>\n\u003Cp>Itatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\u003C/p>\n\u003Ch2 id=\"images\">Images\u003C/h2>\n\u003Cp>\u003Cimg src=\"/images/blog-placeholder-1.jpg\" alt=\"This is a placeholder image description\">\u003C/p>\n\u003Ch2 id=\"blockquotes\">Blockquotes\u003C/h2>\n\u003Cp>The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a \u003Ccode>footer\u003C/code> or \u003Ccode>cite\u003C/code> element, and optionally with in-line changes such as annotations and abbreviations.\u003C/p>\n\u003Ch4 id=\"blockquote-without-attribution\">Blockquote without attribution\u003C/h4>\n\u003Cblockquote>\n\u003Cp>Tiam, ad mint andaepu dandae nostion secatur sequo quae.\u003Cbr>\n\u003Cstrong>Note\u003C/strong> that you can use \u003Cem>Markdown syntax\u003C/em> within a blockquote.\u003C/p>\n\u003C/blockquote>\n\u003Ch4 id=\"blockquote-with-attribution\">Blockquote with attribution\u003C/h4>\n\u003Cblockquote>\n\u003Cp>Don’t communicate by sharing memory, share memory by communicating.\u003Cbr>\n— \u003Ccite>Rob Pike\u003Csup>\u003Ca href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">1\u003C/a>\u003C/sup>\u003C/cite>\u003C/p>\n\u003C/blockquote>\n\u003Ch2 id=\"tables\">Tables\u003C/h2>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Italics\u003C/th>\u003Cth>Bold\u003C/th>\u003Cth>Code\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>\u003Cem>italics\u003C/em>\u003C/td>\u003Ctd>\u003Cstrong>bold\u003C/strong>\u003C/td>\u003Ctd>\u003Ccode>code\u003C/code>\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Ch2 id=\"code-blocks\">Code Blocks\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;!\u003C/span>\u003Cspan style=\"color:#85E89D\">DOCTYPE\u003C/span>\u003Cspan style=\"color:#B392F0\"> html\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">html\u003C/span>\u003Cspan style=\"color:#B392F0\"> lang\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"en\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">head\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">meta\u003C/span>\u003Cspan style=\"color:#B392F0\"> charset\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"utf-8\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">title\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>Example HTML5 Document&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">title\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">head\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">body\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">p\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>Test&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">p\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">body\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">html\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"list-types\">List Types\u003C/h2>\n\u003Ch4 id=\"ordered-list\">Ordered List\u003C/h4>\n\u003Col>\n\u003Cli>First item\u003C/li>\n\u003Cli>Second item\u003C/li>\n\u003Cli>Third item\u003C/li>\n\u003C/ol>\n\u003Ch4 id=\"unordered-list\">Unordered List\u003C/h4>\n\u003Cul>\n\u003Cli>List item\u003C/li>\n\u003Cli>Another item\u003C/li>\n\u003Cli>And another item\u003C/li>\n\u003C/ul>\n\u003Ch4 id=\"nested-list\">Nested list\u003C/h4>\n\u003Cul>\n\u003Cli>Fruit\n\u003Cul>\n\u003Cli>Apple\u003C/li>\n\u003Cli>Orange\u003C/li>\n\u003Cli>Banana\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Dairy\n\u003Cul>\n\u003Cli>Milk\u003C/li>\n\u003Cli>Cheese\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"other-elements--abbr-sub-sup-kbd-mark\">Other Elements — abbr, sub, sup, kbd, mark\u003C/h2>\n\u003Cp>\u003Cabbr title=\"Graphics Interchange Format\">GIF\u003C/abbr> is a bitmap image format.\u003C/p>\n\u003Cp>H\u003Csub>2\u003C/sub>O\u003C/p>\n\u003Cp>X\u003Csup>n\u003C/sup> + Y\u003Csup>n\u003C/sup> = Z\u003Csup>n\u003C/sup>\u003C/p>\n\u003Cp>Press \u003Ckbd>\u003Ckbd>CTRL\u003C/kbd>+\u003Ckbd>ALT\u003C/kbd>+\u003Ckbd>Delete\u003C/kbd>\u003C/kbd> to end the session.\u003C/p>\n\u003Cp>Most \u003Cmark>salamanders\u003C/mark> are nocturnal, and hunt for insects, worms, and other small creatures.\u003C/p>\n\u003Csection data-footnotes=\"\" class=\"footnotes\">\u003Ch2 class=\"sr-only\" id=\"footnote-label\">Footnotes\u003C/h2>\n\u003Col>\n\u003Cli id=\"user-content-fn-1\">\n\u003Cp>The above quote is excerpted from Rob Pike’s \u003Ca href=\"https://www.youtube.com/watch?v=PAAkCSZUG1c\">talk\u003C/a> during Gopherfest, November 18, 2015. \u003Ca href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003C/section>",{"headings":152,"localImagePaths":217,"remoteImagePaths":218,"frontmatter":219,"imagePaths":221},[153,156,160,163,166,170,174,178,181,184,187,190,193,196,199,202,205,208,211,214],{"depth":26,"slug":154,"text":155},"headings","Headings",{"depth":157,"slug":158,"text":159},1,"h1","H1",{"depth":26,"slug":161,"text":162},"h2","H2",{"depth":49,"slug":164,"text":165},"h3","H3",{"depth":167,"slug":168,"text":169},4,"h4","H4",{"depth":171,"slug":172,"text":173},5,"h5","H5",{"depth":175,"slug":176,"text":177},6,"h6","H6",{"depth":26,"slug":179,"text":180},"paragraph","Paragraph",{"depth":26,"slug":182,"text":183},"images","Images",{"depth":26,"slug":185,"text":186},"blockquotes","Blockquotes",{"depth":167,"slug":188,"text":189},"blockquote-without-attribution","Blockquote without attribution",{"depth":167,"slug":191,"text":192},"blockquote-with-attribution","Blockquote with attribution",{"depth":26,"slug":194,"text":195},"tables","Tables",{"depth":26,"slug":197,"text":198},"code-blocks","Code Blocks",{"depth":26,"slug":200,"text":201},"list-types","List Types",{"depth":167,"slug":203,"text":204},"ordered-list","Ordered List",{"depth":167,"slug":206,"text":207},"unordered-list","Unordered List",{"depth":167,"slug":209,"text":210},"nested-list","Nested list",{"depth":26,"slug":212,"text":213},"other-elements--abbr-sub-sup-kbd-mark","Other Elements — abbr, sub, sup, kbd, mark",{"depth":26,"slug":215,"text":216},"footnote-label","Footnotes",[],[],{"title":142,"description":143,"pubDate":220,"heroImage":145,"slug":139},"Jul 01 2022",[],"typescript-range-without-a-loop",{"id":222,"data":224,"body":229,"filePath":230,"digest":231,"rendered":232},{"title":225,"description":226,"pubDate":227,"heroImage":228},"Implement a range in TypeScript without loops*","How to implement a range sequence using generators in TypeScript for fun!",["Date","2024-02-13T08:00:00.000Z"],"/images/generator-cover.png","The other day I was browsing **LinkedIn** and came across the following [post](https://www.linkedin.com/feed/update/urn:li:activity:7163364024087220224?utm_source=share&utm_medium=member_desktop)\n\n> 👌 A common coding question in Javascript interviews: Write a function that implements range WITHOUT using loops?\n\nUnable to resist the urge to write some needlessly complex and over-engineered code, I began weighing my options. Initially, my mind went to recursion. Then to recursion, then to recursion...\n\n```ts\nfunction range(a: number, b: number): number[] {\n  return a \u003C b ? [a, ...range(a + 1, b)] : [b]\n}\n```\n\n[Try it on the TypeScript playground!](https://www.typescriptlang.org/play?module=1#code/GYVwdgxgLglg9mABAJwIZgOYFMAUqBciYIAtgEZbIA0iZhx5lAlPaRcgNoC6iA3gFCIUWKCGRJUiADy1EAfkQdUNAHRq0mXJIDUiAIw0yTHoQ5ku-AL79+AeluIsAD1QkADgBssiEAGdU2PwQCL5wXioecBg4Gtg4BvoADExMQA)\n\nHowever, this was widely **boring** and **severely unambitious**; No, what I needed was something with a bit more _spice_...\n\n## Generator Experiments\n\nThen it hit me! Let's use that thing I always want to use, but literally can never find a good enough reason. That's right, the good 'ol **[Generator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator)**.\n\n> The Generator object is returned by a generator function and it conforms to both the iterable protocol and the iterator protocol.\n> Generator is a subclass of the hidden Iterator class. [Source](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator)\n\nIt had been a while since I last touched these pointy starred wonders, and so I got to experimenting to refresh my memory.\n\n```ts\nfunction* range() {\n  yield 1\n  yield 2\n  yield 3\n  yield 4\n  yield 5\n}\n\nconsole.log(...range()) // 1, 2, 3, 4, 5\n```\n\nBut, then it dawned on me that I normally use a **loop** inside a generator! The solution would have to bring back our old friend recursion, recursion, recursion!\n\n```ts\nfunction* range(a: number, b: number) {\n  if (a > b) return\n  yield a\n  yield* range(a + 1, b)\n}\n```\n\nHmmm.... the code was working, but TypeScript wasn't pleased. A few prayers to the **TypeGod's** and a couple \u003Cstrike>minutes\u003C/strike> hours later I had finished at last, and was eagerly awaiting to dunk on the **LinkedIn** n00bs!\n\n```ts\ntype RangeIterator = Generator\u003Cnumber, void, undefined>\n\nfunction* range(a: number, b: number): RangeIterator {\n  if (a > b) return\n  yield a\n  yield* range(a + 1, b)\n}\n\nconsole.log(...range(1, 5)) // 1, 2, 3, 4, 5\n```\n\n[Try it on the TypeScript playground!](https://www.typescriptlang.org/play?module=1&ssl=10&ssc=29&pln=2&pc=1#code/FAFwngDgpgBASgQwHYHMoEkRQE4JAe2xgF4YBxKJHPQgHiQFcBbAIxwBoYA3fASwBNODJPygAzXlX4A+YMDHCAxiF74kAKhi5UUABQIAXDEasOMFkZNtsASiOIdmagSIBvYDBi8xMfTGnmNlpQIAzYSB4wYLxQADb8MAiR0XH8mtpougDUWQicLDbAAL5yimoAzvixUAB0sfgoujXNGXoAjJxtAAw2NkA)\n\n## How it works?\n\nWhile the above code may look foreign to the unsuspecting LinkedIn denizen, it actually isn't all that complicated. The key takeaway here is how we can abuse the spread `...` operator to _spread_ them cheeks.\n\nLet's take a look at the execution flow starting from `console.log(...range(1, 5))`\n\n```ts\n\nrange(1, 5) // Step 1: called (move inside context)\n\nif (a > b) return      // (1 > 5) is false so we continue\nyield a                // pause execution, return (1) to the caller, then resume\nyield* range(a + 1, b) // pause execution, return iteration from range(2, 5), then resume\n\nrange(2, 5) // Step 2: called (move inside context)\n\nif (a > b) return      // (2 > 5) is false so we continue\nyield a                // pause execution, return (2) to the caller, then resume\nyield* range(a + 1, b) // pause execution, return iteration from range(3, 5), then resume\n\nrange(3, 5) // Step 3: called (move inside context)\n\nif (a > b) return      // (3 > 5) is false so we continue\nyield a                // pause execution, return (3) to the caller, then resume\nyield* range(a + 1, b) // pause execution, return iteration from range(4, 5), then resume\n\nrange(4, 5) // Step 4: called (move inside context)\n\nif (a > b) return      // (4 > 5) is false so we continue\nyield a                // pause execution, return (4) to the caller, then resume\nyield* range(a + 1, b) // pause execution, return iteration from range(5, 5), then resume\n\nrange(5, 5) // Step 5: called (move inside context)\n\nif (a > b) return      // (5 > 5) is false so we continue\nyield a                // pause execution, return (5) to the caller, then resume\nyield* range(a + 1, b) // pause execution, return iteration from range(6, 5), then resume\n\nrange(6, 5) // Step 6: called (move inside context)\n\nif (a > b) return      // (6 > 5) is true so we return which ends the iterator\n\n// Moving backwards through the call stack we get\n//\n// [1, [2, [3, [4, [5]]]]]\n// [1, [2, [3, [4, 5]]]]\n// [1, [2, [3, 4, 5]]]\n// [1, [2, 3, 4, 5]]\n// [1, 2, 3, 4, 5]\n\n// Which more or less simplifies to the following expression, note the\n// star (*) operator is used to spread the values from the iterator,\n// just omitting here the the sake of brevity\n\nfunction* range(1, 5) {\n  yield (((((yield 1), yield 2), yield 3), yield 4), yield 5)\n}\n\n// Then back in Step 1: context\n\nyield* [1, 2, 3, 4, 5]\n\n// Which returns 1, 2, 3, 4, 5 to the caller (...)\n\nconsole.log(...[1, 2, 3, 4, 5])\n\n// 1, 2, 3, 4, 5\n```\n\n0. We call `range(1, 5)` which creates our iterator\n1. The `...` operator does the dirty work of iterating\n2. The iterator will continue until `return` has been called\n3. The first pass `a = 1` and `b = 5`\n   - Since `a > b` is `false` we continue\n   - Next we `yield a` which is `1` to the output\n   - Next we `yield*` which returns another generator (step #4)\n4. The second pass `a = 2` and `b = 5`\n   - Since `a > b` is `false` we continue\n   - Next we `yield a` which is `2` to the output\n   - Next we `yield*` which returns another generator ()\n5. This continues until `a > b` and `return`\n6. This tells the iterator we are done!\n7. Leaving us with `1, 2, 3, 4, 5`\n\nOr an even more simplified way to think about this\n\n- `yield` pauses / resumes the iterator and returns a value to the caller\n- `yield*` delegate to another iterable object, such as a Generator.\n- `return` tells the iterator we are done\n\n## Final thoughts\n\nWhile this code would most certainly be rejected on any production pull request, it was a fun example of leveraging some seldom used parts [TypeScript](https://www.typescriptlang.org/) which are quite cool, _and this is just the surface_!\n\nThe way I like to think about generators is that they are functions with state, which can pause /resume execution and even have values passed back-in from the caller. They are used quite heavily in libraries like `react-redux` and also have support for `async` via the `AsyncGenerator`. You can learn more about them here or feel free to ask me any questions!\n\n- [Mozilla Docs: Generator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator)\n- [Mozilla Docs: AsyncGenerator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator)\n- [Mozilla Docs: Spread Syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax)\n- [Mozilla Docs: Yield](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield)\n- [Mozilla Docs: Yield\\*](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield*)\n\n## That's cool, but can you?\n\nMy original post succeeded in stirring up quite the controversy from folks all across the software engineering spectrum, and one comment caught my attention in particular:\n\n> Everything uses a loop under the hood, unless it's using tensors.\n>\n> \u003Cdiv style=\"text-align: right\">— Some AI Engineer\u003C/div>\n\nWhile this is probably unavoidable to some degree, one thing that still bothered me was that the iterator solution was not all that much different from the original recursive solution. What if we change the problem slightly to include the following:\n\n\u003Ch3 style=\"text-align: center\">Implement a range WITHOUT using loops or recursion.\u003C/h3>\n\nNow things are getting interesting! Just to add a little more context, the comment section had already ruled out using the usual higher order functional such as `.forEach`, `.map`, `.filter`, `.reduce`, etc.\n\n```ts\nArray.from({ length: finish - start + 1 }, (_, i) => start + i + 1)\n\n// or\n\n[...Array(finish - start + 1)].map((_, i) => start + i)]\n```\n\nWhile these are short and concise solutions, they are still using loops under the hood. So, I decided to take it a step further and see if I could implement a solution without using loops or recursion.\n\n\u003Cimg src=\"/images/ah-shit-here-we-go-again.gif\" style=\"box-shadow: 0px 1px 5px rgba(0,0,0,0.1);\" alt=\"Ah shit here we go again...\" width=\"100%\" />\n\n\u003Cbr>\n\u003Cbr>\n\n## YCombinator + Generators\n\nSome of you may be familiar with the name **YCombinator** as it is indeed the same as the venture capital firm, but did you know that it also has a deeper meaning?\n\nThe **YCombinator** is a higher-order function which allows you to write recursive functions without using recursion. It is a concept from the field of computer science and is often used in functional programming languages.\n\nEquipped with this we now have everything we need to implement a solution without loops or recursion! Feast your eyes...\n\n```ts\ntype Y = (next: Y) => (x: number, y: number) => Generator\n\nfunction YCombinator(f: Y) {\n  return ((g: Y) => g(g))((g: Y) =>\n    f(() => (x: number, y: number) => g(g)(x, y))\n  )\n}\n\nconst range = YCombinator(\n  (next: Y) =>\n    function* (x: number, y: number) {\n      if (x > y) return\n      yield x\n      yield* next(next)(x + 1, y)\n    }\n)\n\nconsole.log(...range(3, 9)) // 3, 4, 5, 6, 7, 8, 9\n```\n\n[Try it on the TypeScript playground!](https://www.typescriptlang.org/play?module=1&ssl=14&ssc=29&pln=1&pc=1#code/C4TwDgpgBAmlC8UAUA7CAPYAuWBKBAfMujigK4C2ARhAE4A0UIplNt+8RA4hGrQIbAA9rQBQogGZkUAY2ABLISlgBhIdXkpBIpBJwx8Ab1FRTUWhGBlaypEgDm+jkXsPcuO47yEoEu8+IWajpGZihyYPYfV3sPdFD3XFEAX3EZJQBnYHN+FHtoRBg1DS1hWjs0TCcfKVkFJQAqQPDWEKYgtiMTM3kJYigiEHwLKxtu0xB5CAAbABModHGmKbmmyuBUDGA4qABqKABGBJSktMyhaYgAOmmhVyuHgTyIJAB2RgAmA-dRIA)\n\nIf you want to lean more about the **YCombinator** I recommend checking out the following [blog post](https://lucasfcosta.com/2018/05/20/Y-The-Most-Beautiful-Idea-in-Computer-Science.html) which does an excellent job of breaking it down and explaining it step by step!\n\n## Happily ever after?\n\nAs you can imagine I was riding pretty high after writing potentially the most needlessly complex and over-engineered code to dunk on Jr. devs on LinkedIn when the unthinkable happened...\n\n\u003Cimg src=\"/images/challenger.jpeg\" style=\"box-shadow: 0px 1px 5px rgba(0,0,0,0.1);\" alt=\"A new challenger approaches\" width=\"100%\" />\n\n> Interesting approach. \u003Cbr>\n> Unfortunately, you can easily encounter: \u003Cbr> > [ERR]: Maximum call stack size exceeded \u003Cbr>\n> Be careful with recursion in Javascript. \u003Cbr>\n>\n> \u003Cdiv style=\"text-align: right\">— Principal Software Engineer at Microsoft\u003C/div>\n\nAnd just like that my reality was shattered.\n\nAll the new found joy of working through the mind-boggling intricacies of implementing the Y-Combinator for the first time quickly evaporated. Someone had come along a blew the stack off my code by creating a range over **9,000**. At this moment I remembered the wise words once told to me long ago\n\n_\"For thou who hath not been dunked on, let him cast the first lineth of code\"_\n~ Ancient Proverbs\n\n## The Correct Way?\n\nThe Microsoft engineer then proceeded to drop this magnificent specimen of code, which could not only easily handle **9,000**+ iterations, but relied solely on the built-in mechanics of iterables.\n\n\u003Cimg src=\"/images/iterator-solution.png\" style=\"box-shadow: 0px 1px 5px rgba(0,0,0,0.1);\" alt=\"The correct way.\" width=\"100%\" />\n\n> In Javascript, an Iterable can be ...spread or used in a for loop. It implements a method named by Symbol.iterator, returning an Iterator. Iterator implements a method next, returning an object containing a value property and a done property, used to control the loop.\n> \u003Ccite>[Jaime Leonardo Pinheiro](https://www.linkedin.com/in/ACoAABFt5Z0BH8hw7mI-T2JCW2Gw-BoOePePUdg?lipi=urn%3Ali%3Apage%3Ad_flagship3_detail_base%3BUZ%2FiBARFQzKowiXCf9skRw%3D%3D)\u003C/cite>\n\nIt just goes to show there's always someone out there who knows more than you, and that's okay! It's all part of the learning process. I'm grateful for the opportunity to learn from others and to be able to share my own knowledge with the community.\n\n## Notable Mentions?\n\n```ts\n// the changes are slim, but not zero...\nconst sequence = String(Math.random())\nconst regex = new RegExp(`^(?=\\d{4}$)0?1?2?3?4?5?6?7?8?9?`)\nsequence.match()\n```\n\n\u003Cimg src=\"https://media2.giphy.com/media/v1.Y2lkPTc5MGI3NjExOWdwMGZ1d2I4bWs2Zmgxb2VqMXR2OWQ3bjJ6aXc4M3B1a2w3czc3NCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/BPJmthQ3YRwD6QqcVD/giphy.gif\" style=\"box-shadow: 0px 1px 5px rgba(0,0,0,0.1);\" alt=\"Generator Cheers\" width=\"100%\" />\n\n\u003Ch2 style=\"text-align: center; margin-top: 16px\">Happy coding!\u003C/h2>\n\u003Ch4 style=\"text-align: center;\">~Colin Teahan\u003C/h4>","src/content/blog/typescript-range-without-a-loop.md","9bdcc1528109364e",{"html":233,"metadata":234},"\u003Cp>The other day I was browsing \u003Cstrong>LinkedIn\u003C/strong> and came across the following \u003Ca href=\"https://www.linkedin.com/feed/update/urn:li:activity:7163364024087220224?utm_source=share&#x26;utm_medium=member_desktop\">post\u003C/a>\u003C/p>\n\u003Cblockquote>\n\u003Cp>👌 A common coding question in Javascript interviews: Write a function that implements range WITHOUT using loops?\u003C/p>\n\u003C/blockquote>\n\u003Cp>Unable to resist the urge to write some needlessly complex and over-engineered code, I began weighing my options. Initially, my mind went to recursion. Then to recursion, then to recursion…\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> range\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">a\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">b\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[] {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> a \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> b \u003C/span>\u003Cspan style=\"color:#F97583\">?\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [a, \u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#B392F0\">range\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(a \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, b)] \u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [b]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Ca href=\"https://www.typescriptlang.org/play?module=1#code/GYVwdgxgLglg9mABAJwIZgOYFMAUqBciYIAtgEZbIA0iZhx5lAlPaRcgNoC6iA3gFCIUWKCGRJUiADy1EAfkQdUNAHRq0mXJIDUiAIw0yTHoQ5ku-AL79+AeluIsAD1QkADgBssiEAGdU2PwQCL5wXioecBg4Gtg4BvoADExMQA\">Try it on the TypeScript playground!\u003C/a>\u003C/p>\n\u003Cp>However, this was widely \u003Cstrong>boring\u003C/strong> and \u003Cstrong>severely unambitious\u003C/strong>; No, what I needed was something with a bit more \u003Cem>spice\u003C/em>…\u003C/p>\n\u003Ch2 id=\"generator-experiments\">Generator Experiments\u003C/h2>\n\u003Cp>Then it hit me! Let’s use that thing I always want to use, but literally can never find a good enough reason. That’s right, the good ‘ol \u003Cstrong>\u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator\">Generator\u003C/a>\u003C/strong>.\u003C/p>\n\u003Cblockquote>\n\u003Cp>The Generator object is returned by a generator function and it conforms to both the iterable protocol and the iterator protocol.\nGenerator is a subclass of the hidden Iterator class. \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator\">Source\u003C/a>\u003C/p>\n\u003C/blockquote>\n\u003Cp>It had been a while since I last touched these pointy starred wonders, and so I got to experimenting to refresh my memory.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function*\u003C/span>\u003Cspan style=\"color:#B392F0\"> range\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  yield\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  yield\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  yield\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 3\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  yield\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 4\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  yield\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 5\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#B392F0\">range\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()) \u003C/span>\u003Cspan style=\"color:#6A737D\">// 1, 2, 3, 4, 5\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>But, then it dawned on me that I normally use a \u003Cstrong>loop\u003C/strong> inside a generator! The solution would have to bring back our old friend recursion, recursion, recursion!\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function*\u003C/span>\u003Cspan style=\"color:#B392F0\"> range\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">a\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">b\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (a \u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> b) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  yield\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> a\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  yield*\u003C/span>\u003Cspan style=\"color:#B392F0\"> range\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(a \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, b)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Hmmm… the code was working, but TypeScript wasn’t pleased. A few prayers to the \u003Cstrong>TypeGod’s\u003C/strong> and a couple \u003Cstrike>minutes\u003C/strike> hours later I had finished at last, and was eagerly awaiting to dunk on the \u003Cstrong>LinkedIn\u003C/strong> n00bs!\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> RangeIterator\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> Generator\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">void\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">undefined\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function*\u003C/span>\u003Cspan style=\"color:#B392F0\"> range\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">a\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">b\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> RangeIterator\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (a \u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> b) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  yield\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> a\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  yield*\u003C/span>\u003Cspan style=\"color:#B392F0\"> range\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(a \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, b)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#B392F0\">range\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)) \u003C/span>\u003Cspan style=\"color:#6A737D\">// 1, 2, 3, 4, 5\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Ca href=\"https://www.typescriptlang.org/play?module=1&#x26;ssl=10&#x26;ssc=29&#x26;pln=2&#x26;pc=1#code/FAFwngDgpgBASgQwHYHMoEkRQE4JAe2xgF4YBxKJHPQgHiQFcBbAIxwBoYA3fASwBNODJPygAzXlX4A+YMDHCAxiF74kAKhi5UUABQIAXDEasOMFkZNtsASiOIdmagSIBvYDBi8xMfTGnmNlpQIAzYSB4wYLxQADb8MAiR0XH8mtpougDUWQicLDbAAL5yimoAzvixUAB0sfgoujXNGXoAjJxtAAw2NkA\">Try it on the TypeScript playground!\u003C/a>\u003C/p>\n\u003Ch2 id=\"how-it-works\">How it works?\u003C/h2>\n\u003Cp>While the above code may look foreign to the unsuspecting LinkedIn denizen, it actually isn’t all that complicated. The key takeaway here is how we can abuse the spread \u003Ccode>...\u003C/code> operator to \u003Cem>spread\u003C/em> them cheeks.\u003C/p>\n\u003Cp>Let’s take a look at the execution flow starting from \u003Ccode>console.log(...range(1, 5))\u003C/code>\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">range\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#6A737D\">// Step 1: called (move inside context)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (a \u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> b) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#6A737D\">      // (1 > 5) is false so we continue\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">yield\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> a                \u003C/span>\u003Cspan style=\"color:#6A737D\">// pause execution, return (1) to the caller, then resume\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">yield*\u003C/span>\u003Cspan style=\"color:#B392F0\"> range\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(a \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, b) \u003C/span>\u003Cspan style=\"color:#6A737D\">// pause execution, return iteration from range(2, 5), then resume\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">range\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#6A737D\">// Step 2: called (move inside context)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (a \u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> b) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#6A737D\">      // (2 > 5) is false so we continue\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">yield\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> a                \u003C/span>\u003Cspan style=\"color:#6A737D\">// pause execution, return (2) to the caller, then resume\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">yield*\u003C/span>\u003Cspan style=\"color:#B392F0\"> range\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(a \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, b) \u003C/span>\u003Cspan style=\"color:#6A737D\">// pause execution, return iteration from range(3, 5), then resume\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">range\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#6A737D\">// Step 3: called (move inside context)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (a \u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> b) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#6A737D\">      // (3 > 5) is false so we continue\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">yield\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> a                \u003C/span>\u003Cspan style=\"color:#6A737D\">// pause execution, return (3) to the caller, then resume\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">yield*\u003C/span>\u003Cspan style=\"color:#B392F0\"> range\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(a \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, b) \u003C/span>\u003Cspan style=\"color:#6A737D\">// pause execution, return iteration from range(4, 5), then resume\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">range\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#6A737D\">// Step 4: called (move inside context)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (a \u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> b) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#6A737D\">      // (4 > 5) is false so we continue\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">yield\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> a                \u003C/span>\u003Cspan style=\"color:#6A737D\">// pause execution, return (4) to the caller, then resume\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">yield*\u003C/span>\u003Cspan style=\"color:#B392F0\"> range\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(a \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, b) \u003C/span>\u003Cspan style=\"color:#6A737D\">// pause execution, return iteration from range(5, 5), then resume\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">range\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#6A737D\">// Step 5: called (move inside context)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (a \u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> b) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#6A737D\">      // (5 > 5) is false so we continue\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">yield\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> a                \u003C/span>\u003Cspan style=\"color:#6A737D\">// pause execution, return (5) to the caller, then resume\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">yield*\u003C/span>\u003Cspan style=\"color:#B392F0\"> range\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(a \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, b) \u003C/span>\u003Cspan style=\"color:#6A737D\">// pause execution, return iteration from range(6, 5), then resume\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">range\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">6\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#6A737D\">// Step 6: called (move inside context)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (a \u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> b) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#6A737D\">      // (6 > 5) is true so we return which ends the iterator\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Moving backwards through the call stack we get\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">//\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// [1, [2, [3, [4, [5]]]]]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// [1, [2, [3, [4, 5]]]]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// [1, [2, [3, 4, 5]]]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// [1, [2, 3, 4, 5]]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// [1, 2, 3, 4, 5]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Which more or less simplifies to the following expression, note the\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// star (*) operator is used to spread the values from the iterator,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// just omitting here the the sake of brevity\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function*\u003C/span>\u003Cspan style=\"color:#B392F0\"> range\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(1, 5) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  yield\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (((((\u003C/span>\u003Cspan style=\"color:#F97583\">yield\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">), \u003C/span>\u003Cspan style=\"color:#F97583\">yield\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">), \u003C/span>\u003Cspan style=\"color:#F97583\">yield\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">), \u003C/span>\u003Cspan style=\"color:#F97583\">yield\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">), \u003C/span>\u003Cspan style=\"color:#F97583\">yield\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Then back in Step 1: context\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">yield*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Which returns 1, 2, 3, 4, 5 to the caller (...)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">])\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// 1, 2, 3, 4, 5\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Col start=\"0\">\n\u003Cli>We call \u003Ccode>range(1, 5)\u003C/code> which creates our iterator\u003C/li>\n\u003Cli>The \u003Ccode>...\u003C/code> operator does the dirty work of iterating\u003C/li>\n\u003Cli>The iterator will continue until \u003Ccode>return\u003C/code> has been called\u003C/li>\n\u003Cli>The first pass \u003Ccode>a = 1\u003C/code> and \u003Ccode>b = 5\u003C/code>\n\u003Cul>\n\u003Cli>Since \u003Ccode>a > b\u003C/code> is \u003Ccode>false\u003C/code> we continue\u003C/li>\n\u003Cli>Next we \u003Ccode>yield a\u003C/code> which is \u003Ccode>1\u003C/code> to the output\u003C/li>\n\u003Cli>Next we \u003Ccode>yield*\u003C/code> which returns another generator (step #4)\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>The second pass \u003Ccode>a = 2\u003C/code> and \u003Ccode>b = 5\u003C/code>\n\u003Cul>\n\u003Cli>Since \u003Ccode>a > b\u003C/code> is \u003Ccode>false\u003C/code> we continue\u003C/li>\n\u003Cli>Next we \u003Ccode>yield a\u003C/code> which is \u003Ccode>2\u003C/code> to the output\u003C/li>\n\u003Cli>Next we \u003Ccode>yield*\u003C/code> which returns another generator ()\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>This continues until \u003Ccode>a > b\u003C/code> and \u003Ccode>return\u003C/code>\u003C/li>\n\u003Cli>This tells the iterator we are done!\u003C/li>\n\u003Cli>Leaving us with \u003Ccode>1, 2, 3, 4, 5\u003C/code>\u003C/li>\n\u003C/ol>\n\u003Cp>Or an even more simplified way to think about this\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>yield\u003C/code> pauses / resumes the iterator and returns a value to the caller\u003C/li>\n\u003Cli>\u003Ccode>yield*\u003C/code> delegate to another iterable object, such as a Generator.\u003C/li>\n\u003Cli>\u003Ccode>return\u003C/code> tells the iterator we are done\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"final-thoughts\">Final thoughts\u003C/h2>\n\u003Cp>While this code would most certainly be rejected on any production pull request, it was a fun example of leveraging some seldom used parts \u003Ca href=\"https://www.typescriptlang.org/\">TypeScript\u003C/a> which are quite cool, \u003Cem>and this is just the surface\u003C/em>!\u003C/p>\n\u003Cp>The way I like to think about generators is that they are functions with state, which can pause /resume execution and even have values passed back-in from the caller. They are used quite heavily in libraries like \u003Ccode>react-redux\u003C/code> and also have support for \u003Ccode>async\u003C/code> via the \u003Ccode>AsyncGenerator\u003C/code>. You can learn more about them here or feel free to ask me any questions!\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator\">Mozilla Docs: Generator\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\">Mozilla Docs: AsyncGenerator\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Mozilla Docs: Spread Syntax\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield\">Mozilla Docs: Yield\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield*\">Mozilla Docs: Yield*\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"thats-cool-but-can-you\">That’s cool, but can you?\u003C/h2>\n\u003Cp>My original post succeeded in stirring up quite the controversy from folks all across the software engineering spectrum, and one comment caught my attention in particular:\u003C/p>\n\u003Cblockquote>\n\u003Cp>Everything uses a loop under the hood, unless it’s using tensors.\u003C/p>\n\u003Cdiv style=\"text-align: right\">— Some AI Engineer\u003C/div>\n\u003C/blockquote>\n\u003Cp>While this is probably unavoidable to some degree, one thing that still bothered me was that the iterator solution was not all that much different from the original recursive solution. What if we change the problem slightly to include the following:\u003C/p>\n\u003Ch3 style=\"text-align: center\">Implement a range WITHOUT using loops or recursion.\u003C/h3>\n\u003Cp>Now things are getting interesting! Just to add a little more context, the comment section had already ruled out using the usual higher order functional such as \u003Ccode>.forEach\u003C/code>, \u003Ccode>.map\u003C/code>, \u003Ccode>.filter\u003C/code>, \u003Ccode>.reduce\u003C/code>, etc.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">Array.\u003C/span>\u003Cspan style=\"color:#B392F0\">from\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ length: finish \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> start \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }, (\u003C/span>\u003Cspan style=\"color:#FFAB70\">_\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">i\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> start \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// or\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#B392F0\">Array\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(finish \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> start \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)].\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">_\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">i\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> start \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> i)]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>While these are short and concise solutions, they are still using loops under the hood. So, I decided to take it a step further and see if I could implement a solution without using loops or recursion.\u003C/p>\n\u003Cimg src=\"/images/ah-shit-here-we-go-again.gif\" style=\"box-shadow: 0px 1px 5px rgba(0,0,0,0.1);\" alt=\"Ah shit here we go again...\" width=\"100%\">\n\u003Cbr>\n\u003Cbr>\n\u003Ch2 id=\"ycombinator--generators\">YCombinator + Generators\u003C/h2>\n\u003Cp>Some of you may be familiar with the name \u003Cstrong>YCombinator\u003C/strong> as it is indeed the same as the venture capital firm, but did you know that it also has a deeper meaning?\u003C/p>\n\u003Cp>The \u003Cstrong>YCombinator\u003C/strong> is a higher-order function which allows you to write recursive functions without using recursion. It is a concept from the field of computer science and is often used in functional programming languages.\u003C/p>\n\u003Cp>Equipped with this we now have everything we need to implement a solution without loops or recursion! Feast your eyes…\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> Y\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">next\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Y\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Generator\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> YCombinator\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">f\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Y\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ((\u003C/span>\u003Cspan style=\"color:#FFAB70\">g\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Y\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> g\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(g))((\u003C/span>\u003Cspan style=\"color:#FFAB70\">g\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Y\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    f\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> g\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(g)(x, y))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> range\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> YCombinator\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  (\u003C/span>\u003Cspan style=\"color:#FFAB70\">next\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Y\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    function*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (x \u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> y) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      yield\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> x\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      yield*\u003C/span>\u003Cspan style=\"color:#B392F0\"> next\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(next)(x \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, y)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#B392F0\">range\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">9\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)) \u003C/span>\u003Cspan style=\"color:#6A737D\">// 3, 4, 5, 6, 7, 8, 9\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Ca href=\"https://www.typescriptlang.org/play?module=1&#x26;ssl=14&#x26;ssc=29&#x26;pln=1&#x26;pc=1#code/C4TwDgpgBAmlC8UAUA7CAPYAuWBKBAfMujigK4C2ARhAE4A0UIplNt+8RA4hGrQIbAA9rQBQogGZkUAY2ABLISlgBhIdXkpBIpBJwx8Ab1FRTUWhGBlaypEgDm+jkXsPcuO47yEoEu8+IWajpGZihyYPYfV3sPdFD3XFEAX3EZJQBnYHN+FHtoRBg1DS1hWjs0TCcfKVkFJQAqQPDWEKYgtiMTM3kJYigiEHwLKxtu0xB5CAAbABModHGmKbmmyuBUDGA4qABqKABGBJSktMyhaYgAOmmhVyuHgTyIJAB2RgAmA-dRIA\">Try it on the TypeScript playground!\u003C/a>\u003C/p>\n\u003Cp>If you want to lean more about the \u003Cstrong>YCombinator\u003C/strong> I recommend checking out the following \u003Ca href=\"https://lucasfcosta.com/2018/05/20/Y-The-Most-Beautiful-Idea-in-Computer-Science.html\">blog post\u003C/a> which does an excellent job of breaking it down and explaining it step by step!\u003C/p>\n\u003Ch2 id=\"happily-ever-after\">Happily ever after?\u003C/h2>\n\u003Cp>As you can imagine I was riding pretty high after writing potentially the most needlessly complex and over-engineered code to dunk on Jr. devs on LinkedIn when the unthinkable happened…\u003C/p>\n\u003Cimg src=\"/images/challenger.jpeg\" style=\"box-shadow: 0px 1px 5px rgba(0,0,0,0.1);\" alt=\"A new challenger approaches\" width=\"100%\">\n\u003Cblockquote>\n\u003Cp>Interesting approach. \u003Cbr>\nUnfortunately, you can easily encounter: \u003Cbr> > [ERR]: Maximum call stack size exceeded \u003Cbr>\nBe careful with recursion in Javascript. \u003Cbr>\u003C/p>\n\u003Cdiv style=\"text-align: right\">— Principal Software Engineer at Microsoft\u003C/div>\n\u003C/blockquote>\n\u003Cp>And just like that my reality was shattered.\u003C/p>\n\u003Cp>All the new found joy of working through the mind-boggling intricacies of implementing the Y-Combinator for the first time quickly evaporated. Someone had come along a blew the stack off my code by creating a range over \u003Cstrong>9,000\u003C/strong>. At this moment I remembered the wise words once told to me long ago\u003C/p>\n\u003Cp>\u003Cem>“For thou who hath not been dunked on, let him cast the first lineth of code”\u003C/em>\n~ Ancient Proverbs\u003C/p>\n\u003Ch2 id=\"the-correct-way\">The Correct Way?\u003C/h2>\n\u003Cp>The Microsoft engineer then proceeded to drop this magnificent specimen of code, which could not only easily handle \u003Cstrong>9,000\u003C/strong>+ iterations, but relied solely on the built-in mechanics of iterables.\u003C/p>\n\u003Cimg src=\"/images/iterator-solution.png\" style=\"box-shadow: 0px 1px 5px rgba(0,0,0,0.1);\" alt=\"The correct way.\" width=\"100%\">\n\u003Cblockquote>\n\u003Cp>In Javascript, an Iterable can be …spread or used in a for loop. It implements a method named by Symbol.iterator, returning an Iterator. Iterator implements a method next, returning an object containing a value property and a done property, used to control the loop.\n\u003Ccite>\u003Ca href=\"https://www.linkedin.com/in/ACoAABFt5Z0BH8hw7mI-T2JCW2Gw-BoOePePUdg?lipi=urn%3Ali%3Apage%3Ad_flagship3_detail_base%3BUZ%2FiBARFQzKowiXCf9skRw%3D%3D\">Jaime Leonardo Pinheiro\u003C/a>\u003C/cite>\u003C/p>\n\u003C/blockquote>\n\u003Cp>It just goes to show there’s always someone out there who knows more than you, and that’s okay! It’s all part of the learning process. I’m grateful for the opportunity to learn from others and to be able to share my own knowledge with the community.\u003C/p>\n\u003Ch2 id=\"notable-mentions\">Notable Mentions?\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// the changes are slim, but not zero...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> sequence\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> String\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(Math.\u003C/span>\u003Cspan style=\"color:#B392F0\">random\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> regex\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> RegExp\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`^(?=\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\d\u003C/span>\u003Cspan style=\"color:#9ECBFF\">{4}$)0?1?2?3?4?5?6?7?8?9?`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">sequence.\u003C/span>\u003Cspan style=\"color:#B392F0\">match\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cimg src=\"https://media2.giphy.com/media/v1.Y2lkPTc5MGI3NjExOWdwMGZ1d2I4bWs2Zmgxb2VqMXR2OWQ3bjJ6aXc4M3B1a2w3czc3NCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/BPJmthQ3YRwD6QqcVD/giphy.gif\" style=\"box-shadow: 0px 1px 5px rgba(0,0,0,0.1);\" alt=\"Generator Cheers\" width=\"100%\">\n\u003Ch2 style=\"text-align: center; margin-top: 16px\">Happy coding!\u003C/h2>\n\u003Ch4 style=\"text-align: center;\">~Colin Teahan\u003C/h4>",{"headings":235,"localImagePaths":260,"remoteImagePaths":261,"frontmatter":262,"imagePaths":264},[236,239,242,245,248,251,254,257],{"depth":26,"slug":237,"text":238},"generator-experiments","Generator Experiments",{"depth":26,"slug":240,"text":241},"how-it-works","How it works?",{"depth":26,"slug":243,"text":244},"final-thoughts","Final thoughts",{"depth":26,"slug":246,"text":247},"thats-cool-but-can-you","That’s cool, but can you?",{"depth":26,"slug":249,"text":250},"ycombinator--generators","YCombinator + Generators",{"depth":26,"slug":252,"text":253},"happily-ever-after","Happily ever after?",{"depth":26,"slug":255,"text":256},"the-correct-way","The Correct Way?",{"depth":26,"slug":258,"text":259},"notable-mentions","Notable Mentions?",[],[],{"title":225,"description":226,"pubDate":263,"heroImage":228,"slug":222},"Feb 13, 2024",[],"lowest-common-ancestor",{"id":265,"data":267,"body":272,"filePath":273,"digest":274,"rendered":275},{"title":268,"description":269,"pubDate":270,"heroImage":271},"The Lowest Common Ancestor (LCA) Algorithm","An in-depth breakdown of the lowest common ancestor (LCA) algorithm for finding the deepest node in a graph which is a parent of two other nodes.",["Date","2025-04-20T07:00:00.000Z"],"/images/abstract-tree.png","The Lowest Common Ancestor or Least Common Ancestor (LCA) algorithm is a classic computer science problem, and one that I've had somewhat of a storied personal experience with over my years as a software engineer. Whether you are new to computer science, brushing up for an interview or just a curious individual, I hope you will enjoy this article!\n\n### Problem Overview\n\nFirst things first, let's start with a simple definition of the problem, don't worry if it sounds a bit abstract at first, I promise it is not that bad.\n\n> _Given a tree or directed acyclic graph and two nodes `v` & `w`, find the deepest node `T`, such that `T` is both a parent of `v` and `w`._\n\nIn more plain terms, given two family members, find the first common ancestor they both share. Given the tree in the image below, the LCA of nodes `E` & `H` would be node `B`, since node `B`.\n\n\u003Cimg src=\"/images/example-tree-1.png\" alt=\"Example Tree\" />\n\nA couple things to note as well, each node can have an arbitrary number of children and can be arranged in any sort of particular order. Also a node is considered a direct descendent of itself, so the LCA of node `F` and `H` in this example would just be node `F`.\n\n### Implementing the Tree\n\nNow that we have a basic understanding of the problem, let's start writing some code! I will be using Typescript for the actual implementation, but it shouldn't be too hard to follow if you are coming from another programming language as well.\n\nFirst, let's define the shape of our node which will be used to recreate the tree above, each node will contain a string value (`A`, `B`, `C`, etc.) and an array of children nodes. I will be writing the node as a class, but this could just as easily be a simple object as well.\n\n```ts\nclass TreeNode {\n  public value: string\n  public children: TreeNode[] = []\n\n  constructor(value: string) {\n    this.value = value\n  }\n}\n```\n\nNext, let's add some helper methods for common tree operations, which will be useful for building out our tree. We can start by adding a simple method for retrieving a specific node for a given value:\n\n```ts\nclass TreeNode {\n  // ...\n\n  public find(value: string): TreeNode | undefined {\n    if (this.value === value) return this\n\n    for (const child of this.children) {\n      const found = child.find(value)\n      if (found) return found\n    }\n\n    return undefined\n  }\n}\n```\n\nThe `find(value: string)` method will return if the current node if the provided value matches the nodes value, otherwise it will recursively check each child node until a match is found. If no match is found, then this method should just return `undefined`.\n\nNext, let's write another helper method which will find a node for a given value, and then insert a new child node. This will be quite useful for building the tree.\n\n```ts\nclass TreeNode {\n  // ...\n\n  public insert(value: string, parentValue: string): TreeNode {\n    const parent = this.find(parentValue)\n    if (!parent) {\n      throw new Error(`Failed to find node \"${parentValue}\"`)\n    }\n    const child = new TreeNode(value)\n    parent.children.push(child)\n    return child\n  }\n}\n```\n\nThe `insert(value: string, parentValue: string)` method will attempt to find a node in the current tree with the `parentValue`, and if found, insert a new node with the given `value` as a child. If the parent node cannot be found, this method will throw an error.\n\nFinally, let's add one more method which will return the values of our tree as an **in-order** array of strings. To do this we will just create an array containing the current nodes value, then we will add all the values of each child's subtree recursively.\n\n```ts\nclass TreeNode {\n  // ...\n\n  public getSubtree(): string[] {\n    const tree = [this.value]\n    for (const child of this.children) {\n      const subtree = child.getSubtree()\n      for (const childValue of subtree) {\n        tree.push(childValue)\n      }\n    }\n    return tree\n  }\n}\n```\n\nPlease note that I've written the `getSubstree()` method above in a way which should be understandable for people coming from different languages, but this does come with a slight performance penalty. For this example it shouldn't matter too much, but as an exercise left for the reader, can you write this method such that we only need to instantiate an array once?\n\nOk, now that we have finished adding our helper methods, the full `TreeNode` class should look something like the following:\n\n```ts\nclass TreeNode {\n  public value: string\n  public children: TreeNode[] = []\n\n  constructor(value: string) {\n    this.value = value\n  }\n\n  public find(value: string): TreeNode | undefined {\n    if (this.value === value) return this\n    for (const child of this.children) {\n      const found = child.find(value)\n      if (found) return found\n    }\n    return undefined\n  }\n\n  public insert(value: string, parentValue: string): TreeNode {\n    const parent = this.find(parentValue)\n    if (!parent) {\n      throw new Error(`Failed to find node \"${parentValue}\"`)\n    }\n    const child = new TreeNode(value)\n    parent.children.push(child)\n    return child\n  }\n\n  public getSubtree(): string[] {\n    const tree = [this.value]\n    for (const child of this.children) {\n      const subtree = child.getSubtree()\n      for (const subTreeValue of subtree) {\n        tree.push(subTreeValue)\n      }\n    }\n    return tree\n  }\n}\n```\n\nNow let's go ahead and instantiate our tree from the original example, all we need to do is create our root node and call our helper methods:\n\n```ts\nconst root = new TreeNode('A')\nroot.insert('B', 'A')\nroot.insert('C', 'A')\nroot.insert('D', 'B')\nroot.insert('E', 'B')\nroot.insert('F', 'B')\nroot.insert('G', 'F')\nroot.insert('H', 'F')\n```\n\nWe can verify that our tree has been built correctly by calling the `getSubtree()` on our root, which should return the following in-order array `[\"A\", \"B\", \"D\", \"E\", \"F\", \"G\", \"H\", \"C\"]`.\n\n```ts\nconst output = root.getSubtree()\nconsole.log(output)\n```\n\n\u003Ca href=\"https://www.typescriptlang.org/play/?target=99#code/MYGwhgzhAEAqBOBTRA5A9gE0dA3gKGmgAcBXAIxAEthoA3MEExALmggBd5KA7AcwOLkqNYAAtKIDEm6sEydFgDaAXWgBeaCrwDgabh3glg7NPAAU9RizacevAJS4BhduIgA6S03V0GTANwCAL7ahKQU1NAAZjwYFn7WBnb2skiomNgAPtAk3Fgx3IgYToSElFHQZq6UHl7Yag2+Vo5I7CTw3NDVEIGl0aaVuvrs0GISxWgV3e5jktKO+H2EQxz9ucUasxjuBXF19r1L5ZVRaOstiG0da3mHhCF9re2d64gFRYchAuHC0DwQiHg7HiVlYST4ABpiGBpOwAGoJMG2PgpOBpBTYRalFYjIgwxDcEYaaa7Mx42EI5p3P4VMwAQnJBPYC2cpVc8DQAHdoIVuQBReAc8wAAwAYmAJEUumhorEeRloAAiAAkOEZhMpTCCiuF9lZD2xelWWx8vLR8gyIKYB1Z6vYM3EcwJ7lIEFEZi2Nsel2eo0dGE+oUEERovEuAGVyJxkGZUeDeCoSobhl00j5FNM6spqad4IMjSMTZMum4HeN5kmlqMC2wo2nNv73GH2JGyNHELHWX1c-mUxByHJEJrsMX+220iyq1X2y6SG6zGPB8O9VPoAb7qyntd24GvgB6PfQABCJHGdhL2HbzG0OOgHLQRJ5iG5g4xZgA5ABBd82+-2-6AsCipHoqUKKp+iq-mgD7uABQJmIqADCoFKhBUEwXBQEACIocBkGBH+sH6IBCF8rhIHof+xHwYqorkfheCEZhCEAOK4XRlFEQCNEABLsQxeC3mc7CkI+hHNq27adisaAgIg7ggGgvBmMJon2EAA\">Click here to view on the Typescript Playground!\u003C/a>\n\n### Designing the Algorithm\n\nNow that we have a tree we can test, let's start designing our Lowest Common Ancestor algorithm by first defining the shape of our function. In this example, we will write a function which takes the root node of a tree along with two values, and returns the least common ancestor they share.\n\n```ts\nfunction getLCA(root: TreeNode, value1: string, value2: string) {\n  // ...\n}\n```\n\nThere are several ways to solve this, but we will start will a simple recursive approach. When approaching recursive problems, it is generally a good idea to start by defining our base case.\n\nSince we are looking for a node which is both an ancestor of `value1` and `value2`, our base case should just return the current nodes values when these conditions are satisfied. Now how should for this condition?\n\nRemember our `find(value: string)` helper method above, we can use this check if a child exists at a current node, by checking if it returns a `TreeNode` or `undefined`.\n\n```ts\nfunction getLCA(root: TreeNode, value1: string, value2: string) {\n  if (root.find(value1) && root.find(value2)) return root.value\n\n  return undefined\n}\n```\n\nOnce we find a node that is a direct ancestor of both `value1` and `value2`, all we need to do is return the current node all the way up the call stack, otherwise we should return `undefined`. Let's test our base case with a simple example:\n\n```ts\nconsole.log(getLCA(root, 'B', 'C')) // outputs \"A\"\n```\n\nAwesome, we have now just implemented the logic to check if a node is an ancestor! While this does return an ancestor of two nodes, this is not guaranteed to be the least common ancestor.\n\nTo check for the least common ancestor, all we need to do is traverse the tree recursively until we find the last node for which our base condition evaluates to `true`.\n\nSince the root node of a tree will always be an ancestor of any sub-values in the tree, we should add our traversal logic before our base case. We can do this by first checking if any of the child nodes are the LCA:\n\n```ts\nfunction getLCA(\n  root: TreeNode,\n  value1: string,\n  value2: string\n): string | undefined {\n  // first check children subtree for LCA\n  for (const child of root.children) {\n    const found = getLCA(child, value1, value2)\n    if (found) return found\n  }\n\n  // the check if current node is the LCA\n  if (root.find(value1) && root.find(value2)) {\n    return root.value\n  }\n\n  // if current node or subtree does not contain\n  // the LCA then return undefined\n  return undefined\n}\n```\n\nPlease note I also added a return type to the function, which is just `string` or `undefined`. Sweet, now let's write some test cases and check if our solution works!\n\n```ts\nconsole.log(getLCA(root, 'B', 'C') === 'A')\nconsole.log(getLCA(root, 'D', 'F') === 'B')\nconsole.log(getLCA(root, 'D', 'G') === 'B')\nconsole.log(getLCA(root, 'F', 'H') === 'F')\nconsole.log(getLCA(root, 'F', 'Z') === undefined) // edge case\n```\n\nIf you followed all of the steps above, each of these should output `true` to the console!\n\n\u003Ca href=\"https://www.typescriptlang.org/play/?target=99#code/MYGwhgzhAEAqBOBTRA5A9gE0dA3gKGmgAcBXAIxAEthoA3MEExALmggBd5KA7AcwOLkqNYAAtKIDEm6sEydFgDaAXWgBeaCrwDgabh3glg7NPAAU9RizacevAJS4BhduIgA6S03V0GTANwCAL7ahKQU1NAAZjwYFn7WBnb2skiomNgAPtAk3Fgx3IgYToSElFHQZq6UHl7Yag2+Vo5I7CTw3NDVEIGl0aaVuvrs0GISxWgV3e5jktKO+H2EQxz9ucUasxjuBXF19r1L5ZVRaOstiG0da3mHhCF9re2d64gFRYchAuHC0DwQiHg7HiVlYST4ABpiGBpOwAGoJMG2PgpOBpBTYRalFYjIgwxDcEYaaa7Mx42EI5p3P4VMwAQnJBPYC2cpVc8DQAHdoIVuQBReAc8wAAwAYmAJEUumhorEeRloAAiAAkOEZhMpTCCiuF9lZD2xelWWx8vLR8gyIKYB1Z6vYM3EcwJ7lIEFEZi2Nsel2eo0dGE+oUEERovEuAGVyJxkGZUeDeCoSobhl00j5FNM6spqad4IMjSMTZMum4HeN5kmlqMC2wo2nNv73GH2JGyNHELHWX1c-mUxByHJEJrsMX+220iyq1X2y6SG6zGPB8O9VPoAb7qyntd24GvgB6PfQABCJHGdhL2HbzG0OOgHLQRJ5iG5g4xZgA5ABBd82+-2-6AsCipHoqUKKp+iq-mgD7uABQJmIqADCoFKhBUEwXBQEACIocBkGBH+sH6IBCF8rhIHof+xHwYqorkfheCEZhCEAOK4XRlFEQCNEABLsQxeC3mc7CkI+hHNq27adisaAgIgMxyTC0lGrJ8kgGgvBmMJol6toB7QFhbw8OeZx5gwvCmJQrgALbaFEuTGJQejQM2AAyiGfmYf6pBaWBQnUACMSJcJCTRMAATMFyRRXw0DZK87zFPgrI9h6NZFhUhFbBWWJVrepzrD4bkeR6-r+QkAXlVY4UrlOxxmAVeQXFcnSNQG+pBmUtKEaSgWOAAZP1d7QfavUJDVk5TlunSEXU1JfN6LU5HkRmFO1+6HrAiDGpA203ipcnuOpmnFZ5f5Qu+R7vhdiE-uojRfj+gkHWpGlmKdXkjRdWHXdA76indDQaJdT0yYdx3vZc7lnV9f0-RdLGAw9V16mDr0nVDJXnX9AMXTxSPAwDqMvUdb0fdj-2-e+ABaBPLfkPBFI4+lFGGoy7UAA\">Click here to view full example!\u003C/a>","src/content/blog/lowest-common-ancestor.md","7a72ad0936c2fbb3",{"html":276,"metadata":277},"\u003Cp>The Lowest Common Ancestor or Least Common Ancestor (LCA) algorithm is a classic computer science problem, and one that I’ve had somewhat of a storied personal experience with over my years as a software engineer. Whether you are new to computer science, brushing up for an interview or just a curious individual, I hope you will enjoy this article!\u003C/p>\n\u003Ch3 id=\"problem-overview\">Problem Overview\u003C/h3>\n\u003Cp>First things first, let’s start with a simple definition of the problem, don’t worry if it sounds a bit abstract at first, I promise it is not that bad.\u003C/p>\n\u003Cblockquote>\n\u003Cp>\u003Cem>Given a tree or directed acyclic graph and two nodes \u003Ccode>v\u003C/code> &#x26; \u003Ccode>w\u003C/code>, find the deepest node \u003Ccode>T\u003C/code>, such that \u003Ccode>T\u003C/code> is both a parent of \u003Ccode>v\u003C/code> and \u003Ccode>w\u003C/code>.\u003C/em>\u003C/p>\n\u003C/blockquote>\n\u003Cp>In more plain terms, given two family members, find the first common ancestor they both share. Given the tree in the image below, the LCA of nodes \u003Ccode>E\u003C/code> &#x26; \u003Ccode>H\u003C/code> would be node \u003Ccode>B\u003C/code>, since node \u003Ccode>B\u003C/code>.\u003C/p>\n\u003Cimg src=\"/images/example-tree-1.png\" alt=\"Example Tree\">\n\u003Cp>A couple things to note as well, each node can have an arbitrary number of children and can be arranged in any sort of particular order. Also a node is considered a direct descendent of itself, so the LCA of node \u003Ccode>F\u003C/code> and \u003Ccode>H\u003C/code> in this example would just be node \u003Ccode>F\u003C/code>.\u003C/p>\n\u003Ch3 id=\"implementing-the-tree\">Implementing the Tree\u003C/h3>\n\u003Cp>Now that we have a basic understanding of the problem, let’s start writing some code! I will be using Typescript for the actual implementation, but it shouldn’t be too hard to follow if you are coming from another programming language as well.\u003C/p>\n\u003Cp>First, let’s define the shape of our node which will be used to recreate the tree above, each node will contain a string value (\u003Ccode>A\u003C/code>, \u003Ccode>B\u003C/code>, \u003Ccode>C\u003C/code>, etc.) and an array of children nodes. I will be writing the node as a class, but this could just as easily be a simple object as well.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> TreeNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  public\u003C/span>\u003Cspan style=\"color:#FFAB70\"> value\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  public\u003C/span>\u003Cspan style=\"color:#FFAB70\"> children\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> TreeNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> []\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  constructor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">value\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.value \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> value\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Next, let’s add some helper methods for common tree operations, which will be useful for building out our tree. We can start by adding a simple method for retrieving a specific node for a given value:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> TreeNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  public\u003C/span>\u003Cspan style=\"color:#B392F0\"> find\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">value\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> TreeNode\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#79B8FF\"> undefined\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.value \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> value) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> child\u003C/span>\u003Cspan style=\"color:#F97583\"> of\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.children) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> found\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> child.\u003C/span>\u003Cspan style=\"color:#B392F0\">find\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(value)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (found) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> found\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> undefined\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The \u003Ccode>find(value: string)\u003C/code> method will return if the current node if the provided value matches the nodes value, otherwise it will recursively check each child node until a match is found. If no match is found, then this method should just return \u003Ccode>undefined\u003C/code>.\u003C/p>\n\u003Cp>Next, let’s write another helper method which will find a node for a given value, and then insert a new child node. This will be quite useful for building the tree.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> TreeNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  public\u003C/span>\u003Cspan style=\"color:#B392F0\"> insert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">value\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">parentValue\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> TreeNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> parent\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">find\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(parentValue)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">parent) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      throw\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`Failed to find node \"${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">parentValue\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}\"`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> child\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> TreeNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(value)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    parent.children.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(child)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> child\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The \u003Ccode>insert(value: string, parentValue: string)\u003C/code> method will attempt to find a node in the current tree with the \u003Ccode>parentValue\u003C/code>, and if found, insert a new node with the given \u003Ccode>value\u003C/code> as a child. If the parent node cannot be found, this method will throw an error.\u003C/p>\n\u003Cp>Finally, let’s add one more method which will return the values of our tree as an \u003Cstrong>in-order\u003C/strong> array of strings. To do this we will just create an array containing the current nodes value, then we will add all the values of each child’s subtree recursively.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> TreeNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  public\u003C/span>\u003Cspan style=\"color:#B392F0\"> getSubtree\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[] {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> tree\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.value]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> child\u003C/span>\u003Cspan style=\"color:#F97583\"> of\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.children) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> subtree\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> child.\u003C/span>\u003Cspan style=\"color:#B392F0\">getSubtree\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> childValue\u003C/span>\u003Cspan style=\"color:#F97583\"> of\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> subtree) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        tree.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(childValue)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> tree\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Please note that I’ve written the \u003Ccode>getSubstree()\u003C/code> method above in a way which should be understandable for people coming from different languages, but this does come with a slight performance penalty. For this example it shouldn’t matter too much, but as an exercise left for the reader, can you write this method such that we only need to instantiate an array once?\u003C/p>\n\u003Cp>Ok, now that we have finished adding our helper methods, the full \u003Ccode>TreeNode\u003C/code> class should look something like the following:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> TreeNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  public\u003C/span>\u003Cspan style=\"color:#FFAB70\"> value\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  public\u003C/span>\u003Cspan style=\"color:#FFAB70\"> children\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> TreeNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> []\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  constructor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">value\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.value \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> value\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  public\u003C/span>\u003Cspan style=\"color:#B392F0\"> find\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">value\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> TreeNode\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#79B8FF\"> undefined\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.value \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> value) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> child\u003C/span>\u003Cspan style=\"color:#F97583\"> of\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.children) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> found\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> child.\u003C/span>\u003Cspan style=\"color:#B392F0\">find\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(value)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (found) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> found\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> undefined\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  public\u003C/span>\u003Cspan style=\"color:#B392F0\"> insert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">value\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">parentValue\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> TreeNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> parent\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">find\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(parentValue)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">parent) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      throw\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`Failed to find node \"${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">parentValue\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}\"`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> child\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> TreeNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(value)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    parent.children.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(child)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> child\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  public\u003C/span>\u003Cspan style=\"color:#B392F0\"> getSubtree\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[] {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> tree\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.value]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> child\u003C/span>\u003Cspan style=\"color:#F97583\"> of\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.children) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> subtree\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> child.\u003C/span>\u003Cspan style=\"color:#B392F0\">getSubtree\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> subTreeValue\u003C/span>\u003Cspan style=\"color:#F97583\"> of\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> subtree) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        tree.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(subTreeValue)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> tree\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Now let’s go ahead and instantiate our tree from the original example, all we need to do is create our root node and call our helper methods:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> root\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> TreeNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'A'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">root.\u003C/span>\u003Cspan style=\"color:#B392F0\">insert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'B'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'A'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">root.\u003C/span>\u003Cspan style=\"color:#B392F0\">insert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'C'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'A'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">root.\u003C/span>\u003Cspan style=\"color:#B392F0\">insert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'D'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'B'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">root.\u003C/span>\u003Cspan style=\"color:#B392F0\">insert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'E'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'B'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">root.\u003C/span>\u003Cspan style=\"color:#B392F0\">insert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'F'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'B'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">root.\u003C/span>\u003Cspan style=\"color:#B392F0\">insert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'G'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'F'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">root.\u003C/span>\u003Cspan style=\"color:#B392F0\">insert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'H'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'F'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>We can verify that our tree has been built correctly by calling the \u003Ccode>getSubtree()\u003C/code> on our root, which should return the following in-order array \u003Ccode>[\"A\", \"B\", \"D\", \"E\", \"F\", \"G\", \"H\", \"C\"]\u003C/code>.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> output\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> root.\u003C/span>\u003Cspan style=\"color:#B392F0\">getSubtree\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(output)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Ca href=\"https://www.typescriptlang.org/play/?target=99#code/MYGwhgzhAEAqBOBTRA5A9gE0dA3gKGmgAcBXAIxAEthoA3MEExALmggBd5KA7AcwOLkqNYAAtKIDEm6sEydFgDaAXWgBeaCrwDgabh3glg7NPAAU9RizacevAJS4BhduIgA6S03V0GTANwCAL7ahKQU1NAAZjwYFn7WBnb2skiomNgAPtAk3Fgx3IgYToSElFHQZq6UHl7Yag2+Vo5I7CTw3NDVEIGl0aaVuvrs0GISxWgV3e5jktKO+H2EQxz9ucUasxjuBXF19r1L5ZVRaOstiG0da3mHhCF9re2d64gFRYchAuHC0DwQiHg7HiVlYST4ABpiGBpOwAGoJMG2PgpOBpBTYRalFYjIgwxDcEYaaa7Mx42EI5p3P4VMwAQnJBPYC2cpVc8DQAHdoIVuQBReAc8wAAwAYmAJEUumhorEeRloAAiAAkOEZhMpTCCiuF9lZD2xelWWx8vLR8gyIKYB1Z6vYM3EcwJ7lIEFEZi2Nsel2eo0dGE+oUEERovEuAGVyJxkGZUeDeCoSobhl00j5FNM6spqad4IMjSMTZMum4HeN5kmlqMC2wo2nNv73GH2JGyNHELHWX1c-mUxByHJEJrsMX+220iyq1X2y6SG6zGPB8O9VPoAb7qyntd24GvgB6PfQABCJHGdhL2HbzG0OOgHLQRJ5iG5g4xZgA5ABBd82+-2-6AsCipHoqUKKp+iq-mgD7uABQJmIqADCoFKhBUEwXBQEACIocBkGBH+sH6IBCF8rhIHof+xHwYqorkfheCEZhCEAOK4XRlFEQCNEABLsQxeC3mc7CkI+hHNq27adisaAgIg7ggGgvBmMJon2EAA\">Click here to view on the Typescript Playground!\u003C/a>\u003C/p>\n\u003Ch3 id=\"designing-the-algorithm\">Designing the Algorithm\u003C/h3>\n\u003Cp>Now that we have a tree we can test, let’s start designing our Lowest Common Ancestor algorithm by first defining the shape of our function. In this example, we will write a function which takes the root node of a tree along with two values, and returns the least common ancestor they share.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> getLCA\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">root\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> TreeNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">value1\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">value2\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>There are several ways to solve this, but we will start will a simple recursive approach. When approaching recursive problems, it is generally a good idea to start by defining our base case.\u003C/p>\n\u003Cp>Since we are looking for a node which is both an ancestor of \u003Ccode>value1\u003C/code> and \u003Ccode>value2\u003C/code>, our base case should just return the current nodes values when these conditions are satisfied. Now how should for this condition?\u003C/p>\n\u003Cp>Remember our \u003Ccode>find(value: string)\u003C/code> helper method above, we can use this check if a child exists at a current node, by checking if it returns a \u003Ccode>TreeNode\u003C/code> or \u003Ccode>undefined\u003C/code>.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> getLCA\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">root\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> TreeNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">value1\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">value2\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (root.\u003C/span>\u003Cspan style=\"color:#B392F0\">find\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(value1) \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> root.\u003C/span>\u003Cspan style=\"color:#B392F0\">find\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(value2)) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> root.value\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> undefined\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Once we find a node that is a direct ancestor of both \u003Ccode>value1\u003C/code> and \u003Ccode>value2\u003C/code>, all we need to do is return the current node all the way up the call stack, otherwise we should return \u003Ccode>undefined\u003C/code>. Let’s test our base case with a simple example:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">getLCA\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(root, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'B'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'C'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)) \u003C/span>\u003Cspan style=\"color:#6A737D\">// outputs \"A\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Awesome, we have now just implemented the logic to check if a node is an ancestor! While this does return an ancestor of two nodes, this is not guaranteed to be the least common ancestor.\u003C/p>\n\u003Cp>To check for the least common ancestor, all we need to do is traverse the tree recursively until we find the last node for which our base condition evaluates to \u003Ccode>true\u003C/code>.\u003C/p>\n\u003Cp>Since the root node of a tree will always be an ancestor of any sub-values in the tree, we should add our traversal logic before our base case. We can do this by first checking if any of the child nodes are the LCA:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> getLCA\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  root\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> TreeNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  value1\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  value2\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#79B8FF\"> undefined\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // first check children subtree for LCA\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> child\u003C/span>\u003Cspan style=\"color:#F97583\"> of\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> root.children) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> found\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> getLCA\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(child, value1, value2)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (found) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> found\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // the check if current node is the LCA\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (root.\u003C/span>\u003Cspan style=\"color:#B392F0\">find\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(value1) \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> root.\u003C/span>\u003Cspan style=\"color:#B392F0\">find\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(value2)) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> root.value\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // if current node or subtree does not contain\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // the LCA then return undefined\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> undefined\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Please note I also added a return type to the function, which is just \u003Ccode>string\u003C/code> or \u003Ccode>undefined\u003C/code>. Sweet, now let’s write some test cases and check if our solution works!\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">getLCA\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(root, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'B'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'C'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'A'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">getLCA\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(root, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'D'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'F'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'B'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">getLCA\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(root, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'D'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'G'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'B'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">getLCA\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(root, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'F'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'H'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'F'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">getLCA\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(root, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'F'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Z'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> undefined\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#6A737D\">// edge case\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>If you followed all of the steps above, each of these should output \u003Ccode>true\u003C/code> to the console!\u003C/p>\n\u003Cp>\u003Ca href=\"https://www.typescriptlang.org/play/?target=99#code/MYGwhgzhAEAqBOBTRA5A9gE0dA3gKGmgAcBXAIxAEthoA3MEExALmggBd5KA7AcwOLkqNYAAtKIDEm6sEydFgDaAXWgBeaCrwDgabh3glg7NPAAU9RizacevAJS4BhduIgA6S03V0GTANwCAL7ahKQU1NAAZjwYFn7WBnb2skiomNgAPtAk3Fgx3IgYToSElFHQZq6UHl7Yag2+Vo5I7CTw3NDVEIGl0aaVuvrs0GISxWgV3e5jktKO+H2EQxz9ucUasxjuBXF19r1L5ZVRaOstiG0da3mHhCF9re2d64gFRYchAuHC0DwQiHg7HiVlYST4ABpiGBpOwAGoJMG2PgpOBpBTYRalFYjIgwxDcEYaaa7Mx42EI5p3P4VMwAQnJBPYC2cpVc8DQAHdoIVuQBReAc8wAAwAYmAJEUumhorEeRloAAiAAkOEZhMpTCCiuF9lZD2xelWWx8vLR8gyIKYB1Z6vYM3EcwJ7lIEFEZi2Nsel2eo0dGE+oUEERovEuAGVyJxkGZUeDeCoSobhl00j5FNM6spqad4IMjSMTZMum4HeN5kmlqMC2wo2nNv73GH2JGyNHELHWX1c-mUxByHJEJrsMX+220iyq1X2y6SG6zGPB8O9VPoAb7qyntd24GvgB6PfQABCJHGdhL2HbzG0OOgHLQRJ5iG5g4xZgA5ABBd82+-2-6AsCipHoqUKKp+iq-mgD7uABQJmIqADCoFKhBUEwXBQEACIocBkGBH+sH6IBCF8rhIHof+xHwYqorkfheCEZhCEAOK4XRlFEQCNEABLsQxeC3mc7CkI+hHNq27adisaAgIgMxyTC0lGrJ8kgGgvBmMJol6toB7QFhbw8OeZx5gwvCmJQrgALbaFEuTGJQejQM2AAyiGfmYf6pBaWBQnUACMSJcJCTRMAATMFyRRXw0DZK87zFPgrI9h6NZFhUhFbBWWJVrepzrD4bkeR6-r+QkAXlVY4UrlOxxmAVeQXFcnSNQG+pBmUtKEaSgWOAAZP1d7QfavUJDVk5TlunSEXU1JfN6LU5HkRmFO1+6HrAiDGpA203ipcnuOpmnFZ5f5Qu+R7vhdiE-uojRfj+gkHWpGlmKdXkjRdWHXdA76indDQaJdT0yYdx3vZc7lnV9f0-RdLGAw9V16mDr0nVDJXnX9AMXTxSPAwDqMvUdb0fdj-2-e+ABaBPLfkPBFI4+lFGGoy7UAA\">Click here to view full example!\u003C/a>\u003C/p>",{"headings":278,"localImagePaths":288,"remoteImagePaths":289,"frontmatter":290,"imagePaths":292},[279,282,285],{"depth":49,"slug":280,"text":281},"problem-overview","Problem Overview",{"depth":49,"slug":283,"text":284},"implementing-the-tree","Implementing the Tree",{"depth":49,"slug":286,"text":287},"designing-the-algorithm","Designing the Algorithm",[],[],{"title":268,"description":269,"pubDate":291,"heroImage":271,"slug":265},"April 20 2025",[],"try",{"id":293,"data":295,"body":300,"filePath":301,"digest":302,"rendered":303},{"title":296,"description":297,"pubDate":298,"heroImage":299},"The Quest for Isomorphic Error Handling in Typescript","A deep dive into error handling paradigms and advanced Typescript types to create the perfect errors-as-values utility.",["Date","2025-04-26T07:00:00.000Z"],"/images/try-catch-cover.jpg","Error handling in software engineering is a bit like paying taxes — _it's something that we all have to do and something that nobody enjoys doing..._\n\nIf you are anything like me, then you are most likely familiar with how tedious and awkward error handling with try / catch statements can feel, especially in languages like Javascript and Typescript. Often times I find myself having to write unwieldy code like the following:\n\n```ts\nfunction getUrlFromString(urlString: string): URL | undefined {\n  let url: URL | undefined\n  try {\n    url = new URL(urlString)\n  } catch (error) {\n    console.warn(`invalid url: ${(error as Error)?.message}`)\n    try {\n      url = new URL(`https://${urlString}`)\n    } catch (error2) {\n      return undefined\n    }\n  }\n  return url\n}\n```\n\nAnd while this might seem like a trivial example and something that could easily be abstracted into smaller utility functions, it might surprise you that I've seen numerous examples just like this in corporate production software.\n\nWhat I do like about this example, it that it demonstrates several key issues with the try / catch pattern, especially relating to Typescript:\n\n- values are scoped to their respective blocks\n- errors are not guaranteed to be of type `Error`\n- retry logic can become extremely verbose\n- it isn't clear if a function can throw or not\n\nAlong with this since any function can throw from somewhere deep in the call stack, the control flow of the program can become unpredictable and hard to reason about what is happening and where. In fact, let's take a look at one more example. What do you think this function will return?\n\n```ts\nfunction generateOddNumbers(count: number) {\n  let oddNumbers: number[] = new Array(count).fill(0)\n\n  try {\n    // generate an array of random numbers\n    oddNumbers = oddNumbers.map((_, i) => Math.floor(Math.random() * i))\n\n    // check if they are all odd and return or throw\n    if (oddNumbers.every((num) => num % 2 === 1)) {\n      return oddNumbers\n    } else {\n      throw 'Invalid sequence'\n    }\n  } catch (e) {\n    // handle errors\n    console.warn(`Error generating numbers: ${e}`)\n    return false\n  } finally {\n    // cleanup resource\n    console.log('cleaning up resources...')\n    oddNumbers = []\n    return\n  }\n}\n```\n\nPerhaps you might guess that maybe for a low enough value of count, that it might return an array of only odd numbers once in a while. That would make send right?\n\nWell if you guessed `undefined` for any number, you would be correct, just imagine the headache if we had multiple nested finally blocks...\n\n### A better way?\n\nWhile the above examples may seem a but contrived, they highlight some key issues with try/catch based error handling. If you are familiar with other programming languages like Go or Rust, then you are probably already know where I am going with this –– \\*errors as **values\\***.\n\nInstead of throwing errors _willy-nilly_ to whoever will catch them, the idea is to treat them as first class citizens and handle as close to the call site as possible. While this article isn't a deep dive into the errors as values paradigm, a lot of the techniques have been inspired by Rust.\n\nNow let's start coding a re-usable solution which can help simplify our error handling process. Since this will be in Typescript let's begin by describing the shape of our data which should either by a generic value `T` or the concrete `Error` class, but not both.\n\n```ts\ntype ResultOk\u003CT> = [T, undefined]\ntype ResultError = [undefined, Error]\ntype Result\u003CT> = ResultOk\u003CT> | ResultError\n```\n\nThe above types are just tuples with either contain the value `T | undefined` in the first position and `undefined | Error` in the second position. The last type represents the union between these two values and will help us with type narrowing later. Next we will create a simple utility to convert our try/catch based errors into result tuples:\n\n```ts\nfunction tryCatch\u003CT>(fn: () => T | never): Result\u003CT> {\n  try {\n    const value = fn()\n    return [value, undefined] as ResultOk\u003CT>\n  } catch (e) {\n    const error = e instanceof Error ? e : new Error(String(e))\n    return [undefined, error] as ResultError\n  }\n}\n```\n\nThe `tryCatch(fn)` utility takes a function to be invoked and wraps it inside a try/catch statement. If the function throws then the exception will be caught and converted to an error if needed, otherwise it will return the value. Since each branch returns a type which is narrower than the `Result\u003CT>` the result tuple is easy to unpack and check for errors.\n\n```ts\nconst [url, error] = tryCatch(() => new URL(maybeUrl))\n\nif (error) return console.warn(error.message)\n\nreturn url.href // type-safe!\n```\n\nSince `error` will only be defined when `[undefined, Error]` and we early return if it is defined, the Typescript type system is able to infer that `url` must be defined below! Now let's revisit the same problem I mentioned in the beginning of this article and see how this approach does.\n\n```ts\nfunction getUrlFromString(urlString: string): URL | undefined {\n  let [url1, err1] = tryCatch(() => new URL(urlString))\n  if (!err1) return url\n  else console.warn(err1.message)\n\n  let [url2, err2] = tryCatch(() => new URL(`https://${urlString}`))\n  if (!err2) return url2\n  else console.warn(err2.message)\n\n  let [url3, err3] = tryCatch(() => new URL(`https://${urlString}`).trim())\n  if (!err3) return url3\n  else console.warn(err3.message)\n}\n```\n\nJust like that our `getUrlFromString(urlString)` is far more succinct and easy to follow, so much so that we were able to add another case to make the program more robust! The less time we spend fiddling with nested try/catch statements, casting errors and wrangling control flow; the more time we can spend on making programs which crash less!\n\n### Synchronous vs. Asynchronous\n\nSo far the `tryCatch` utility works great for synchronous error handling. However, most of the time errors tend to stem from asynchronous operations like `fetch()` requests and json decoding. Here is where we run into a little issue with the type system...\n\n```ts\nconst result = tryCatch(async () => {\n  return JSON.parse('[1, 2, 3]') as number[]\n})\n\ntypeof result // Result\u003CPromise\u003Cnumber[]>>\n```\n\nThe problem here is that the promise is now inside our result and thus needs to be unpacked before we can call await. However, this also causes another issue as calling await on the result value can throw! Instead what we would like is for the return type to be `Promise\u003CResult\u003Cnumber[]>>` like so:\n\n```ts\nconst [data, error] = await tryCatch(async () => {\n  return JSON.parse('[1, 2, 3]') as number[]\n})\n\nif (!error) {\n  return data.map((num) => num * 10)\n}\n```\n\nWhile we _could_ just create another utility like `tryCatchAsync(fn)` that fits these constraints, just look at that beautiful example above, that's what we **want** –– not that _\"we have error values at home nonsense\"_.\n\n### Advanced Types\n\nJust like before, let's start by describing what it is we want with types. We roughly know what the async type should be from above, but how can we translate this to our example? Well the first thing to understand is that async/await is merely just syntactic sugar around promises\\*.\n\n```ts\nfunction example1() {\n  return new Promise\u003Cstring>((resolve) => resolve('abc'))\n}\n\nasync function example2() {\n  return 'hello'\n}\n\ntype PromiseType = typeof example1 // () => Promise\u003Cstring>\ntype AsyncFnType = typeof example1 // () => Promise\u003Cstring>\n```\n\nThis means that _theoretically_ all we need to do is adjust our `tryCatch(fn)` to distinguish between `T` and `Promise\u003CT>`. If we notice that the return type is a `Promise`, then we can assume the function should be considered async.\n\n```ts\nfunction tryCatch\u003CT>(\n  fn: () => Promise\u003CT> | T | never\n): Result\u003CPromise\u003CT>> | Result\u003CT> {\n  // ...\n}\n```\n\nUnfortunately, this is where things start getting a bit complicated. If you hover over the result type now you will see the following:\n\n```ts\nconst result = tryCatch(someFunc)\ntypeof result // ResultError | ResultOk\u003Cnumber[]> | ResultOk\u003CPromise\u003Cnumber[]>>\n```\n\nThe issue is the type system isn't able to narrow the type simply by placing an await statement in front of the try/catch. This means functions which should be only synchronous are now appearing as potentially promises and vis-versa...\n\nWe need to find a way to narrow the type system such that promises only are returned for async functions and not for synchronous ones, while async functions should only return promises and never synchronous results.\n\nI tinkered with this problem for long than I would like to admit, making marginal gains in one area, only at the cost of regressing in others. For a time I even thought that the technology simply didn't exist yet, until one day I stumbled across the following snippet:\n\n```ts\nconst markdownHtml = marked.render(markdown, { async: true })\n```\n\nA library that was able to return either sync or async simply by passing an optional argument to the method. This discovery re-ignited my unyielding thirst for a truly isomorphic try/catch helper and sent me into overdrive. Quickly I rushed to the packages Github source code and began trawling through the dense source code, until finally I noticed the secret.\n\n### Function Overloading\n\nFunction overloading in Typescript is most likely one of those things that you probably never think about unless you are a library maintainer or deep in the weeds. It allows for defining multiple variants of the same function or method which can take different arguments and return different values, and works by declaring just the function signature above the implementation.\n\nFor example imagine we have two similar functions which either add two numbers together or concat two strings. The implementation is nearly identical and it would be nice if we just had two write this logic once. The issue we want to avoid is allowing our new `add(a, b)` function to add a number and string or vis-versa.\n\n```ts\nfunction addString(x: string, y: string): string {\n  return x + y\n}\n\nfunction addNumber(x: number, y: number): number {\n  return x + y\n}\n```\n\nThis is where function overloading comes in handy, we can declare multiple versions of the same function which help narrow the return type when calling directly. The caveat is that the actual implementation must contain the most permissive type which can accommodate any of the values also passed to the overloads.\n\n```ts\nfunction add(x: number, y: number): number\nfunction add(x: string, y: string): string\nfunction add(x: number | string, y: number | string): number | string {\n  if (typeof x === 'string' && typeof y === 'string') return x + y\n  if (typeof x === 'number' && typeof y === 'number') return x + y\n  throw new Error('Mismatched types!')\n}\n\nadd(123, 456) // ok!\nadd('a', 'b') // ok!\nadd(123, 'b') // type-error\nadd('a', 456) // type-error\n```\n\nAs you can see we had to jump through a lot of hoops to even get this simple example working, but I hope it illustrates how function overloading can be used to declare multiple type variants of the same function. The first two function definition are recognized by the type system as overloads, where the last definition handles the actual implementation.\n\nBringing this back to the `tryCatch(fn)` helper, let's see how we can leverage function overloads to help distinguish between the synchronous and asynchronous versions of our function.\n\n```ts\nfunction tryCatch\u003CT>(fn: () => Promise\u003CT>): Promise\u003CResult\u003CT>>\nfunction tryCatch\u003CT>(fn: () => T | never): Result\u003CT>\nfunction tryCatch\u003CT>(\n  fn: () => T | never | Promise\u003CT>\n): Result\u003CT> | Promise\u003CResult\u003CT>> {\n  // ...\n}\n```\n\nThe first function overload handles our async case where the `fn` passed as an argument returns a promise, this version should also return a promise which can be awaited to obtain the result tuple containing `T` or an `Error`. The second overload handles our synchronous case where the `fn` passed as an argument either returns `T` or `never` (can throw). Finally the last overload combines all three for our implementation.\n\nOk, this is starting to look fairly _promising_ if I do say so myself... all that is left now is to handle the implementation. The tricky part here is figuring out how to perform a runtime check for an async function and then how to apply our error catching logic to this async function in a synchronous context. Luckily, this is actually what promises are in the first place!\n\n```ts\ntry {\n  const output = fn()\n  if (output instanceof Promise) {\n    return output\n      .then((value) => [value, undefined] as ResultOk\u003CT>)\n      .catch((error) => [undefined, error] as ResultError)\n  }\n  return [output, undefined] as ResultOk\u003CT>\n} catch (e) {\n  const error = e instanceof Error ? e : new Error(String(e))\n  return [undefined, error] as ResultError\n}\n```\n\nThe first step is execute the `fn()` passed as an argument and then check if the return value `output` is a promise. We can do this using the `instanceof` operator and if `true` we can call the `.then()` and `.catch()` to extract the value and construct our result tuple! This will then return our desired type `Promise\u003CResult\u003CT>>` which can be awaited!\n\nWe are almost there now, but as some of you might have already noticed, we haven't properly coerced the async `error` value into the `Error` class. Let's extract the logic we used below in the original version into a separate helper which can be used by bother versions.\n\n```ts\nconst toError = (e: unknown): Error =>\n  e instanceof Error ? e : new Error(String(e))\n```\n\nIt's not perfect, but it gets the job done for now. Basically just checks if the error value is already an instance of the `Error` class and if so does nothing, otherwise converts the value to a string which is then used to instantiate an `Error`. Now tying this altogether we should have something that looks like the following:\n\n```ts\n// our result types...\ntype ResultOk\u003CT> = [T, undefined]\ntype ResultError = [undefined, Error]\ntype Result\u003CT> = ResultOk\u003CT> | ResultError\n\n// our error handling utility...\nconst toError = (e: unknown): Error =>\n  e instanceof Error ? e : new Error(String(e))\n\n// our try/catch overloads and implementation...\nfunction tryCatch\u003CT>(fn: () => Promise\u003CT>): Promise\u003CResult\u003CT>>\nfunction tryCatch\u003CT>(fn: () => T | never): Result\u003CT>\nfunction tryCatch\u003CT>(\n  fn: () => T | never | Promise\u003CT>\n): Result\u003CT> | Promise\u003CResult\u003CT>> {\n  try {\n    const output = fn()\n    if (output instanceof Promise) {\n      return output\n        .then((value) => [value, undefined] as ResultOk\u003CT>)\n        .catch((error) => [undefined, toError(error)] as ResultError)\n    }\n    return [output, undefined] as ResultOk\u003CT>\n  } catch (e) {\n    return [undefined, toError(e)] as ResultError\n  }\n}\n```\n\nNow let's go ahead and test this implementation with a couple different variations to ensure our types are working properly and the code does what we expect it to do for both synchronous and asynchronous operations! Below I've added test cases for synchronous, asynchronous and promise based arguments. For each different variant I've included one that throws and one that returns successfully.\n\n```ts\nasync function main() {\n  const result0 = tryCatch(() => 123)\n  const result1 = tryCatch(() => {\n    if (Math.random() \u003C 1.0) throw new Error('thrown sync')\n    return 123\n  })\n  const result2 = await tryCatch(async () => 'abc')\n  const result3 = await tryCatch(async () => {\n    throw new Error('thrown async')\n  })\n  const result4 = await tryCatch(() => new Promise\u003Cboolean>((res) => res(true)))\n  const result5 = await tryCatch(\n    () => new Promise((_, reject) => reject('thrown promise'))\n  )\n\n  // output the all the results once finished...\n  const outputs = [result0, result1, result2, result3, result4, result5]\n  outputs.forEach((info, i) => console.log(`Test #${i}: `, info))\n}\n```\n\nLooking at this code in a code editor shows that each of the results indeed have the desired return type, please note that some additional type casting needs to be done for the promises. Running this code also outputs what we expect as well:\n\n```txt\n[LOG] Test #0:  [123, undefined]\n[LOG] Test #1:  [undefined, thrown sync]\n[LOG] Test #2:  [\"abc\", undefined]\n[LOG] Test #3:  [undefined, thrown async]\n[LOG] Test #4:  [true, undefined]\n[LOG] Test #5:  [undefined, thrown promise]\n```\n\nThe result types are looking good and the implementation is working as expected! Lastly, let's try adding some edge-cases to make sure we haven't missed anything. Let's test the following:\n\n1. What happens if `fn()` doesn't return or throw anything\n2. What happens if `fn()` returns an `Error` instead of throwing\n3. What happens if `fn()` never returns and only throws\n\n```ts\nconst result6 = tryCatch(() => {})\nconst result7 = tryCatch(() => new Error('error as value'))\nconst result8 = tryCatch(() => {\n  throw new Error('123')\n})\n```\n\nThe first two edge-cases appear to work as we might expect, the first one returns `Result\u003Cvoid>` and the second returns `Result\u003CError>`, which is reasonable as our function is only concerned with catching errors, but not if the value they return is an error _per se_. However, for `result8` we can see something funky...\n\n```ts\nconst result8: Promise\u003CResult\u003Cunknown>>\n```\n\nOh no, what is happening here? Well since this function never returns a value, this signature for `fn` looks like the following `fn: () => never`, which can't easily be matched by our current function overloads. No worries, the fix is quite simple as we just need to add the following overload:\n\n```ts\nfunction tryCatch\u003CT>(fn: () => never): ResultError\n```\n\nSince the function `never` returns, this means it must throw and thus we can specify the return type to always be the sync `ResultError`. Thankfully, we only need to add this for sync version as the async version will still always return a promise first.\n\nFinally, after the all the things we've tried, we were able to catch a break and create the fabled _isomorphic_ try/catch utility. Well, at least that's what I call it anyways. Isomorphic in this context meaning:\n\n> An isomorphic function, or isomorphism, is a bijection (one-to-one and onto mapping) between two sets or structures that preserves the relevant properties or operations of those structures. In simpler terms, it's a way of showing that two things are essentially the same, even if they look different, by establishing a perfect match between their elements while maintaining their underlying relationships.\n\nWhich I found as a fitting way to describe the relationship between the try/catch utility behaving the same in both synchronous and asynchronous contexts. What's even more fitting is that usually function overloading is meant for polymorphism...\n\n\u003Cimg src=\"/images/result-tuple.jpg\" alt=\"Isomorphic Try/Catch Error Handling\" />\n\nAnyways, I hope you enjoyed this article and learned something along the way. The next step is expand on the actual result type, with special methods like `.unwrap()` and `or()`, but I will save that for the next article.\n\nYou can play around with a live example of the code here on the [Typescript playground](https://www.typescriptlang.org/play/?target=99#code/FAehAICUFMGcFcA2AXcA3Aho+0C00AnAgewN2XgAdFpxkBPSuYBpqOJZAeQGsAeACoA+cAF5wAbQEAacPAB2AE2gAzAJbzoigLotGtGAhQBRIqTGSFy9ZsWzTJArtYGOKQSPGHOvD+AA+7EbIDqTAoBChBOAAxsTyaISwavFyyGqIagzAcfKwqMjEURYAFNAAXHLyPPLEAO7yAJSVxaIitBr5GPIx0MQq4MUA-OC0lZp1g2YEJQDKyAQaAOZljY3hYOAAYgox6anEiQSIxBiKsOAAZOBqALbU0LfQ8sgY+-IAdF-AKrvvdAR6ABhN4xAAWHhKKnklRKjTEIk0R2aQU4UR+fxS8gBwNBEOEUJh4DhCPAAAUSLc1LBoB4URTiFSaXxvO5hEIMT1-gtcchwZDobD4W1wAIAuAkYQUazkB5OXssTiQXz8UJCULSWLApLooEGUzacJpW5ZcJxfrqbSZR4RABvYDgR048D2p1u2LxfLgYjwZCUX0WaFwh3ux1qAYlH1+gOdV49PoDC00+Gu0PugjQCgEbFR-3IENptMfZBg54lEqYbDQYUiCSVnCyKyqDRabTgDAXGW+I0Fwvuj4xPHlwiOGuWJTN2yyQpRMrTRptjuokzz3tugC+a6dGaz2Ikud9jYnNlb7c7Ju7HI3sSH1ZdW8dO-g2fH1hbdjoRWmq0X5+C6I3YBNwiUU4FQQcaVgcpgA7egenAX4uUVW4MA0ElU0dXJYGIGgBxoDAZnWN0sNQDNggABgsHllXBcsxwARgAJgAZiIp0SPAMjOHoqjARosE6NJDD3XDYkAFk3jBD4CG6RRGRJPhwHIj4AFZ4RLEhJgmKZHBKAByDT6mxWA4JiPS2NDJ8XyY5je3XCyPTyUiTUYiwMDqVCCj4odYPgkkRT0jAACMzIcjiuJQZi3I8rIlR8ky-LHYS3UMrToEmWcDLBTTsV80KH3Aeze3Ck0ABZos8uKVUEkVtKTWkguIHDoG6NUSjIscyJKBYcDWMLPWc4IVIq2LqKHAr-MRdLyUpS0+B1NqAH1ZAzAAraA9k66B1r2fTUuxShZppcyHP6pzOJNAA2XjeVoyaXSK4iBou4IAHYbv4mqpoy78ACIR3MJd62gX61mK56IuQAAOD6h3u5KnVSiVptnX6bNBuz1nB86D2QC5xAkSHyJWk16JJ4JGPJzhmKplBStp5AVIZy6Gdehmod0N1cdgD4VFIYwMDujQ+dkNQxyw5qPhOFYAAMBDA8AAGIABJbTUddKhl0X5D5sHgM2AAReIDIQ0glkzT8b0QRA6DBakAEJgBQtDGiAA) or view the full source code on my Github.\n\nThanks again for reading and if you have any questions, comments or suggestions feel free to reach out to me on X or Github, happy coding!\n\n**UPDATE**: This code is now available as a npm package: https://www.npmjs.com/package/@asleepace/try\n\n```bash\nnpm i @asleepace/try\n# or\nyarn add @asleepace/try\n# or\nbun i @asleepace/try\n```","src/content/blog/try.md","6635f2985abbd59e",{"html":304,"metadata":305},"\u003Cp>Error handling in software engineering is a bit like paying taxes — \u003Cem>it’s something that we all have to do and something that nobody enjoys doing…\u003C/em>\u003C/p>\n\u003Cp>If you are anything like me, then you are most likely familiar with how tedious and awkward error handling with try / catch statements can feel, especially in languages like Javascript and Typescript. Often times I find myself having to write unwieldy code like the following:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> getUrlFromString\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">urlString\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> URL\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#79B8FF\"> undefined\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> url\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> URL\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#79B8FF\"> undefined\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  try\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    url \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> URL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(urlString)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  } \u003C/span>\u003Cspan style=\"color:#F97583\">catch\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (error) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    console.\u003C/span>\u003Cspan style=\"color:#B392F0\">warn\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`invalid url: ${\u003C/span>\u003Cspan style=\"color:#9ECBFF\">(\u003C/span>\u003Cspan style=\"color:#E1E4E8\">error\u003C/span>\u003Cspan style=\"color:#F97583\"> as\u003C/span>\u003Cspan style=\"color:#B392F0\"> Error\u003C/span>\u003Cspan style=\"color:#9ECBFF\">)?.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">message\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    try\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      url \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> URL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`https://${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">urlString\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    } \u003C/span>\u003Cspan style=\"color:#F97583\">catch\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (error2) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> undefined\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> url\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>And while this might seem like a trivial example and something that could easily be abstracted into smaller utility functions, it might surprise you that I’ve seen numerous examples just like this in corporate production software.\u003C/p>\n\u003Cp>What I do like about this example, it that it demonstrates several key issues with the try / catch pattern, especially relating to Typescript:\u003C/p>\n\u003Cul>\n\u003Cli>values are scoped to their respective blocks\u003C/li>\n\u003Cli>errors are not guaranteed to be of type \u003Ccode>Error\u003C/code>\u003C/li>\n\u003Cli>retry logic can become extremely verbose\u003C/li>\n\u003Cli>it isn’t clear if a function can throw or not\u003C/li>\n\u003C/ul>\n\u003Cp>Along with this since any function can throw from somewhere deep in the call stack, the control flow of the program can become unpredictable and hard to reason about what is happening and where. In fact, let’s take a look at one more example. What do you think this function will return?\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> generateOddNumbers\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">count\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> oddNumbers\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Array\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(count).\u003C/span>\u003Cspan style=\"color:#B392F0\">fill\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  try\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // generate an array of random numbers\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    oddNumbers \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> oddNumbers.\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">_\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">i\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Math.\u003C/span>\u003Cspan style=\"color:#B392F0\">floor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(Math.\u003C/span>\u003Cspan style=\"color:#B392F0\">random\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> i))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // check if they are all odd and return or throw\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (oddNumbers.\u003C/span>\u003Cspan style=\"color:#B392F0\">every\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">num\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> num \u003C/span>\u003Cspan style=\"color:#F97583\">%\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#F97583\"> ===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> oddNumbers\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      throw\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'Invalid sequence'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  } \u003C/span>\u003Cspan style=\"color:#F97583\">catch\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (e) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // handle errors\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    console.\u003C/span>\u003Cspan style=\"color:#B392F0\">warn\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`Error generating numbers: ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">e\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> false\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  } \u003C/span>\u003Cspan style=\"color:#F97583\">finally\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // cleanup resource\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'cleaning up resources...'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    oddNumbers \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> []\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Perhaps you might guess that maybe for a low enough value of count, that it might return an array of only odd numbers once in a while. That would make send right?\u003C/p>\n\u003Cp>Well if you guessed \u003Ccode>undefined\u003C/code> for any number, you would be correct, just imagine the headache if we had multiple nested finally blocks…\u003C/p>\n\u003Ch3 id=\"a-better-way\">A better way?\u003C/h3>\n\u003Cp>While the above examples may seem a but contrived, they highlight some key issues with try/catch based error handling. If you are familiar with other programming languages like Go or Rust, then you are probably already know where I am going with this –– *errors as \u003Cstrong>values*\u003C/strong>.\u003C/p>\n\u003Cp>Instead of throwing errors \u003Cem>willy-nilly\u003C/em> to whoever will catch them, the idea is to treat them as first class citizens and handle as close to the call site as possible. While this article isn’t a deep dive into the errors as values paradigm, a lot of the techniques have been inspired by Rust.\u003C/p>\n\u003Cp>Now let’s start coding a re-usable solution which can help simplify our error handling process. Since this will be in Typescript let’s begin by describing the shape of our data which should either by a generic value \u003Ccode>T\u003C/code> or the concrete \u003Ccode>Error\u003C/code> class, but not both.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> ResultOk\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">undefined\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> ResultError\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">undefined\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">Error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> Result\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> ResultOk\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#B392F0\"> ResultError\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The above types are just tuples with either contain the value \u003Ccode>T | undefined\u003C/code> in the first position and \u003Ccode>undefined | Error\u003C/code> in the second position. The last type represents the union between these two values and will help us with type narrowing later. Next we will create a simple utility to convert our try/catch based errors into result tuples:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> tryCatch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003Cspan style=\"color:#B392F0\">fn\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> T\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#79B8FF\"> never\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Result\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  try\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> value\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> fn\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [value, \u003C/span>\u003Cspan style=\"color:#79B8FF\">undefined\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#B392F0\"> ResultOk\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  } \u003C/span>\u003Cspan style=\"color:#F97583\">catch\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (e) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> error\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> e \u003C/span>\u003Cspan style=\"color:#F97583\">instanceof\u003C/span>\u003Cspan style=\"color:#B392F0\"> Error\u003C/span>\u003Cspan style=\"color:#F97583\"> ?\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> e \u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">String\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(e))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">undefined\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, error] \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#B392F0\"> ResultError\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The \u003Ccode>tryCatch(fn)\u003C/code> utility takes a function to be invoked and wraps it inside a try/catch statement. If the function throws then the exception will be caught and converted to an error if needed, otherwise it will return the value. Since each branch returns a type which is narrower than the \u003Ccode>Result&#x3C;T>\u003C/code> the result tuple is easy to unpack and check for errors.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">url\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> tryCatch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> URL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(maybeUrl))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (error) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> console.\u003C/span>\u003Cspan style=\"color:#B392F0\">warn\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(error.message)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> url.href \u003C/span>\u003Cspan style=\"color:#6A737D\">// type-safe!\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Since \u003Ccode>error\u003C/code> will only be defined when \u003Ccode>[undefined, Error]\u003C/code> and we early return if it is defined, the Typescript type system is able to infer that \u003Ccode>url\u003C/code> must be defined below! Now let’s revisit the same problem I mentioned in the beginning of this article and see how this approach does.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> getUrlFromString\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">urlString\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> URL\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#79B8FF\"> undefined\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [url1, err1] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> tryCatch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> URL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(urlString))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">err1) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> url\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> console.\u003C/span>\u003Cspan style=\"color:#B392F0\">warn\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(err1.message)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [url2, err2] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> tryCatch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> URL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`https://${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">urlString\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">err2) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> url2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> console.\u003C/span>\u003Cspan style=\"color:#B392F0\">warn\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(err2.message)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [url3, err3] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> tryCatch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> URL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`https://${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">urlString\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">).\u003C/span>\u003Cspan style=\"color:#B392F0\">trim\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">err3) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> url3\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> console.\u003C/span>\u003Cspan style=\"color:#B392F0\">warn\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(err3.message)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Just like that our \u003Ccode>getUrlFromString(urlString)\u003C/code> is far more succinct and easy to follow, so much so that we were able to add another case to make the program more robust! The less time we spend fiddling with nested try/catch statements, casting errors and wrangling control flow; the more time we can spend on making programs which crash less!\u003C/p>\n\u003Ch3 id=\"synchronous-vs-asynchronous\">Synchronous vs. Asynchronous\u003C/h3>\n\u003Cp>So far the \u003Ccode>tryCatch\u003C/code> utility works great for synchronous error handling. However, most of the time errors tend to stem from asynchronous operations like \u003Ccode>fetch()\u003C/code> requests and json decoding. Here is where we run into a little issue with the type system…\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> result\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> tryCatch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> JSON\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">parse\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'[1, 2, 3]'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">})\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">typeof\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> result \u003C/span>\u003Cspan style=\"color:#6A737D\">// Result&#x3C;Promise&#x3C;number[]>>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The problem here is that the promise is now inside our result and thus needs to be unpacked before we can call await. However, this also causes another issue as calling await on the result value can throw! Instead what we would like is for the return type to be \u003Ccode>Promise&#x3C;Result&#x3C;number[]>>\u003C/code> like so:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">data\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#B392F0\"> tryCatch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> JSON\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">parse\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'[1, 2, 3]'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">})\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">error) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> data.\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">num\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> num \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>While we \u003Cem>could\u003C/em> just create another utility like \u003Ccode>tryCatchAsync(fn)\u003C/code> that fits these constraints, just look at that beautiful example above, that’s what we \u003Cstrong>want\u003C/strong> –– not that \u003Cem>“we have error values at home nonsense”\u003C/em>.\u003C/p>\n\u003Ch3 id=\"advanced-types\">Advanced Types\u003C/h3>\n\u003Cp>Just like before, let’s start by describing what it is we want with types. We roughly know what the async type should be from above, but how can we translate this to our example? Well the first thing to understand is that async/await is merely just syntactic sugar around promises*.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> example1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#79B8FF\"> Promise\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>((\u003C/span>\u003Cspan style=\"color:#FFAB70\">resolve\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> resolve\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'abc'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> example2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'hello'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> PromiseType\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> typeof\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> example1 \u003C/span>\u003Cspan style=\"color:#6A737D\">// () => Promise&#x3C;string>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> AsyncFnType\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> typeof\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> example1 \u003C/span>\u003Cspan style=\"color:#6A737D\">// () => Promise&#x3C;string>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This means that \u003Cem>theoretically\u003C/em> all we need to do is adjust our \u003Ccode>tryCatch(fn)\u003C/code> to distinguish between \u003Ccode>T\u003C/code> and \u003Ccode>Promise&#x3C;T>\u003C/code>. If we notice that the return type is a \u003Ccode>Promise\u003C/code>, then we can assume the function should be considered async.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> tryCatch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  fn\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Promise\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#B392F0\"> T\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#79B8FF\"> never\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Result\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Promise\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>> \u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#B392F0\"> Result\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Unfortunately, this is where things start getting a bit complicated. If you hover over the result type now you will see the following:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> result\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> tryCatch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(someFunc)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">typeof\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> result \u003C/span>\u003Cspan style=\"color:#6A737D\">// ResultError | ResultOk&#x3C;number[]> | ResultOk&#x3C;Promise&#x3C;number[]>>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The issue is the type system isn’t able to narrow the type simply by placing an await statement in front of the try/catch. This means functions which should be only synchronous are now appearing as potentially promises and vis-versa…\u003C/p>\n\u003Cp>We need to find a way to narrow the type system such that promises only are returned for async functions and not for synchronous ones, while async functions should only return promises and never synchronous results.\u003C/p>\n\u003Cp>I tinkered with this problem for long than I would like to admit, making marginal gains in one area, only at the cost of regressing in others. For a time I even thought that the technology simply didn’t exist yet, until one day I stumbled across the following snippet:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> markdownHtml\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> marked.\u003C/span>\u003Cspan style=\"color:#B392F0\">render\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(markdown, { async: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> })\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>A library that was able to return either sync or async simply by passing an optional argument to the method. This discovery re-ignited my unyielding thirst for a truly isomorphic try/catch helper and sent me into overdrive. Quickly I rushed to the packages Github source code and began trawling through the dense source code, until finally I noticed the secret.\u003C/p>\n\u003Ch3 id=\"function-overloading\">Function Overloading\u003C/h3>\n\u003Cp>Function overloading in Typescript is most likely one of those things that you probably never think about unless you are a library maintainer or deep in the weeds. It allows for defining multiple variants of the same function or method which can take different arguments and return different values, and works by declaring just the function signature above the implementation.\u003C/p>\n\u003Cp>For example imagine we have two similar functions which either add two numbers together or concat two strings. The implementation is nearly identical and it would be nice if we just had two write this logic once. The issue we want to avoid is allowing our new \u003Ccode>add(a, b)\u003C/code> function to add a number and string or vis-versa.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> addString\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> x \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> y\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> addNumber\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> x \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> y\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This is where function overloading comes in handy, we can declare multiple versions of the same function which help narrow the return type when calling directly. The caveat is that the actual implementation must contain the most permissive type which can accommodate any of the values also passed to the overloads.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> add\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> add\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> add\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">typeof\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> x \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'string'\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#F97583\"> typeof\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> y \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'string'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> x \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> y\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">typeof\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> x \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'number'\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#F97583\"> typeof\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> y \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'number'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> x \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> y\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  throw\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Mismatched types!'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">123\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">456\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#6A737D\">// ok!\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'a'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'b'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#6A737D\">// ok!\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">123\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'b'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#6A737D\">// type-error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'a'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">456\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#6A737D\">// type-error\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>As you can see we had to jump through a lot of hoops to even get this simple example working, but I hope it illustrates how function overloading can be used to declare multiple type variants of the same function. The first two function definition are recognized by the type system as overloads, where the last definition handles the actual implementation.\u003C/p>\n\u003Cp>Bringing this back to the \u003Ccode>tryCatch(fn)\u003C/code> helper, let’s see how we can leverage function overloads to help distinguish between the synchronous and asynchronous versions of our function.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> tryCatch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003Cspan style=\"color:#B392F0\">fn\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Promise\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Promise\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Result\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> tryCatch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003Cspan style=\"color:#B392F0\">fn\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> T\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#79B8FF\"> never\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Result\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> tryCatch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  fn\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> T\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#79B8FF\"> never\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> Promise\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Result\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#B392F0\"> Promise\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Result\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The first function overload handles our async case where the \u003Ccode>fn\u003C/code> passed as an argument returns a promise, this version should also return a promise which can be awaited to obtain the result tuple containing \u003Ccode>T\u003C/code> or an \u003Ccode>Error\u003C/code>. The second overload handles our synchronous case where the \u003Ccode>fn\u003C/code> passed as an argument either returns \u003Ccode>T\u003C/code> or \u003Ccode>never\u003C/code> (can throw). Finally the last overload combines all three for our implementation.\u003C/p>\n\u003Cp>Ok, this is starting to look fairly \u003Cem>promising\u003C/em> if I do say so myself… all that is left now is to handle the implementation. The tricky part here is figuring out how to perform a runtime check for an async function and then how to apply our error catching logic to this async function in a synchronous context. Luckily, this is actually what promises are in the first place!\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">try\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> output\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> fn\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (output \u003C/span>\u003Cspan style=\"color:#F97583\">instanceof\u003C/span>\u003Cspan style=\"color:#B392F0\"> Promise\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> output\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      .\u003C/span>\u003Cspan style=\"color:#B392F0\">then\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">value\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [value, \u003C/span>\u003Cspan style=\"color:#79B8FF\">undefined\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#B392F0\"> ResultOk\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      .\u003C/span>\u003Cspan style=\"color:#B392F0\">catch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">undefined\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, error] \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#B392F0\"> ResultError\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [output, \u003C/span>\u003Cspan style=\"color:#79B8FF\">undefined\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#B392F0\"> ResultOk\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">} \u003C/span>\u003Cspan style=\"color:#F97583\">catch\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (e) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> error\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> e \u003C/span>\u003Cspan style=\"color:#F97583\">instanceof\u003C/span>\u003Cspan style=\"color:#B392F0\"> Error\u003C/span>\u003Cspan style=\"color:#F97583\"> ?\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> e \u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">String\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(e))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">undefined\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, error] \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#B392F0\"> ResultError\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The first step is execute the \u003Ccode>fn()\u003C/code> passed as an argument and then check if the return value \u003Ccode>output\u003C/code> is a promise. We can do this using the \u003Ccode>instanceof\u003C/code> operator and if \u003Ccode>true\u003C/code> we can call the \u003Ccode>.then()\u003C/code> and \u003Ccode>.catch()\u003C/code> to extract the value and construct our result tuple! This will then return our desired type \u003Ccode>Promise&#x3C;Result&#x3C;T>>\u003C/code> which can be awaited!\u003C/p>\n\u003Cp>We are almost there now, but as some of you might have already noticed, we haven’t properly coerced the async \u003Ccode>error\u003C/code> value into the \u003Ccode>Error\u003C/code> class. Let’s extract the logic we used below in the original version into a separate helper which can be used by bother versions.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#B392F0\"> toError\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">e\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> unknown\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Error\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  e \u003C/span>\u003Cspan style=\"color:#F97583\">instanceof\u003C/span>\u003Cspan style=\"color:#B392F0\"> Error\u003C/span>\u003Cspan style=\"color:#F97583\"> ?\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> e \u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">String\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(e))\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>It’s not perfect, but it gets the job done for now. Basically just checks if the error value is already an instance of the \u003Ccode>Error\u003C/code> class and if so does nothing, otherwise converts the value to a string which is then used to instantiate an \u003Ccode>Error\u003C/code>. Now tying this altogether we should have something that looks like the following:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// our result types...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> ResultOk\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">undefined\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> ResultError\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">undefined\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">Error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> Result\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> ResultOk\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#B392F0\"> ResultError\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// our error handling utility...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#B392F0\"> toError\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">e\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> unknown\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Error\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  e \u003C/span>\u003Cspan style=\"color:#F97583\">instanceof\u003C/span>\u003Cspan style=\"color:#B392F0\"> Error\u003C/span>\u003Cspan style=\"color:#F97583\"> ?\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> e \u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">String\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(e))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// our try/catch overloads and implementation...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> tryCatch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003Cspan style=\"color:#B392F0\">fn\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> Promise\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Promise\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Result\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> tryCatch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003Cspan style=\"color:#B392F0\">fn\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> T\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#79B8FF\"> never\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Result\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> tryCatch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  fn\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> T\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#79B8FF\"> never\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> Promise\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Result\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#B392F0\"> Promise\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Result\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  try\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> output\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> fn\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (output \u003C/span>\u003Cspan style=\"color:#F97583\">instanceof\u003C/span>\u003Cspan style=\"color:#B392F0\"> Promise\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> output\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">then\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">value\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [value, \u003C/span>\u003Cspan style=\"color:#79B8FF\">undefined\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#B392F0\"> ResultOk\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">catch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">undefined\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">toError\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(error)] \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#B392F0\"> ResultError\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [output, \u003C/span>\u003Cspan style=\"color:#79B8FF\">undefined\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#B392F0\"> ResultOk\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  } \u003C/span>\u003Cspan style=\"color:#F97583\">catch\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (e) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">undefined\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">toError\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(e)] \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#B392F0\"> ResultError\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Now let’s go ahead and test this implementation with a couple different variations to ensure our types are working properly and the code does what we expect it to do for both synchronous and asynchronous operations! Below I’ve added test cases for synchronous, asynchronous and promise based arguments. For each different variant I’ve included one that throws and one that returns successfully.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> result0\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> tryCatch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 123\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> result1\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> tryCatch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (Math.\u003C/span>\u003Cspan style=\"color:#B392F0\">random\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1.0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">throw\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'thrown sync'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 123\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> result2\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#B392F0\"> tryCatch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'abc'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> result3\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#B392F0\"> tryCatch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    throw\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'thrown async'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> result4\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#B392F0\"> tryCatch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#79B8FF\"> Promise\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">boolean\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>((\u003C/span>\u003Cspan style=\"color:#FFAB70\">res\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> res\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> result5\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#B392F0\"> tryCatch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#79B8FF\"> Promise\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">_\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">reject\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> reject\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'thrown promise'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // output the all the results once finished...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> outputs\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [result0, result1, result2, result3, result4, result5]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  outputs.\u003C/span>\u003Cspan style=\"color:#B392F0\">forEach\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">info\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">i\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`Test #${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">i\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}: `\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, info))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Looking at this code in a code editor shows that each of the results indeed have the desired return type, please note that some additional type casting needs to be done for the promises. Running this code also outputs what we expect as well:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"txt\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>[LOG] Test #0:  [123, undefined]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>[LOG] Test #1:  [undefined, thrown sync]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>[LOG] Test #2:  [\"abc\", undefined]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>[LOG] Test #3:  [undefined, thrown async]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>[LOG] Test #4:  [true, undefined]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>[LOG] Test #5:  [undefined, thrown promise]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The result types are looking good and the implementation is working as expected! Lastly, let’s try adding some edge-cases to make sure we haven’t missed anything. Let’s test the following:\u003C/p>\n\u003Col>\n\u003Cli>What happens if \u003Ccode>fn()\u003C/code> doesn’t return or throw anything\u003C/li>\n\u003Cli>What happens if \u003Ccode>fn()\u003C/code> returns an \u003Ccode>Error\u003C/code> instead of throwing\u003C/li>\n\u003Cli>What happens if \u003Ccode>fn()\u003C/code> never returns and only throws\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> result6\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> tryCatch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {})\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> result7\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> tryCatch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'error as value'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> result8\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> tryCatch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  throw\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'123'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">})\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The first two edge-cases appear to work as we might expect, the first one returns \u003Ccode>Result&#x3C;void>\u003C/code> and the second returns \u003Ccode>Result&#x3C;Error>\u003C/code>, which is reasonable as our function is only concerned with catching errors, but not if the value they return is an error \u003Cem>per se\u003C/em>. However, for \u003Ccode>result8\u003C/code> we can see something funky…\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> result8\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Promise\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Result\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">unknown\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Oh no, what is happening here? Well since this function never returns a value, this signature for \u003Ccode>fn\u003C/code> looks like the following \u003Ccode>fn: () => never\u003C/code>, which can’t easily be matched by our current function overloads. No worries, the fix is quite simple as we just need to add the following overload:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> tryCatch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003Cspan style=\"color:#B392F0\">fn\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#79B8FF\"> never\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> ResultError\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Since the function \u003Ccode>never\u003C/code> returns, this means it must throw and thus we can specify the return type to always be the sync \u003Ccode>ResultError\u003C/code>. Thankfully, we only need to add this for sync version as the async version will still always return a promise first.\u003C/p>\n\u003Cp>Finally, after the all the things we’ve tried, we were able to catch a break and create the fabled \u003Cem>isomorphic\u003C/em> try/catch utility. Well, at least that’s what I call it anyways. Isomorphic in this context meaning:\u003C/p>\n\u003Cblockquote>\n\u003Cp>An isomorphic function, or isomorphism, is a bijection (one-to-one and onto mapping) between two sets or structures that preserves the relevant properties or operations of those structures. In simpler terms, it’s a way of showing that two things are essentially the same, even if they look different, by establishing a perfect match between their elements while maintaining their underlying relationships.\u003C/p>\n\u003C/blockquote>\n\u003Cp>Which I found as a fitting way to describe the relationship between the try/catch utility behaving the same in both synchronous and asynchronous contexts. What’s even more fitting is that usually function overloading is meant for polymorphism…\u003C/p>\n\u003Cimg src=\"/images/result-tuple.jpg\" alt=\"Isomorphic Try/Catch Error Handling\">\n\u003Cp>Anyways, I hope you enjoyed this article and learned something along the way. The next step is expand on the actual result type, with special methods like \u003Ccode>.unwrap()\u003C/code> and \u003Ccode>or()\u003C/code>, but I will save that for the next article.\u003C/p>\n\u003Cp>You can play around with a live example of the code here on the \u003Ca href=\"https://www.typescriptlang.org/play/?target=99#code/FAehAICUFMGcFcA2AXcA3Aho+0C00AnAgewN2XgAdFpxkBPSuYBpqOJZAeQGsAeACoA+cAF5wAbQEAacPAB2AE2gAzAJbzoigLotGtGAhQBRIqTGSFy9ZsWzTJArtYGOKQSPGHOvD+AA+7EbIDqTAoBChBOAAxsTyaISwavFyyGqIagzAcfKwqMjEURYAFNAAXHLyPPLEAO7yAJSVxaIitBr5GPIx0MQq4MUA-OC0lZp1g2YEJQDKyAQaAOZljY3hYOAAYgox6anEiQSIxBiKsOAAZOBqALbU0LfQ8sgY+-IAdF-AKrvvdAR6ABhN4xAAWHhKKnklRKjTEIk0R2aQU4UR+fxS8gBwNBEOEUJh4DhCPAAAUSLc1LBoB4URTiFSaXxvO5hEIMT1-gtcchwZDobD4W1wAIAuAkYQUazkB5OXssTiQXz8UJCULSWLApLooEGUzacJpW5ZcJxfrqbSZR4RABvYDgR048D2p1u2LxfLgYjwZCUX0WaFwh3ux1qAYlH1+gOdV49PoDC00+Gu0PugjQCgEbFR-3IENptMfZBg54lEqYbDQYUiCSVnCyKyqDRabTgDAXGW+I0Fwvuj4xPHlwiOGuWJTN2yyQpRMrTRptjuokzz3tugC+a6dGaz2Ikud9jYnNlb7c7Ju7HI3sSH1ZdW8dO-g2fH1hbdjoRWmq0X5+C6I3YBNwiUU4FQQcaVgcpgA7egenAX4uUVW4MA0ElU0dXJYGIGgBxoDAZnWN0sNQDNggABgsHllXBcsxwARgAJgAZiIp0SPAMjOHoqjARosE6NJDD3XDYkAFk3jBD4CG6RRGRJPhwHIj4AFZ4RLEhJgmKZHBKAByDT6mxWA4JiPS2NDJ8XyY5je3XCyPTyUiTUYiwMDqVCCj4odYPgkkRT0jAACMzIcjiuJQZi3I8rIlR8ky-LHYS3UMrToEmWcDLBTTsV80KH3Aeze3Ck0ABZos8uKVUEkVtKTWkguIHDoG6NUSjIscyJKBYcDWMLPWc4IVIq2LqKHAr-MRdLyUpS0+B1NqAH1ZAzAAraA9k66B1r2fTUuxShZppcyHP6pzOJNAA2XjeVoyaXSK4iBou4IAHYbv4mqpoy78ACIR3MJd62gX61mK56IuQAAOD6h3u5KnVSiVptnX6bNBuz1nB86D2QC5xAkSHyJWk16JJ4JGPJzhmKplBStp5AVIZy6Gdehmod0N1cdgD4VFIYwMDujQ+dkNQxyw5qPhOFYAAMBDA8AAGIABJbTUddKhl0X5D5sHgM2AAReIDIQ0glkzT8b0QRA6DBakAEJgBQtDGiAA\">Typescript playground\u003C/a> or view the full source code on my Github.\u003C/p>\n\u003Cp>Thanks again for reading and if you have any questions, comments or suggestions feel free to reach out to me on X or Github, happy coding!\u003C/p>\n\u003Cp>\u003Cstrong>UPDATE\u003C/strong>: This code is now available as a npm package: \u003Ca href=\"https://www.npmjs.com/package/@asleepace/try\">https://www.npmjs.com/package/@asleepace/try\u003C/a>\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> i\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> @asleepace/try\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># or\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">yarn\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> add\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> @asleepace/try\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># or\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">bun\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> i\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> @asleepace/try\u003C/span>\u003C/span>\u003C/code>\u003C/pre>",{"headings":306,"localImagePaths":319,"remoteImagePaths":320,"frontmatter":321,"imagePaths":323},[307,310,313,316],{"depth":49,"slug":308,"text":309},"a-better-way","A better way?",{"depth":49,"slug":311,"text":312},"synchronous-vs-asynchronous","Synchronous vs. Asynchronous",{"depth":49,"slug":314,"text":315},"advanced-types","Advanced Types",{"depth":49,"slug":317,"text":318},"function-overloading","Function Overloading",[],[],{"title":296,"description":297,"pubDate":322,"heroImage":299,"slug":293},"April 26 2025",[],"ssr-with-bun-elysia-react",{"id":324,"data":326,"body":331,"filePath":332,"digest":333,"rendered":334},{"title":327,"description":328,"pubDate":329,"heroImage":330},"SSR with Bun, Elysia & React","How to build a simple website using React, Bun and Elysia with server-side rendering in 2023.",["Date","2023-09-13T07:00:00.000Z"],"/images/bun-elysia-react-banner.png","This article will show you how to create a simple website using [Bun](https://bun.sh/docs/installation), [Elysia](https://elysiajs.com/) and [React](https://react.dev/) with support for server-side rendering.\n\n- **Bun** the JS/TS bundler, runtime & package manager\n- **Elysia** a framework for building performant web applications\n- **React** a JavaScript library for building user interfaces\n\nOriginal source code here on [GitHub](https://github.com/asleepace/bun-elysia-react-srr-example).\n\n### Pre-requisites\n\nBefore we begin make sure you have **Bun** installed on your machine\n\n```bash\ncurl -fsSL https://bun.sh/install | bash # for macOS, Linux, and WSL\n```\n\n[Bun installation documentation](https://bun.sh/docs/installation)\n\nNext let's initialize a new project with **Elysia** by running the following command in your terminal\n\n```bash\nbun create elysia your-project-name # edit this\ncd your-project-name\nbun run dev\n```\n\n[Elysia installation documentation](https://elysiajs.com/quick-start.html)\n\nYou should see the following in your terminal\n\n> 🦊 Elysia is running at localhost:3000\n\nAnd the following when you visit [http://localhost:3000](http://localhost:3000)\n\n> Hello, Elysia!\n\n### Project Structure\n\nNext lets go ahead and define two more folders in our project which will hold our static files and react code.\n\n```bash\nmkdir public\nmkdir src/react\n```\n\nYou project structure should now look like this\n\n```bash\n├── ./your-project-name\n│   ├── node_modules\n│   ├── public            # client-side static files\n│   ├── src\n│   │   ├── react         # react code\n│   │   └── index.ts      # server-side entry point\n│   ├── .gitignore\n│   ├── bun.lock.b\n|   ├── package.json\n│   ├── README.md\n│   ├── tsconfig.json\n│   └── yarn.lock\n```\n\nWe want to be able to return static files from our server, so lets go ahead and add the following **Elysia** static plugin.\n\n```bash\nbun add @elysiajs/static\n```\n\nThis will allow the client to request static files from our server such as images, css, js, etc. Now replace the contents of your `src/index.ts` file with\n\n```ts\n// src/index.ts\nimport { Elysia } from 'elysia'\nimport { staticPlugin } from '@elysiajs/static'\n\nconst app = new Elysia()\n  .use(staticPlugin())\n  .get('/', () => {\n    return 'Our first route'\n  })\n  .listen(3000)\n```\n\nThe static plugin default folder is public, and registered with `/public` prefix. [Click here to learn more](https://elysiajs.com/plugins/static.html)\n\n## React Setup\n\nThe next thing we want to do is be able to render our React code on the server, so let's go ahead and add the following dependencies\n\n```bash\nbun add react react-dom  # article is using 18.2.0\n```\n\nNext let's create our React application by adding a file called `App.tsx` in our `./src/react/` folder with the following code\n\n```tsx\n// src/react/App.tsx\nimport React, { useState } from 'react'\n\nexport default function App() {\n  const [count, setCount] = useState(0)\n  return (\n    \u003Chtml>\n      \u003Chead>\n        \u003Cmeta charSet=\"utf-8\" />\n        \u003Ctitle>Bun, Elysia & React\u003C/title>\n        \u003Cmeta name=\"description\" content=\"Bun, Elysia & React\" />\n        \u003Cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n      \u003C/head>\n      \u003Cbody>\n        \u003Ch1>Counter {count}\u003C/h1>\n        \u003Cbutton onClick={() => setCount(count + 1)}>Increment\u003C/button>\n      \u003C/body>\n    \u003C/html>\n  )\n}\n```\n\n[React server-side rendering documentation](https://react.dev/reference/react-dom/server/renderToReadableStream)\n\nNow back in our `./src/index.ts` let's import this component by adding the following line\n\n```ts\n// src/index.ts\nimport App from './react/App'\n```\n\nDon't worry if you see a type error, we will fix in the next section.\n\n## Fixing Type Errors\n\nAt this point you should see a couple type errors since we haven't specified how our project should handle JSX and React types. To fix this add the following dev dependencies\n\n```bash\nbun add -d @types/react @types/react-dom\n```\n\nNext let's specify how the project should handle **JSX** by opening our `./tsconfig.json` and setting the following options\n\n```json\n{\n  \"jsx\": \"react\",\n  \"jsxFactory\": \"React.createElement\",\n  \"jsxFragmentFactory\": \"React.Fragment\"\n}\n```\n\nFor more information refer to the [Bun JSX documentation](https://bun.sh/docs/runtime/jsx). The type errors should now be gone, but sometimes you need to restart your IDE for the changes to take effect; _looking at you VSCode_...\n\n## React SSR\n\nNow back in our `./src/index.ts` let's go ahead and render our React component by adding the following\n\n```ts\n// src/index.ts\nimport { Elysia } from 'elysia'\nimport { staticPlugin } from '@elysiajs/static'\nimport { renderToReadableStream } from 'react-dom/server'\nimport { createElement } from 'react'\nimport App from './react/App'\n\nconst app = new Elysia()\n  .use(staticPlugin())\n  .get('/', async () => {\n    // create our react App component\n    const app = createElement(App)\n\n    // render the app component to a readable stream\n    const stream = await renderToReadableStream(app, {\n      bootstrapScripts: ['/public/index.js'],\n    })\n\n    // output the stream as the response\n    return new Response(stream, {\n      headers: { 'Content-Type': 'text/html' },\n    })\n  })\n  .listen(3000)\n```\n\nMake sure your local dev server is still running if you closed your IDE earlier by running the following from your project root\n\n```bash\nbun run dev\n```\n\nThen open [http://localhost:3000](http://localhost:3000) in your browser and you should see the following\n\n\u003Cimg src=\"/images/ssr-example.png\" style=\"box-shadow: 0px 1px 5px rgba(0,0,0,0.1);\" alt=\"React SSR\" width=\"100%\" />\n\nHowever, you may notice that pressing the button doesn't increment the counter. This is because we haven't added any client-side code yet. Let's go ahead and do that now. Create a new file called `index.tsx` in your `./react/` folder with the following code\n\n```tsx\n// src/react/index.tsx\n// Make sure to include the following two lines:\n/// \u003Creference lib=\"dom\" />\n/// \u003Creference lib=\"dom.iterable\" />\nimport React from 'react'\nimport { hydrateRoot } from 'react-dom/client'\nimport App from './App.js'\n\nhydrateRoot(document, \u003CApp />)\n```\n\nNormally this is where we would call `createRoot`, but since the root will be created on the server, all we need to do is hydrate the client after the initial load. This will attach event listeners to the server-generated HTML and make it interactive.\n\n[React Hydrate Documentation](https://react.dev/reference/react-dom/client/hydrateRoot)\n\n```ts\n/// \u003Creference lib=\"dom\" />\n/// \u003Creference lib=\"dom.iterable\" />\n```\n\nNote these two lines above are not comments, but rather [Triple-Slash Directives](https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html). These are used to tell the TypeScript compiler how to handle certain files. In this case, we are telling the compiler to include the DOM types in our project. This is necessary because the `hydrateRoot` function requires the DOM types to be present (i.e. `document`).\n\nIf you wish to access DOM elements (`window`, `document`, etc.) in another file just add these directives at the top of the file.\n\n[How to add DOM types in Bun](https://stackoverflow.com/a/75726039/4326715)\n\n## Bundle Client JS\n\nWe are almost there! The last step is to bundle our `react` code which will be loaded by the client. Luckily **Bun** has a built-in bundler which we can use to bundle our client-side code. We could do this via the command line or as a script in our `package.json`, but for this example we will do it programmatically in our `./src/index.ts` file, just add the following at the top of the file\n\n```ts\n// src/index.ts\nawait Bun.build({\n  entrypoints: ['./src/react/index.tsx'],\n  outdir: './public',\n})\n```\n\n\u003Cdiv style=\"text-align: center;\">\u003Csub>That's right top level await!\u003C/sub>\u003C/div>\n\nNow our **React** code will be automatically bundled each time we start our server! You can verify this by checking if the `./public/index.js` file exists. Make sure that this file path matches the `bootstrapScripts` option in your `./src/index.ts` file.\n\n```ts\n// Make sure the bootstrapScripts matches the output\n// file path in your ./public folder\nconst stream = await renderToReadableStream(app, {\n  bootstrapScripts: ['/public/index.js'],\n})\n```\n\nNow open [http://localhost:3000](http://localhost:3000) in your browser, the counter should now be working!\n\n## Conclusion\n\nCongratulations you have just created a simple website using Bun, Elysia and React with support for server-side rendering!\n\nIf you have any additional questions feel free to reach out to me on [Twitter](https://twitter.com/asleepace) or dropping me an email at colin@asleepace.com :)\n\n**Next Recommended Reading**\n\n- [React Readable Streams](https://react.dev/reference/react/Suspense)\n- [React Suspense](https://react.dev/reference/react/Suspense)\n\n## Helpful Resources\n\nThe following links are helpful resources for learning more about the technologies used in this project:\n\n- [How to server static files with Elysia](https://elysiajs.com/plugins/static.html)\n- [How to create a simple website with Elysia](https://elysiajs.com/quick-start.html)\n- [How to configure Bun with DOM types](https://stackoverflow.com/a/75726039/4326715)\n- [How to configure Bun with JSX documentation](https://bun.sh/docs/runtime/jsx)\n- [How to bundle assets with Bun documentation](https://bun.sh/docs/bundler)\n- [How to render react on the server](https://react.dev/reference/react-dom/server/renderToReadableStream)\n\nIf you have any additional questions feel free to reach out to me on [Twitter](https://twitter.com/asleepace) or dropping me an [email](mailto:colin@asleepace.com).\n\n## TL;DR\n\nHere is the final code from the article, you can also view this project on [GitHub](https://github.com/asleepace/bun-elysia-react-srr-example).\n\n#### Project Structure\n\n```bash\n├── ./your-project-name\n│   ├── node_modules\n│   ├── public              # client-side static files\n│   │   └── index.js        # generated client bundle\n│   ├── src\n│   │   ├── react\n│   │   │   ├── App.tsx     # react application\n│   │   │   └── index.tsx   # client-side entry point\n│   │   └── index.ts        # server-side entry point\n│   ├── bun.lock.b\n│   ├── package.json\n│   ├── tsconfig.json\n│   └── yarn.lock\n```\n\n#### **src/index.ts**\n\n```ts\n// src/index.ts\nimport { Elysia } from 'elysia'\nimport { staticPlugin } from '@elysiajs/static'\nimport { renderToReadableStream } from 'react-dom/server'\nimport { createElement } from 'react'\nimport App from './react/App'\n\n// bundle client side react-code\nawait Bun.build({\n  entrypoints: ['./src/react/index.tsx'],\n  outdir: './public',\n})\n\n// start a new Elysia server on port 3000\nconst app = new Elysia()\n  .use(staticPlugin())\n  .get('/', async () => {\n    // create our react App component\n    const app = createElement(App)\n\n    // render the app component to a readable stream\n    const stream = await renderToReadableStream(app, {\n      bootstrapScripts: ['/public/index.js'],\n    })\n\n    // output the stream as the response\n    return new Response(stream, {\n      headers: { 'Content-Type': 'text/html' },\n    })\n  })\n  .listen(3000)\n```\n\n#### src/react/App.tsx\n\n```tsx\n// src/react/App.tsx\nimport React, { useState } from 'react'\n\nexport default function App() {\n  const [count, setCount] = useState(0)\n  return (\n    \u003Chtml>\n      \u003Chead>\n        \u003Cmeta charSet=\"utf-8\" />\n        \u003Ctitle>Bun, Elysia & React\u003C/title>\n        \u003Cmeta name=\"description\" content=\"Bun, Elysia & React\" />\n        \u003Cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n      \u003C/head>\n      \u003Cbody>\n        \u003Ch1>Counter {count}\u003C/h1>\n        \u003Cbutton onClick={() => setCount(count + 1)}>Increment\u003C/button>\n      \u003C/body>\n    \u003C/html>\n  )\n}\n```\n\n#### src/react/index.tsx\n\n```tsx\n/// \u003Creference lib=\"dom\" />\n/// \u003Creference lib=\"dom.iterable\" />\n\nimport React from 'react'\nimport { hydrateRoot } from 'react-dom/client'\nimport App from './App.js'\n\nhydrateRoot(document, \u003CApp />)\n```\n\n#### tsconfig.json\n\n```json\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2021\",\n    \"jsx\": \"react\",\n    \"jsxFactory\": \"React.createElement\",\n    \"jsxFragmentFactory\": \"React.Fragment\",\n    \"module\": \"ES2022\",\n    \"moduleResolution\": \"node\",\n    \"types\": [\"bun-types\"],\n    \"esModuleInterop\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"strict\": true,\n    \"skipLibCheck\": true\n  }\n}\n```\n\n### package.json\n\n```json\n{\n  \"name\": \"bun-elysia-react-ssr\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"dev\": \"bun run --watch src/index.ts\"\n  },\n  \"dependencies\": {\n    \"@elysiajs/static\": \"^0.6.0\",\n    \"elysia\": \"latest\",\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/react\": \"^18.2.21\",\n    \"@types/react-dom\": \"^18.2.7\",\n    \"bun-types\": \"latest\"\n  },\n  \"module\": \"src/index.js\"\n}\n```\n\nArticle and [source code](https://github.com/asleepace/bun-elysia-react-srr-example) by [Colin Teahan](https://www.linkedin.com/in/colin-teahan/?lipi=urn%3Ali%3Apage%3Ad_flagship3_feed%3BeM7QoEWiSIOwjiKXlYu0VA%3D%3D)\n\n\u003Ch1>🥳\u003C/h1>","src/content/blog/bun-elysia-react-ssr.md","0a024d871e2db97a",{"html":335,"metadata":336},"\u003Cp>This article will show you how to create a simple website using \u003Ca href=\"https://bun.sh/docs/installation\">Bun\u003C/a>, \u003Ca href=\"https://elysiajs.com/\">Elysia\u003C/a> and \u003Ca href=\"https://react.dev/\">React\u003C/a> with support for server-side rendering.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Bun\u003C/strong> the JS/TS bundler, runtime &#x26; package manager\u003C/li>\n\u003Cli>\u003Cstrong>Elysia\u003C/strong> a framework for building performant web applications\u003C/li>\n\u003Cli>\u003Cstrong>React\u003C/strong> a JavaScript library for building user interfaces\u003C/li>\n\u003C/ul>\n\u003Cp>Original source code here on \u003Ca href=\"https://github.com/asleepace/bun-elysia-react-srr-example\">GitHub\u003C/a>.\u003C/p>\n\u003Ch3 id=\"pre-requisites\">Pre-requisites\u003C/h3>\n\u003Cp>Before we begin make sure you have \u003Cstrong>Bun\u003C/strong> installed on your machine\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">curl\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -fsSL\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> https://bun.sh/install\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> bash\u003C/span>\u003Cspan style=\"color:#6A737D\"> # for macOS, Linux, and WSL\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Ca href=\"https://bun.sh/docs/installation\">Bun installation documentation\u003C/a>\u003C/p>\n\u003Cp>Next let’s initialize a new project with \u003Cstrong>Elysia\u003C/strong> by running the following command in your terminal\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">bun\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> create\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> elysia\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> your-project-name\u003C/span>\u003Cspan style=\"color:#6A737D\"> # edit this\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">cd\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> your-project-name\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">bun\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> run\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> dev\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Ca href=\"https://elysiajs.com/quick-start.html\">Elysia installation documentation\u003C/a>\u003C/p>\n\u003Cp>You should see the following in your terminal\u003C/p>\n\u003Cblockquote>\n\u003Cp>🦊 Elysia is running at localhost:3000\u003C/p>\n\u003C/blockquote>\n\u003Cp>And the following when you visit \u003Ca href=\"http://localhost:3000\">http://localhost:3000\u003C/a>\u003C/p>\n\u003Cblockquote>\n\u003Cp>Hello, Elysia!\u003C/p>\n\u003C/blockquote>\n\u003Ch3 id=\"project-structure\">Project Structure\u003C/h3>\n\u003Cp>Next lets go ahead and define two more folders in our project which will hold our static files and react code.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">mkdir\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> public\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">mkdir\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> src/react\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>You project structure should now look like this\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> ./your-project-name\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">│\u003C/span>\u003Cspan style=\"color:#9ECBFF\">   ├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> node_modules\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">│\u003C/span>\u003Cspan style=\"color:#9ECBFF\">   ├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> public\u003C/span>\u003Cspan style=\"color:#6A737D\">            # client-side static files\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">│\u003C/span>\u003Cspan style=\"color:#9ECBFF\">   ├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> src\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">│\u003C/span>\u003Cspan style=\"color:#9ECBFF\">   │\u003C/span>\u003Cspan style=\"color:#9ECBFF\">   ├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> react\u003C/span>\u003Cspan style=\"color:#6A737D\">         # react code\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">│\u003C/span>\u003Cspan style=\"color:#9ECBFF\">   │\u003C/span>\u003Cspan style=\"color:#9ECBFF\">   └──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> index.ts\u003C/span>\u003Cspan style=\"color:#6A737D\">      # server-side entry point\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">│\u003C/span>\u003Cspan style=\"color:#9ECBFF\">   ├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> .gitignore\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">│\u003C/span>\u003Cspan style=\"color:#9ECBFF\">   ├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> bun.lock.b\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#B392F0\">   ├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> package.json\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">│\u003C/span>\u003Cspan style=\"color:#9ECBFF\">   ├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> README.md\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">│\u003C/span>\u003Cspan style=\"color:#9ECBFF\">   ├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> tsconfig.json\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">│\u003C/span>\u003Cspan style=\"color:#9ECBFF\">   └──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> yarn.lock\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>We want to be able to return static files from our server, so lets go ahead and add the following \u003Cstrong>Elysia\u003C/strong> static plugin.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">bun\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> add\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> @elysiajs/static\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This will allow the client to request static files from our server such as images, css, js, etc. Now replace the contents of your \u003Ccode>src/index.ts\u003C/code> file with\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// src/index.ts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { Elysia } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'elysia'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { staticPlugin } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '@elysiajs/static'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> app\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Elysia\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  .\u003C/span>\u003Cspan style=\"color:#B392F0\">use\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">staticPlugin\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  .\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'/'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'Our first route'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  .\u003C/span>\u003Cspan style=\"color:#B392F0\">listen\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">3000\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The static plugin default folder is public, and registered with \u003Ccode>/public\u003C/code> prefix. \u003Ca href=\"https://elysiajs.com/plugins/static.html\">Click here to learn more\u003C/a>\u003C/p>\n\u003Ch2 id=\"react-setup\">React Setup\u003C/h2>\n\u003Cp>The next thing we want to do is be able to render our React code on the server, so let’s go ahead and add the following dependencies\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">bun\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> add\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> react\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> react-dom\u003C/span>\u003Cspan style=\"color:#6A737D\">  # article is using 18.2.0\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Next let’s create our React application by adding a file called \u003Ccode>App.tsx\u003C/code> in our \u003Ccode>./src/react/\u003C/code> folder with the following code\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// src/react/App.tsx\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> React, { useState } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'react'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> default\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> App\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">setCount\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> useState\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">html\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">head\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">meta\u003C/span>\u003Cspan style=\"color:#B392F0\"> charSet\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"utf-8\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">title\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>Bun, Elysia &#x26; React&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">title\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">meta\u003C/span>\u003Cspan style=\"color:#B392F0\"> name\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"description\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> content\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Bun, Elysia &#x26; React\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">meta\u003C/span>\u003Cspan style=\"color:#B392F0\"> name\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"viewport\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> content\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"width=device-width, initial-scale=1\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">head\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">body\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">h1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>Counter {count}&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">h1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#B392F0\"> onClick\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> setCount\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(count \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)}>Increment&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">body\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">html\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Ca href=\"https://react.dev/reference/react-dom/server/renderToReadableStream\">React server-side rendering documentation\u003C/a>\u003C/p>\n\u003Cp>Now back in our \u003Ccode>./src/index.ts\u003C/code> let’s import this component by adding the following line\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// src/index.ts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> App \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> './react/App'\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Don’t worry if you see a type error, we will fix in the next section.\u003C/p>\n\u003Ch2 id=\"fixing-type-errors\">Fixing Type Errors\u003C/h2>\n\u003Cp>At this point you should see a couple type errors since we haven’t specified how our project should handle JSX and React types. To fix this add the following dev dependencies\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">bun\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> add\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -d\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> @types/react\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> @types/react-dom\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Next let’s specify how the project should handle \u003Cstrong>JSX\u003C/strong> by opening our \u003Ccode>./tsconfig.json\u003C/code> and setting the following options\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"jsx\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"react\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"jsxFactory\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"React.createElement\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"jsxFragmentFactory\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"React.Fragment\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>For more information refer to the \u003Ca href=\"https://bun.sh/docs/runtime/jsx\">Bun JSX documentation\u003C/a>. The type errors should now be gone, but sometimes you need to restart your IDE for the changes to take effect; \u003Cem>looking at you VSCode\u003C/em>…\u003C/p>\n\u003Ch2 id=\"react-ssr\">React SSR\u003C/h2>\n\u003Cp>Now back in our \u003Ccode>./src/index.ts\u003C/code> let’s go ahead and render our React component by adding the following\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// src/index.ts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { Elysia } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'elysia'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { staticPlugin } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '@elysiajs/static'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { renderToReadableStream } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'react-dom/server'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { createElement } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'react'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> App \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> './react/App'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> app\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Elysia\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  .\u003C/span>\u003Cspan style=\"color:#B392F0\">use\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">staticPlugin\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  .\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'/'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // create our react App component\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> app\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> createElement\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(App)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // render the app component to a readable stream\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> stream\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#B392F0\"> renderToReadableStream\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(app, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      bootstrapScripts: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'/public/index.js'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // output the stream as the response\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Response\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(stream, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      headers: { \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Content-Type'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'text/html'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  .\u003C/span>\u003Cspan style=\"color:#B392F0\">listen\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">3000\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Make sure your local dev server is still running if you closed your IDE earlier by running the following from your project root\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">bun\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> run\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> dev\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Then open \u003Ca href=\"http://localhost:3000\">http://localhost:3000\u003C/a> in your browser and you should see the following\u003C/p>\n\u003Cimg src=\"/images/ssr-example.png\" style=\"box-shadow: 0px 1px 5px rgba(0,0,0,0.1);\" alt=\"React SSR\" width=\"100%\">\n\u003Cp>However, you may notice that pressing the button doesn’t increment the counter. This is because we haven’t added any client-side code yet. Let’s go ahead and do that now. Create a new file called \u003Ccode>index.tsx\u003C/code> in your \u003Ccode>./react/\u003C/code> folder with the following code\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// src/react/index.tsx\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Make sure to include the following two lines:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">/// &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">reference\u003C/span>\u003Cspan style=\"color:#B392F0\"> lib\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"dom\"\u003C/span>\u003Cspan style=\"color:#6A737D\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">/// &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">reference\u003C/span>\u003Cspan style=\"color:#B392F0\"> lib\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"dom.iterable\"\u003C/span>\u003Cspan style=\"color:#6A737D\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> React \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'react'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { hydrateRoot } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'react-dom/client'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> App \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> './App.js'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">hydrateRoot\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(document, &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">App\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Normally this is where we would call \u003Ccode>createRoot\u003C/code>, but since the root will be created on the server, all we need to do is hydrate the client after the initial load. This will attach event listeners to the server-generated HTML and make it interactive.\u003C/p>\n\u003Cp>\u003Ca href=\"https://react.dev/reference/react-dom/client/hydrateRoot\">React Hydrate Documentation\u003C/a>\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">/// &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">reference\u003C/span>\u003Cspan style=\"color:#B392F0\"> lib\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"dom\"\u003C/span>\u003Cspan style=\"color:#6A737D\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">/// &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">reference\u003C/span>\u003Cspan style=\"color:#B392F0\"> lib\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"dom.iterable\"\u003C/span>\u003Cspan style=\"color:#6A737D\"> />\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Note these two lines above are not comments, but rather \u003Ca href=\"https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html\">Triple-Slash Directives\u003C/a>. These are used to tell the TypeScript compiler how to handle certain files. In this case, we are telling the compiler to include the DOM types in our project. This is necessary because the \u003Ccode>hydrateRoot\u003C/code> function requires the DOM types to be present (i.e. \u003Ccode>document\u003C/code>).\u003C/p>\n\u003Cp>If you wish to access DOM elements (\u003Ccode>window\u003C/code>, \u003Ccode>document\u003C/code>, etc.) in another file just add these directives at the top of the file.\u003C/p>\n\u003Cp>\u003Ca href=\"https://stackoverflow.com/a/75726039/4326715\">How to add DOM types in Bun\u003C/a>\u003C/p>\n\u003Ch2 id=\"bundle-client-js\">Bundle Client JS\u003C/h2>\n\u003Cp>We are almost there! The last step is to bundle our \u003Ccode>react\u003C/code> code which will be loaded by the client. Luckily \u003Cstrong>Bun\u003C/strong> has a built-in bundler which we can use to bundle our client-side code. We could do this via the command line or as a script in our \u003Ccode>package.json\u003C/code>, but for this example we will do it programmatically in our \u003Ccode>./src/index.ts\u003C/code> file, just add the following at the top of the file\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// src/index.ts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Bun.\u003C/span>\u003Cspan style=\"color:#B392F0\">build\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  entrypoints: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'./src/react/index.tsx'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  outdir: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'./public'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">})\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cdiv style=\"text-align: center;\">\u003Csub>That's right top level await!\u003C/sub>\u003C/div>\n\u003Cp>Now our \u003Cstrong>React\u003C/strong> code will be automatically bundled each time we start our server! You can verify this by checking if the \u003Ccode>./public/index.js\u003C/code> file exists. Make sure that this file path matches the \u003Ccode>bootstrapScripts\u003C/code> option in your \u003Ccode>./src/index.ts\u003C/code> file.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Make sure the bootstrapScripts matches the output\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// file path in your ./public folder\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> stream\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#B392F0\"> renderToReadableStream\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(app, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  bootstrapScripts: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'/public/index.js'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">})\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Now open \u003Ca href=\"http://localhost:3000\">http://localhost:3000\u003C/a> in your browser, the counter should now be working!\u003C/p>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>Congratulations you have just created a simple website using Bun, Elysia and React with support for server-side rendering!\u003C/p>\n\u003Cp>If you have any additional questions feel free to reach out to me on \u003Ca href=\"https://twitter.com/asleepace\">Twitter\u003C/a> or dropping me an email at \u003Ca href=\"mailto:colin@asleepace.com\">colin@asleepace.com\u003C/a> :)\u003C/p>\n\u003Cp>\u003Cstrong>Next Recommended Reading\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://react.dev/reference/react/Suspense\">React Readable Streams\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://react.dev/reference/react/Suspense\">React Suspense\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"helpful-resources\">Helpful Resources\u003C/h2>\n\u003Cp>The following links are helpful resources for learning more about the technologies used in this project:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://elysiajs.com/plugins/static.html\">How to server static files with Elysia\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://elysiajs.com/quick-start.html\">How to create a simple website with Elysia\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://stackoverflow.com/a/75726039/4326715\">How to configure Bun with DOM types\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://bun.sh/docs/runtime/jsx\">How to configure Bun with JSX documentation\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://bun.sh/docs/bundler\">How to bundle assets with Bun documentation\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://react.dev/reference/react-dom/server/renderToReadableStream\">How to render react on the server\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Cp>If you have any additional questions feel free to reach out to me on \u003Ca href=\"https://twitter.com/asleepace\">Twitter\u003C/a> or dropping me an \u003Ca href=\"mailto:colin@asleepace.com\">email\u003C/a>.\u003C/p>\n\u003Ch2 id=\"tldr\">TL;DR\u003C/h2>\n\u003Cp>Here is the final code from the article, you can also view this project on \u003Ca href=\"https://github.com/asleepace/bun-elysia-react-srr-example\">GitHub\u003C/a>.\u003C/p>\n\u003Ch4 id=\"project-structure-1\">Project Structure\u003C/h4>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> ./your-project-name\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">│\u003C/span>\u003Cspan style=\"color:#9ECBFF\">   ├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> node_modules\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">│\u003C/span>\u003Cspan style=\"color:#9ECBFF\">   ├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> public\u003C/span>\u003Cspan style=\"color:#6A737D\">              # client-side static files\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">│\u003C/span>\u003Cspan style=\"color:#9ECBFF\">   │\u003C/span>\u003Cspan style=\"color:#9ECBFF\">   └──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> index.js\u003C/span>\u003Cspan style=\"color:#6A737D\">        # generated client bundle\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">│\u003C/span>\u003Cspan style=\"color:#9ECBFF\">   ├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> src\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">│\u003C/span>\u003Cspan style=\"color:#9ECBFF\">   │\u003C/span>\u003Cspan style=\"color:#9ECBFF\">   ├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> react\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">│\u003C/span>\u003Cspan style=\"color:#9ECBFF\">   │\u003C/span>\u003Cspan style=\"color:#9ECBFF\">   │\u003C/span>\u003Cspan style=\"color:#9ECBFF\">   ├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> App.tsx\u003C/span>\u003Cspan style=\"color:#6A737D\">     # react application\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">│\u003C/span>\u003Cspan style=\"color:#9ECBFF\">   │\u003C/span>\u003Cspan style=\"color:#9ECBFF\">   │\u003C/span>\u003Cspan style=\"color:#9ECBFF\">   └──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> index.tsx\u003C/span>\u003Cspan style=\"color:#6A737D\">   # client-side entry point\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">│\u003C/span>\u003Cspan style=\"color:#9ECBFF\">   │\u003C/span>\u003Cspan style=\"color:#9ECBFF\">   └──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> index.ts\u003C/span>\u003Cspan style=\"color:#6A737D\">        # server-side entry point\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">│\u003C/span>\u003Cspan style=\"color:#9ECBFF\">   ├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> bun.lock.b\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">│\u003C/span>\u003Cspan style=\"color:#9ECBFF\">   ├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> package.json\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">│\u003C/span>\u003Cspan style=\"color:#9ECBFF\">   ├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> tsconfig.json\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">│\u003C/span>\u003Cspan style=\"color:#9ECBFF\">   └──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> yarn.lock\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch4 id=\"srcindexts\">\u003Cstrong>src/index.ts\u003C/strong>\u003C/h4>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// src/index.ts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { Elysia } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'elysia'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { staticPlugin } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '@elysiajs/static'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { renderToReadableStream } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'react-dom/server'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { createElement } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'react'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> App \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> './react/App'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// bundle client side react-code\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Bun.\u003C/span>\u003Cspan style=\"color:#B392F0\">build\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  entrypoints: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'./src/react/index.tsx'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  outdir: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'./public'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">})\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// start a new Elysia server on port 3000\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> app\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Elysia\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  .\u003C/span>\u003Cspan style=\"color:#B392F0\">use\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">staticPlugin\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  .\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'/'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // create our react App component\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> app\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> createElement\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(App)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // render the app component to a readable stream\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> stream\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#B392F0\"> renderToReadableStream\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(app, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      bootstrapScripts: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'/public/index.js'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // output the stream as the response\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Response\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(stream, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      headers: { \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Content-Type'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'text/html'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  .\u003C/span>\u003Cspan style=\"color:#B392F0\">listen\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">3000\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch4 id=\"srcreactapptsx\">src/react/App.tsx\u003C/h4>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// src/react/App.tsx\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> React, { useState } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'react'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> default\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> App\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">setCount\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> useState\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">html\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">head\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">meta\u003C/span>\u003Cspan style=\"color:#B392F0\"> charSet\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"utf-8\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">title\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>Bun, Elysia &#x26; React&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">title\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">meta\u003C/span>\u003Cspan style=\"color:#B392F0\"> name\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"description\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> content\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Bun, Elysia &#x26; React\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">meta\u003C/span>\u003Cspan style=\"color:#B392F0\"> name\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"viewport\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> content\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"width=device-width, initial-scale=1\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">head\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">body\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">h1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>Counter {count}&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">h1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#B392F0\"> onClick\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> setCount\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(count \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)}>Increment&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">body\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">html\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch4 id=\"srcreactindextsx\">src/react/index.tsx\u003C/h4>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">/// &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">reference\u003C/span>\u003Cspan style=\"color:#B392F0\"> lib\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"dom\"\u003C/span>\u003Cspan style=\"color:#6A737D\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">/// &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">reference\u003C/span>\u003Cspan style=\"color:#B392F0\"> lib\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"dom.iterable\"\u003C/span>\u003Cspan style=\"color:#6A737D\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> React \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'react'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { hydrateRoot } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'react-dom/client'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> App \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> './App.js'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">hydrateRoot\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(document, &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">App\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch4 id=\"tsconfigjson\">tsconfig.json\u003C/h4>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"compilerOptions\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"target\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"ES2021\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"jsx\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"react\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"jsxFactory\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"React.createElement\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"jsxFragmentFactory\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"React.Fragment\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"module\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"ES2022\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"moduleResolution\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"node\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"types\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"bun-types\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"esModuleInterop\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"forceConsistentCasingInFileNames\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"strict\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"skipLibCheck\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"packagejson\">package.json\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"name\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"bun-elysia-react-ssr\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"version\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"1.0.0\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"scripts\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"test\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"echo \u003C/span>\u003Cspan style=\"color:#79B8FF\">\\\"\u003C/span>\u003Cspan style=\"color:#9ECBFF\">Error: no test specified\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\\"\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> &#x26;&#x26; exit 1\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"dev\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"bun run --watch src/index.ts\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"dependencies\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"@elysiajs/static\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"^0.6.0\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"elysia\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"latest\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"react\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"^18.2.0\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"react-dom\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"^18.2.0\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"devDependencies\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"@types/react\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"^18.2.21\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"@types/react-dom\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"^18.2.7\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"bun-types\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"latest\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"module\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"src/index.js\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Article and \u003Ca href=\"https://github.com/asleepace/bun-elysia-react-srr-example\">source code\u003C/a> by \u003Ca href=\"https://www.linkedin.com/in/colin-teahan/?lipi=urn%3Ali%3Apage%3Ad_flagship3_feed%3BeM7QoEWiSIOwjiKXlYu0VA%3D%3D\">Colin Teahan\u003C/a>\u003C/p>\n\u003Ch1>🥳\u003C/h1>",{"headings":337,"localImagePaths":382,"remoteImagePaths":383,"frontmatter":384,"imagePaths":386},[338,341,344,347,350,353,356,359,362,365,367,370,373,376,379],{"depth":49,"slug":339,"text":340},"pre-requisites","Pre-requisites",{"depth":49,"slug":342,"text":343},"project-structure","Project Structure",{"depth":26,"slug":345,"text":346},"react-setup","React Setup",{"depth":26,"slug":348,"text":349},"fixing-type-errors","Fixing Type Errors",{"depth":26,"slug":351,"text":352},"react-ssr","React SSR",{"depth":26,"slug":354,"text":355},"bundle-client-js","Bundle Client JS",{"depth":26,"slug":357,"text":358},"conclusion","Conclusion",{"depth":26,"slug":360,"text":361},"helpful-resources","Helpful Resources",{"depth":26,"slug":363,"text":364},"tldr","TL;DR",{"depth":167,"slug":366,"text":343},"project-structure-1",{"depth":167,"slug":368,"text":369},"srcindexts","src/index.ts",{"depth":167,"slug":371,"text":372},"srcreactapptsx","src/react/App.tsx",{"depth":167,"slug":374,"text":375},"srcreactindextsx","src/react/index.tsx",{"depth":167,"slug":377,"text":378},"tsconfigjson","tsconfig.json",{"depth":49,"slug":380,"text":381},"packagejson","package.json",[],[],{"title":327,"description":328,"author":87,"pubDate":385,"heroImage":330,"slug":324},"Sep 13 2023",[],"orson",{"id":387,"data":389,"body":394,"filePath":395,"digest":396,"rendered":397},{"title":390,"description":391,"pubDate":392,"heroImage":393},"Orson (Cat)","This page is dedicated to Orson, who is a beautiful and wonderful American tabby cat with a unique personality.",["Date","2022-12-16T08:00:00.000Z"],"/images/orson.jpeg","Google used to provide a service which indexed all microchip tracking numbers, but it appears this is no longer the case and so this page was created to do just that.\n\n### Description\n\nThis is Orson (the cat) who is a loving and adorable American tabby cat living in San Francisco, CA. I wanted to post his information here just in case he ever got lost.\n\n---\n\n| Details         | Information       |\n| --------------- | ----------------- |\n| Tracking number | #991001005376664  |\n| Location        | San Francisco, Ca |\n| Eye Color       | Green / Olive     |\n| Breed           | American Tabby    |\n| Age             | 12 years          |\n| Sex             | Male              |\n\n---\n\nHe responds to the name **\"Orson\"** or **\"O\"** for short and can be quite timid around strangers, but is also really playful and friendly if he knows you. He enojys fish flavored treats, chasing mice on strings and laser pointers.\n\nHe is an American Tabby cat with brown fur, black stripes and green eyes and is average size and weight. You can see some distinctive black stripe markings on his head:\n\n\u003Cimg alt=\"Orson Cat\" className=\"max-w-md shadow-lg mx-auto\" src=\"/images/orson2.jpeg\" />\n\n### Contact\n\nIf he ever does manage to get lost and found, please contact me here:\n\n- Phone: **(415) 302-7992**\n- Email: **colin_teahan@yahoo.com**\n\n\u003Cimg alt=\"Orson Cat\" className=\"max-w-ld shadow-lg mx-auto\" src=\"/images/orson3.jpeg\" />\n\nHopefully this page will never have to be used, but if it is, thank you in advanced!\n\n### Keywords\n\n\u003Cspan className=\"text-gray-400\">The following section contains keywords to help search engines better index this information.\u003C/span>\n\n\u003Cdiv className=\"flex flex-row flex-wrap gap-x-2 gap-y-2 px-2\">\n  \u003Cp className=\"inline-block bg-blue-500 text-white px-2 py-1 rounded-lg\">Missing Cat\u003C/p>\n  \u003Cp className=\"inline-block bg-blue-500 text-white px-2 py-1 rounded-lg\">Tabby\u003C/p>\n  \u003Cp className=\"inline-block bg-blue-500 text-white px-2 py-1 rounded-lg\">San Francisco\u003C/p>\n  \u003Cp className=\"inline-block bg-blue-500 text-white px-2 py-1 rounded-lg\">Microchip #991001005376664\u003C/p>\n  \u003Cp className=\"inline-block bg-blue-500 text-white px-2 py-1 rounded-lg\">Noe Valley\u003C/p>\n  \u003Cp className=\"inline-block bg-blue-500 text-white px-2 py-1 rounded-lg\">Orson\u003C/p>\n  \u003Cp className=\"inline-block bg-blue-500 text-white px-2 py-1 rounded-lg\">Google\u003C/p>\n  \u003Cp className=\"inline-block bg-blue-500 text-white px-2 py-1 rounded-lg\">To Find My Family\u003C/p>\n  \u003Cp className=\"inline-block bg-blue-500 text-white px-2 py-1 rounded-lg\">Brown Hair\u003C/p>\n  \u003Cp className=\"inline-block bg-blue-500 text-white px-2 py-1 rounded-lg\">Black Stripes\u003C/p>\n  \u003Cp className=\"inline-block bg-blue-500 text-white px-2 py-1 rounded-lg\">Green Eyes\u003C/p>\n  \u003Cp className=\"inline-block bg-blue-500 text-white px-2 py-1 rounded-lg\">ASPCA\u003C/p>\n  \u003Cp className=\"inline-block bg-blue-500 text-white px-2 py-1 rounded-lg\">Lost Cat\u003C/p>\n  \u003Cp className=\"inline-block bg-blue-500 text-white px-2 py-1 rounded-lg\">Lost & Found\u003C/p>\n\u003C/div>","src/content/blog/orson.md","ea933b337d3631eb",{"html":398,"metadata":399},"\u003Cp>Google used to provide a service which indexed all microchip tracking numbers, but it appears this is no longer the case and so this page was created to do just that.\u003C/p>\n\u003Ch3 id=\"description\">Description\u003C/h3>\n\u003Cp>This is Orson (the cat) who is a loving and adorable American tabby cat living in San Francisco, CA. I wanted to post his information here just in case he ever got lost.\u003C/p>\n\u003Chr>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Details\u003C/th>\u003Cth>Information\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>Tracking number\u003C/td>\u003Ctd>#991001005376664\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Location\u003C/td>\u003Ctd>San Francisco, Ca\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Eye Color\u003C/td>\u003Ctd>Green / Olive\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Breed\u003C/td>\u003Ctd>American Tabby\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Age\u003C/td>\u003Ctd>12 years\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Sex\u003C/td>\u003Ctd>Male\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Chr>\n\u003Cp>He responds to the name \u003Cstrong>“Orson”\u003C/strong> or \u003Cstrong>“O”\u003C/strong> for short and can be quite timid around strangers, but is also really playful and friendly if he knows you. He enojys fish flavored treats, chasing mice on strings and laser pointers.\u003C/p>\n\u003Cp>He is an American Tabby cat with brown fur, black stripes and green eyes and is average size and weight. You can see some distinctive black stripe markings on his head:\u003C/p>\n\u003Cimg alt=\"Orson Cat\" class=\"max-w-md shadow-lg mx-auto\" src=\"/images/orson2.jpeg\">\n\u003Ch3 id=\"contact\">Contact\u003C/h3>\n\u003Cp>If he ever does manage to get lost and found, please contact me here:\u003C/p>\n\u003Cul>\n\u003Cli>Phone: \u003Cstrong>(415) 302-7992\u003C/strong>\u003C/li>\n\u003Cli>Email: \u003Cstrong>\u003Ca href=\"mailto:colin_teahan@yahoo.com\">colin_teahan@yahoo.com\u003C/a>\u003C/strong>\u003C/li>\n\u003C/ul>\n\u003Cimg alt=\"Orson Cat\" class=\"max-w-ld shadow-lg mx-auto\" src=\"/images/orson3.jpeg\">\n\u003Cp>Hopefully this page will never have to be used, but if it is, thank you in advanced!\u003C/p>\n\u003Ch3 id=\"keywords\">Keywords\u003C/h3>\n\u003Cp>\u003Cspan class=\"text-gray-400\">The following section contains keywords to help search engines better index this information.\u003C/span>\u003C/p>\n\u003Cdiv class=\"flex flex-row flex-wrap gap-x-2 gap-y-2 px-2\">\n  \u003Cp class=\"inline-block bg-blue-500 text-white px-2 py-1 rounded-lg\">Missing Cat\u003C/p>\n  \u003Cp class=\"inline-block bg-blue-500 text-white px-2 py-1 rounded-lg\">Tabby\u003C/p>\n  \u003Cp class=\"inline-block bg-blue-500 text-white px-2 py-1 rounded-lg\">San Francisco\u003C/p>\n  \u003Cp class=\"inline-block bg-blue-500 text-white px-2 py-1 rounded-lg\">Microchip #991001005376664\u003C/p>\n  \u003Cp class=\"inline-block bg-blue-500 text-white px-2 py-1 rounded-lg\">Noe Valley\u003C/p>\n  \u003Cp class=\"inline-block bg-blue-500 text-white px-2 py-1 rounded-lg\">Orson\u003C/p>\n  \u003Cp class=\"inline-block bg-blue-500 text-white px-2 py-1 rounded-lg\">Google\u003C/p>\n  \u003Cp class=\"inline-block bg-blue-500 text-white px-2 py-1 rounded-lg\">To Find My Family\u003C/p>\n  \u003Cp class=\"inline-block bg-blue-500 text-white px-2 py-1 rounded-lg\">Brown Hair\u003C/p>\n  \u003Cp class=\"inline-block bg-blue-500 text-white px-2 py-1 rounded-lg\">Black Stripes\u003C/p>\n  \u003Cp class=\"inline-block bg-blue-500 text-white px-2 py-1 rounded-lg\">Green Eyes\u003C/p>\n  \u003Cp class=\"inline-block bg-blue-500 text-white px-2 py-1 rounded-lg\">ASPCA\u003C/p>\n  \u003Cp class=\"inline-block bg-blue-500 text-white px-2 py-1 rounded-lg\">Lost Cat\u003C/p>\n  \u003Cp class=\"inline-block bg-blue-500 text-white px-2 py-1 rounded-lg\">Lost &#x26; Found\u003C/p>\n\u003C/div>",{"headings":400,"localImagePaths":410,"remoteImagePaths":411,"frontmatter":412,"imagePaths":413},[401,404,407],{"depth":49,"slug":402,"text":403},"description","Description",{"depth":49,"slug":405,"text":406},"contact","Contact",{"depth":49,"slug":408,"text":409},"keywords","Keywords",[],[],{"title":390,"description":391,"author":87,"pubDate":106,"heroImage":393,"slug":387},[]]