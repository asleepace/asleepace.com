[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.9.3","content-config-digest","498048fd8949f375","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://asleepace.com\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\",\"entrypoint\":\"astro/assets/endpoint/node\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"experimentalDefaultStyles\":true},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":false},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"csp\":false},\"legacy\":{\"collections\":false},\"session\":{\"driver\":\"fs-lite\",\"options\":{\"base\":\"/Users/asleepace/dev/asleepace.com/node_modules/.astro/sessions\"}}}","blog",["Map",11,12,23,24,34,35,45,46,56,57,67,68,78,79,88,89,98,99,108,109,118,119,129,130],"stock-picks-2025",{"id":11,"data":13,"body":19,"filePath":20,"digest":21,"deferredRender":22},{"title":14,"description":15,"pubDate":16,"heroImage":17,"hashTags":18},"Top Stock Picks for 2025","Investment Opportunities for 2025 focusing on quantum computing, renewable energy, artificial intelligence, and emerging technologies.",["Date","2024-12-24T08:00:00.000Z"],"/images/stock-picks-2025.png","Finance, Stocks","The following analysis presents a carefully researched selection of companies that show promising growth potential for 2025 and beyond. This assessment is based on market trends, technological advancement trajectories, and emerging sector analysis.\n\nKey sectors identified for potential growth in 2025 include:\n\n- Energy (Traditional and Renewable)\n- Artificial Intelligence and Machine Learning\n- Quantum Computing\n- Space Technology and Exploration\n- Digital Assets and Blockchain Technology\n\nWhile this analysis reflects thorough market research, it should be considered as informational content rather than financial advice. Investors should conduct their own due diligence before making investment decisions.\n\n## Market Leaders and Growth Opportunities\n\n1. **Tesla (TSLA)**\n   Electric vehicle pioneer and renewable energy innovator with established market leadership and continued expansion in global markets.\n\n2. **Nvidia (NVDA)**\n   Industry leader in AI infrastructure and GPU technology, well-positioned in the expanding artificial intelligence and machine learning sectors.\n\n3. **Quantum Computing (QUBT)**\n   Early mover in quantum computing technology development with strategic positioning in an emerging high-potential market.\n\n4. **Rocket Lab (RKLB)**\n   Leading private space launch provider with established commercial satellite deployment capabilities and expanding space services portfolio.\n\n5. **Bitcoin (BTC)**\n   Primary digital asset with institutional adoption and increasing integration into traditional financial systems.\n\n6. **Intuitive Machines (LUNR)**\n   Space exploration and infrastructure company developing critical technologies for lunar and deep space missions.\n\n7. **Uranium Energy Corp (UEC)**\n   U.S.-based uranium mining and exploration company positioned to benefit from increasing nuclear energy adoption.\n\n8. **Applied Digital (APLD)**\n   Technology infrastructure provider specializing in data center operations and high-performance computing solutions.\n\n9. **Energy Transfer (ET)**\n   Comprehensive energy infrastructure company operating across natural gas transportation and storage segments.\n\n10. **Alphabet (GOOGL)**\n    Technology conglomerate with strong positions in cloud computing, artificial intelligence research, and quantum computing initiatives.\n\nIt's crucial to understand that investment in equity markets carries inherent risks. Market conditions can change rapidly, and past performance does not guarantee future results. Investors should carefully consider their investment objectives, risk tolerance, and time horizon when evaluating any investment opportunities.","src/content/blog/stock-picks-2025.mdx","cb6638c9ea674c3c",true,"typescript-snippets",{"id":23,"data":25,"body":31,"filePath":32,"digest":33,"deferredRender":22},{"title":26,"description":27,"pubDate":28,"heroImage":29,"hashTags":30},"Typescript Snippets","Useful TypeScript snippets for everyday use which can be easily copied and pasted.",["Date","2024-05-14T07:00:00.000Z"],"/images/typescript-banner.png","Technical, Snippets, Typescript","This document contains a collection of useful, interesting and sometimes quirky snippets of TypeScript I've gathered over the years. Some of these patterns are not unique to TypeScript, but in these examples they should be also type-safe (hopefully).\n\n### Builder Pattern\n\nThe following snippet creates a typed object by progressively adding properties, this can be useful for defining different errors in an application.\n\n**CAVEAT**: In order for the `this` in `register()` method to work correctly, the definition cannot use an arrow function.\n\n```ts\ntype ErrorRegistry\u003CT extends string> = Record\u003CT, number> & {\n  register\u003CK extends string>(error: K, code: number): ErrorRegistry\u003CK | T>\n}\n\nfunction createErrorRegistry\u003CT extends string>(domain: T) {\n  const errorRegistry = {\n    register\u003CK extends T>(error: K, code: number) {\n      return {\n        ...this,\n        [error]: code,\n      } as ErrorRegistry\u003CT | K>\n    },\n  } as ErrorRegistry\u003CT>\n  return errorRegistry\n}\n\nconst output = createErrorRegistry('app')\n  .register('linking', 100)\n  .register('billing', 200)\n  .register('surface', 200)\n```\n\n[Typescript Playground Link](https://www.typescriptlang.org/play/?target=99#code/C4TwDgpgBAogTnA9nAShA5gSwM7DiAHgBUoIAPYCAOwBNspc5Mr0A+KAXijQGNkbiAGihUArgFsARhDjsAZFADeAKChqocDDkpwCAaVIVqdBnmZsAFDKRwAXFD3C+NCPbFSZASnvwbaLIyEBgA+UESsygC+ysoAZqJUPMCYiFRQPJoAhpS+yP7a+MSGlLT0jOasFjSI4pnM9kSeSqrqfFS4pAh5WoGczeoDGj06+sXG9OFWXXYOTogubhLScE0qg+tDwKJwaWsb+wB0R8AAFjiCLfvrANrWyAC69s4Ql1eRUJn0uajDhSShenYrwG0RBHy+03ygWIEQGmi2O06fl+ICiMTaHUQomAYGxfQyEGyEG+ULwIAsAHJMmAwBTPK8DpoAjpKQAbZgAa3MFOEAEYAAz8+kDRnDGSUySYVnslg8qAAJkFwvUouZ4op2G2sUyPAgcsVQvRqWwiFZEAOrMQ6AsWJx2KaAHoHVAgA)\n\n### Branded Types\n\nThe following snippet defines a utility type `Brand\u003Cany, string>` which can be used to create an alias of an existing type, which is more strict than the original type.\n\n```ts\ndeclare const BrandSymbol: unique symbol\n\ntype Brand\u003CT, Description extends string> = T & {\n  [BrandSymbol]: Description\n}\n\n// example usage\n\ntype UserId = Brand\u003Cnumber, 'UserId'>\n\nfunction trackUser(userId: UserId) {\n  console.log('user:', userId)\n}\n\nconst userOne = 123 as UserId\nconst userTwo = 123\n\ntrackUser(userOne) // ok\ntrackUser(userTwo) // error\n```\n\n[Typescript Playground Link](https://www.typescriptlang.org/play/?target=99#code/FAEwpgxgNghgTmABBA9gOwM4BdECE4xogDKAngLYBGKUAXIgK5oCWAjg0hhdVMMFqQAOSfIRAAeACoAaRABEwGCHGaCszdIjAAPLGCIZE2FWgDmAPkQBeRJMQAyRAG9giN4gDaoomSo0AuvQKSipqGmjAAL58APQxWtow5IJQSAwYMKZgfALCiACqGGBwAJIg1ngEROJoDFTFsgDkhcVljeZ8AGZMEOqaWAQQANYtcAAU6a0g9KNlAJTOru6omDRgAHRQKKZjjZNwtI2y+-NRfCvYjEVwAPJoSDYAjABMAMyIMIazIMAXOPuSADuKAqL1eOUGI2uE2udzACziiBQQ34kNGMOKQJQCPixTgKDgfCAA)\n\n### Monad\\*\n\nThe following is a monad-like type which has support for operatings over elements of an array, or the array itself.\n\n```ts\n/**\n * This class facilitates the chaining of operations on a value,\n * each task will either return a new Monad or MonadIterable.\n */\nexport class Monad\u003CI> {\n  constructor(public value: I) {}\n\n  public pipe\u003CO>(operation: (value: I) => O[]): MonadIterable\u003CO[]>\n\n  public pipe\u003CO>(operation: (value: I) => O): Monad\u003CO>\n\n  public pipe\u003CO>(operation: (value: I) => O): Monad\u003CO> | MonadIterable\u003CO[]> {\n    const result = operation(this.value)\n    return Array.isArray(result) ? new MonadIterable(result) : new Monad(result)\n  }\n\n  public print(label?: string): Monad\u003CI> {\n    console.log(`${label}:` ?? 'value:', this.value)\n    return this\n  }\n}\n\n/**\n * This is an extension of the Monad class that allows for operations\n * on iterable values. The reduce method will convert back to\n * a basic Monad.\n */\nexport class MonadIterable\u003CI extends any[]> extends Monad\u003Cany> {\n  public iterate\u003CO>(\n    operation: (value: I[number], index?: number, array?: I) => O\n  ): MonadIterable\u003CO[]> {\n    return new MonadIterable(this.value.map(operation))\n  }\n\n  public filter\u003CO>(\n    operation: (value: I[number], index?: number, array?: I) => O\n  ): MonadIterable\u003CI> {\n    return new MonadIterable(this.value.filter(operation))\n  }\n\n  public reduce\u003CO>(\n    operation: (prev: O, value: I[number], index?: number, array?: I) => O,\n    initialValue: Partial\u003CO> = {}\n  ): Monad\u003CO> {\n    return new Monad(this.value.reduce(operation, initialValue))\n  }\n\n  /**\n   * Converts an iterable monad back into a normal monad.\n   */\n  public combine\u003CO>(operation: (value: I) => O): Monad\u003CO> {\n    return new Monad(operation(this.value))\n  }\n}\n```\n\n[Try it on the TypeScript playground!](https://www.typescriptlang.org/play/?target=99#code/PQKhCgAIUgVALAlgZ0gYwDYENmoGZZqIaIAuWpApqqfJevFogHYsDmkA9nlwA6UAnCok7NUoyFkgA3LBgCulADRQYlQvEjlkAa0gB3YhkiUydAZAGVS8gc0mRmlfZACyorABMuF98y8AklRCAEYYlAB0qsDgmDiofl4APAEAfJAA3uBQ6KLIpALyaKScAgAUvPJhiGgycooAXJABAJSZAL7ZkJCV1bW8iPxJAPKpZZz8QqQizE1lsgqUTa2QALzpwwDaALotTYmeQYJYYZQjO6ldPVUk-YNno+OTwqJzC43NbeuQw3tuHp4Rpccr1bj17kCnsdpq9IPN6ktPmsNn8DkDIAAff7+Q7BE7hc7bdJZbrdNB5UiWajyDCU1Z8aEzMq0FARd6UFo5bpWGx2SAAQQEQgAnhEUIKRWUrMgaaQ2gB+RzObGBPGnKXU2ltJpOFwHDUyrU5Togm41HoCFikMrYEKUDDypr5S3MNiogEpYlc3JiTjhCIYThsMoAAwAJBlbfb2g0Q5B5YqAOTshqJpRaJDINkIzmkqm8+ws5DG8Am0AQaBwTOQFCSeyUAAeVDEMy4PFo9AO6GwuAzFEkGED+nwpQZUxmxcrEjIx1OdUWWar9CsniK9AAttZ4JxvIZBz7pIJKSFCHoSqoHCfkOaDlFoDE4r2DkdQgSAiYm5RmJ5UFhmMKLg-ZsfxVQE-2FL1TT6Gs8SoSEJkZWF4UWZZNmYeR1ztARtnTFhPEbR1HAwrD0ywIUsGFQiVm+X59gBF98QeQCSVJHlbHsXVQIY9Ui2zRYInXLBeChcdRBaXNIBNbpQXNPBiGCeDnhhWY4RTZo0OIwQcJrb8CJ1TSBFI8jKOWL4UTonFuLfL08zYvlOOfNVwmZTM+MUCI5NpQQRJeZhxJLKCwRXNdIW9BDRJUiorGkJphnTNSAg0zCtNw3SG0I9DksMyRjKosyfhUPMWDIRA5AANQRJoAAUyOmOR0XpDJOm6d0cXRFjuWsdilT1AEXNZdkImCtBKB85TUpK8qcwkqTIHLLkYAAYVEQ8BFIX97BnV8NwBSATzQPQrU4BxmFKQTjHXAE726EAYmks1anJTCWAeMZwt8t5KqRGjWuSUZMm9OyOOVfV3uU-qs3Zfzuk6MtgDWVZEaR5GUdRtH0YxzHwGAeGAFEGywddeHCbH4cx8mKcprHYgpLh5FISo6R60CygyecPgARkkiTugiAZ+DKZkcB0fLtB0Nz6BgAAmAAGGWecgPn7kFzKQny1WIhKABlAp2DKaHSSVgWymdPzkUgU2ImQYmyDKAAiO2Dd5raKFGso0EYAR8o9siIh9gRlvw-lrXlhWPPk7zxmKTh8s4aPNc4HWXWDAAOJ3FeGt3eGi9M0FsL3zYAOQMqLKGkNoAGp0Hz9N5e9PmXWtO28-yTh1wAfSjDBHfr9kgA)\n\n### Define Class via Enum (WIP)\n\n**NOTE**: This has only been tested on TypeScript 5.4.5 and is still expiramental, see [here for example](https://www.typescriptlang.org/play/?target=99&ts=5.5.0-beta#code/MYewdgziA2CmB0w4EMBOAKAlAKF72YArgLYAEAqhLKgMrAAWsxypA3tqZ6YVagJIATUgF5SAcj4A5ACoBRAOKyASqUkB5SavIAZbWIA0HLgDMAlqggAXScmKwR4uQA1pqjVt0GjnaMis27BzFnV3VNSR09QwBfXEsATwAHe1kiYgBhXwgIAB5pAD4Hdi5SMFgAd1J0eBq0AHMIAC5SZDB4gG0AXUxm6WxY7ATk0gB1VFNLWGQAIzg8wtFWUgBaVCmBcGh40naABVJTMFIAa1h4kGNSaU7evc7SaIBuPCGUtN3UEETcgqLvHdO20OJzOFyuN1KJGm1FIAB9SFZxmA6nDSNMQDApkd4QARZCTfq4MC2WAQRLIYD2TJ+CBsf6wAAeiRAqEspGMhDAwEspnApCQNIAYp9iKkSDlZPorvl0AQSHRGMxmrIeqQxRksj9CsUSlw1pZCKgjgLsnTdeb+eBEYRuSz0PUmmr3p9vhL8pg6f8Lbq4Gz6KYBAICDRLPjYMrnV9crIFqQ1NMAFawbnwGmmOpgdCsaJSh04L3ekwsqqgSBsxIu6gJA5HOXEBVMZAe9gFwu60tQODwaAgOroAAGQbMYEOKIrXyr2wAJKxx8lWfFov38222-Gkymh4dYB8Jwv0JZ-RApXPJ1KdavV3XqDM4M1LKhCLBDJfL6WzHVDbfw6QH0+X6+bblOMoazD+f7Pq2gFcHUsBsgAbsg0BPlgZrQZe+qGkc-qBsGoaTO0p4Lp0UHoTmpHQVQCFIShZQMpYABqNGwM2FHoZwOFBmAIZhoRlbEQ4dGMcxbGvrE7FcNEOBkaJ4kWtELS0hehZlJU9qoA0EYkLuroxqqfTenJnCxAMrykAA0mctKiICYKvGClDUA2zDYAA9K5XAAHoAPwvEk9jOcgABChwCKOfwlDw1CCM0aTQqg-xmBY1gks0iKjv8WQpXYaUPhlAwmrSjmoKQjKTGAAi0tS2SIJqwogKKaQ5PZlzFYFUqBSFFWjjKbUMI2rH-FRASwOgHLQNAI25UidSsd6HZsu0SX+CSUpZSN9yiONk0kvAZLQBM6AAESkEd0kWoepgQPAy3ZfYW3mCtdhQZd13rSSDjvc9JQmXg2ALaQxDxMVgkVBQvBZv8UX8AIzQAIwAEwAMwAZwt1TeI6QwIcXglF9P7BFM9CtLjXBlagyD3o+sD9PmQPFXtcEjcdQUgNMpBBTaxyTKgZ24B2mLdr26D07wmBAA).\n\nThis allows us to define an enum which will auto-_magically_ be created into a class definition, and then extended. This is great for a simple ORM with SQLite!\n\n```ts\n// SPECIAL TYPES\n\ntype EnumClass\u003CT> = {\n  new (...args: any[]): T\n}\n\ntype Writeable\u003CT> = { -readonly [P in keyof T]: T[P] }\n\ntype EnumProps\u003CT> = {\n  [key in keyof T]: number | string | boolean | Date\n}\n\n// THE MAGIC\n\nnamespace Class {\n  export function classFromEnum\u003CE, T>(enumSchema: E): EnumClass\u003CT> {\n    return class {\n      constructor(args: EnumProps\u003CE>) {\n        let hiddenState: EnumProps\u003CE> = Object.assign({}, args)\n\n        for (const property in enumSchema) {\n          console.log(`defining property ${property}`)\n\n          Object.defineProperty(this, property, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            get value() {\n              return hiddenState[property]\n            },\n            set value(nextValue) {\n              hiddenState[property] = nextValue\n            },\n          })\n        }\n      }\n    } as {\n      new (args: EnumProps\u003CE>): T\n    }\n  }\n}\n\n// EXAMPLE UASGES\n\nenum UserSchema {\n  userId = 'INTEGER NON NULL',\n  firstName = 'TEXT NON NULL',\n  lastName = 'TEXT NON NULL',\n}\n\ntype SchemaBinding = {\n  userId: number\n  firstName: string\n  lastName: string\n}\n\nclass User extends Class.classFromEnum\u003Ctypeof UserSchema, SchemaBinding>(\n  UserSchema\n) {\n  setName(fullName: string) {\n    const [firstName, lastName] = fullName.split(' ')\n    this.firstName = firstName\n    this.lastName = lastName\n  }\n}\n\nconst myUser = new User({\n  userId: 123,\n  firstName: 'Bob',\n  lastName: 'Smitch',\n  extra: true,\n})\n\nmyUser.setName('Colin Teahan')\n\nconsole.log(myUser.firstName) // Colin\n```\n\n[Try it on the TypeScript Playground](https://www.typescriptlang.org/play/?target=99&ts=5.5.0-beta#code/MYewdgziA2CmB0w4EMBOAKAlAKF72YArgLYAEAqhLKgMrAAWsxypA3tqZ6YVagJIATUgF5SAcj4A5ACoBRAOKyASqUkB5SavIAZbWIA0HLgDMAlqggAXScmKwR4uQA1pqjVt0GjnaMis27BzFnV3VNSR09QwBfXEsATwAHe1kiYgBhXwgIAB5pAD4Hdi5SMFgAd1J0eBq0AHMIAC5SZDB4gG0AXUxm6WxY7ATk0gB1VFNLWGQAIzg8wtFWUgBaVCmBcGh40naABVJTMFIAa1h4kGNSaU7evc7SaIBuPCGUtN3UEETcgqLvHdO20OJzOFyuN1KJGm1FIAB9SFZxmA6nDSNMQDApkd4QARZCTfq4MC2WAQRLIYD2TJ+CBsf6wAAeiRAqEspGMhDAwEspnApCQNIAYp9iKkSDlZPorvl0AQSHRGMxmrIeqQxRksj9CsUSlw1pZCKgjgLsnTdeb+eBEYRuSz0PUmmr3p9vhL8pg6f8Lbq4Gz6KYBAICDRLPjYMrnV9crIFqQ1NMAFawbnwGmmOpgdCsaJSh04L3ekwsqqgSBsxIu6gJA5HOXEBVMZAe9gFwu60tQODwaAgOroAAGQbMYEOKIrXyr2wAJKxx8lWfFov38222-Gkymh4dYB8Jwv0JZ-RApXPJ1KdavV3XqDM4M1LKhCLBDJfL6WzHVDbfw6QH0+X6+bblOMoazD+f7Pq2gFcHUsBsgAbsg0BPlgZrQZe+qGkc-qBsGoaTO0p4Lp0UHoTmpHQVQCFIShZQMpYABqNGwM2FHoZwOFBmAIZhoRlbEQ4dGMcxbGvrE7FcNEOBkaJ4kWtELS0hehZlJU9qoA0EYkLuroxqqfTenJnCxAMrykAA0mctKiICYKvGClDUA2zDYAA9K5XAAHoAPwvEk9jOcgABChwCKOfwlDw1CCM0aTQqg-xmBY1gks0iKjv8WQpXYaUPhlAwmrSjmoKQjKTGAAi0tS2SIJqwogKKaQ5PZlzFYFUqBSFFWjjKbUMI2rH-FRASwOgHLQNAI25UidSsd6HZsu0SX+CSUpZSN9yiONk0kvAZLQBM6AAESkEd0kWoepgQPAy3ZfYW3mCtdhQZd13rSSDjvc9JQmXg2ALaQxDxMVgkVBQvBZv8UX8AIzQAIwAEwAMwAZwt1TeI6QwIcXglF9P7BFM9CtLjXBlagyD3o+sD9PmQPFXtcEjcdQUgNMpBBTaxyTKgZ24B2mLdr26D07wmBAA)","src/content/blog/typescript-snippets.mdx","6940047adb89545e","css-snippets",{"id":34,"data":36,"body":42,"filePath":43,"digest":44,"deferredRender":22},{"title":37,"description":38,"pubDate":39,"heroImage":40,"hashTags":41},"CSS Snippets","CSS snippets for everyday use which can be easily copied and pasted.",["Date","2025-06-14T07:00:00.000Z"],"/images/css.png","Technical, Snippets, CSS","### Colors\n\n```css\n:root {\n  --primary-color: #ff0000;\n  --opacity: 50%;\n}\n\n.element {\n  background: color-mix(in srgb, var(--primary-color) var(--opacity), transparent);\n}\n```\n\n### Conditionals\n\n```css\n@import 'tailwindcss';\n/* Only style code NOT inside pre tags */\ncode:not(pre code) {\n  @apply bg-slate-100 text-fuchsia-800 px-1.5 py-1.5 rounded font-black text-sm font-mono;\n}\n\n/* Ensure code blocks keep their styling */\npre code {\n  @apply bg-transparent text-inherit p-0 rounded-none;\n}\n```\n\n### Scrollbar None\n\n```css\n.scrollbar-none {\n  scrollbar-width: none;\n  -ms-overflow-style: none;\n  &::-webkit-scrollbar {\n    display: none;\n  }\n}\n```\n\n### Scrollbar Gutter\n\n```css\n/* Example #1: Apply globally to prevent layout shifts () */\nhtml {\n  scrollbar-gutter: stable both-edges;\n}\n\n/* Example #2: Stable with fallback */\n.scrollbar-stable {\n  overflow-y: auto;\n  scrollbar-gutter: stable;\n  \n  /* Fallback for older browsers */\n  @supports not (scrollbar-gutter: stable) {\n    padding-right: 17px; /* Approximate scrollbar width */\n    margin-right: -17px;\n  }\n}\n```","src/content/blog/css-snippets.mdx","1fca0a483422aa06","clever-extract-replace-algorithm",{"id":45,"data":47,"body":53,"filePath":54,"digest":55,"deferredRender":22},{"title":48,"description":49,"pubDate":50,"heroImage":51,"hashTags":52},"Clever Extract & Replace Algorithm","A simple algorithm for extracting strings and replacing values written in TypeScript.",["Date","2022-12-16T08:00:00.000Z"],"/images/blog-placeholder-3.jpg","Technical, Algorithm, Typescript","> A simple algorithm which recursively extracts specified keys from arbitrary data as a flat array, and can then replace those keys when called with another flat array of strings.\n\n```ts\nexport type ExtractAndReplaceProps = (\n  data: unknown,\n  keys: Set\u003Cstring>,\n  replace?: string[]\n) => string[]\n\nexport const extar: ExtractAndReplaceProps = (data, keys, replace) =>\n  Object.entries(data).reduce((previous, [key, value]) => {\n    if (typeof value === 'object')\n      return previous.concat(extar(value, keys, replace))\n    if (typeof value === 'string' && keys.has(key)) {\n      if (replace) data[key] = replace.shift() // replace that element if specified\n      return previous.concat(value) // always extract original element\n    }\n    return previous\n  }, [] as string[])\n```\n\nThe other day my colleague was working on a translation micro-service and was contemplating on how to best extract specific strings from arbitrary JSON data to send to the translation API. The translation API only accepts a flat array of strings, and would return the same translated. He was tinkering with several approaches, but to be honest they were all needlessly complex and over-engineered.\n\nFor the next couple of days this problem lingered in the back of my mind, festering, begging for a simple and elegant solution. Finally, I decided to take a stab at the problem and was quite happy with the solution (simplified above). First, things first let's map out the requirements:\n\n- a function which takes arbitrary and possibly nested JSON data\n- a set of keys which we would like to extract\n- returns a flat array of strings\n- a way to map these values back to the original data\n\nThe data would be fairly uniform, but could have several layers of nesting along with arbitrary keys, so my first step was just to traverse the data recursively. I remember from implementing a deep copy function in TypeScript in the past we would need something like the following:\n\n```ts\nfunction traverse(data: unknown) {\n  if (typeof data !== 'object') return\n  if (Array.isArray(data)) {\n    for (const value of data) {\n      traverse(value)\n    }\n  } else {\n    for (const key in data) {\n      traverse(data[key])\n    }\n  }\n}\n```\n\nBasically, the idea is to recursively traverse any array elements and objects values. Since the `typeof` operator returns `'object'` for both arrays and objects, we also need to perform an additional check to see if the value is an array.\n\nHowever, I was not happy with this approach as it felt a bit too clunky and verbose. Sometimes I really wish the `typeof` operator would return `'array'` for arrays, but then I remembered that arrays are objects in TypeScript, and that I could use this to my advantage.\n\n```ts\nfunction traverse(data: unknown) {\n  if (typeof data !== 'object') return\n  for (const keyOrIndex in data) {\n    traverse(data[keyOrIndex])\n  }\n}\n```\n\nSweet! The **for...in** loop will return **0, 1, 2, 3...** for arrays and **key1**, **key2**, **key3**... for objects. Not exactly groundbreaking, but this was a step in the right direction! The next step was to extract specific string values from the data. Since this data would be subject to change over time, one of the requirements was to be able to pass a list of strings which we wanted to extract. This would be a perfect place for a `Set\u003Cstring>`!\n\n```ts\nfunction extract(data: unknown, keys: Set\u003Cstring>): string[] {\n  if (typeof data !== 'object') return []\n  let extracted: string[] = []\n  for (const keyOrIndex in data) {\n    const value = data[keyOrIndex]\n    if (typeof value === 'string' && keys.has(keyOrIndex)) {\n      extracted.push(value)\n    } else {\n      const subValuesExtracted = extract(value, keys)\n      extracted = extracted.concat(subValuesExtracted)\n    }\n  }\n  return extracted\n}\n```","src/content/blog/first-post.mdx","fc9f638a763192bf","ssr-with-bun-elysia-react",{"id":56,"data":58,"body":64,"filePath":65,"digest":66,"deferredRender":22},{"title":59,"description":60,"pubDate":61,"heroImage":62,"hashTags":63},"SSR with Bun, Elysia & React","How to build a simple website using React, Bun and Elysia with server-side rendering in 2023.",["Date","2023-09-13T07:00:00.000Z"],"/images/bun-elysia-react-banner.png","Technical, Bun, Elysia, React","This article will show you how to create a simple website using [Bun](https://bun.sh/docs/installation), [Elysia](https://elysiajs.com/) and [React](https://react.dev/) with support for server-side rendering.\n\n- **Bun** the JS/TS bundler, runtime & package manager\n- **Elysia** a framework for building performant web applications\n- **React** a JavaScript library for building user interfaces\n\nOriginal source code here on [GitHub](https://github.com/asleepace/bun-elysia-react-srr-example).\n\n### Pre-requisites\n\nBefore we begin make sure you have **Bun** installed on your machine\n\n```bash\ncurl -fsSL https://bun.sh/install | bash # for macOS, Linux, and WSL\n```\n\n[Bun installation documentation](https://bun.sh/docs/installation)\n\nNext let's initialize a new project with **Elysia** by running the following command in your terminal\n\n```bash\nbun create elysia your-project-name # edit this\ncd your-project-name\nbun run dev\n```\n\n[Elysia installation documentation](https://elysiajs.com/quick-start.html)\n\nYou should see the following in your terminal\n\n> 🦊 Elysia is running at localhost:3000\n\nAnd the following when you visit [http://localhost:3000](http://localhost:3000)\n\n> Hello, Elysia!\n\n### Project Structure\n\nNext lets go ahead and define two more folders in our project which will hold our static files and react code.\n\n```sh\nmkdir public\nmkdir src/react\n```\n\nYou project structure should now look like this\n\n```sh\n├── ./your-project-name\n│   ├── node_modules\n│   ├── public            # client-side static files\n│   ├── src\n│   │   ├── react         # react code\n│   │   └── index.ts      # server-side entry point\n│   ├── .gitignore\n│   ├── bun.lock.b\n|   ├── package.json\n│   ├── README.md\n│   ├── tsconfig.json\n│   └── yarn.lock\n```\n\nWe want to be able to return static files from our server, so lets go ahead and add the following **Elysia** static plugin.\n\n```sh\nbun add @elysiajs/static\n```\n\nThis will allow the client to request static files from our server such as images, css, js, etc. Now replace the contents of your `src/index.ts` file with\n\n```tsx\n// src/index.ts\nimport { Elysia } from 'elysia'\nimport { staticPlugin } from '@elysiajs/static'\n\nconst app = new Elysia()\n  .use(staticPlugin())\n  .get('/', () => {\n    return 'Our first route'\n  })\n  .listen(3000)\n```\n\nThe static plugin default folder is public, and registered with `/public` prefix. [Click here to learn more](https://elysiajs.com/plugins/static.html)\n\n## React Setup\n\nThe next thing we want to do is be able to render our React code on the server, so let's go ahead and add the following dependencies\n\n```sh\nbun add react react-dom  # article is using 18.2.0\n```\n\nNext let's create our React application by adding a file called `App.tsx` in our `./src/react/` folder with the following code\n\n```tsx\n// src/react/App.tsx\nimport React, { useState } from 'react'\n\nexport default function App() {\n  const [count, setCount] = useState(0)\n  return (\n    \u003Chtml>\n      \u003Chead>\n        \u003Cmeta charSet=\"utf-8\" />\n        \u003Ctitle>Bun, Elysia & React\u003C/title>\n        \u003Cmeta name=\"description\" content=\"Bun, Elysia & React\" />\n        \u003Cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n      \u003C/head>\n      \u003Cbody>\n        \u003Ch1>Counter {count}\u003C/h1>\n        \u003Cbutton onClick={() => setCount(count + 1)}>Increment\u003C/button>\n      \u003C/body>\n    \u003C/html>\n  )\n}\n```\n\n[React server-side rendering documentation](https://react.dev/reference/react-dom/server/renderToReadableStream)\n\nNow back in our `./src/index.ts` let's import this component by adding the following line\n\n```tsx\n// src/index.ts\nimport App from './react/App'\n```\n\nDon't worry if you see a type error, we will fix in the next section.\n\n## Fixing Type Errors\n\nAt this point you should see a couple type errors since we haven't specified how our project should handle JSX and React types. To fix this add the following dev dependencies\n\n```sh\nbun add -d @types/react @types/react-dom\n```\n\nNext let's specify how the project should handle **JSX** by opening our `./tsconfig.json` and setting the following options\n\n```json\n{\n  \"jsx\": \"react\",\n  \"jsxFactory\": \"React.createElement\",\n  \"jsxFragmentFactory\": \"React.Fragment\"\n}\n```\n\nFor more information refer to the [Bun JSX documentation](https://bun.sh/docs/runtime/jsx). The type errors should now be gone, but sometimes you need to restart your IDE for the changes to take effect; _looking at you VSCode_...\n\n## React SSR\n\nNow back in our `./src/index.ts` let's go ahead and render our React component by adding the following\n\n```tsx\n// src/index.ts\nimport { Elysia } from 'elysia'\nimport { staticPlugin } from '@elysiajs/static'\nimport { renderToReadableStream } from 'react-dom/server'\nimport { createElement } from 'react'\nimport App from './react/App'\n\nconst app = new Elysia()\n  .use(staticPlugin())\n  .get('/', async () => {\n    // create our react App component\n    const app = createElement(App)\n\n    // render the app component to a readable stream\n    const stream = await renderToReadableStream(app, {\n      bootstrapScripts: ['/public/index.js'],\n    })\n\n    // output the stream as the response\n    return new Response(stream, {\n      headers: { 'Content-Type': 'text/html' },\n    })\n  })\n  .listen(3000)\n```\n\nMake sure your local dev server is still running if you closed your IDE earlier by running the following from your project root\n\n```sh\nbun run dev\n```\n\nThen open [http://localhost:3000](http://localhost:3000) in your browser and you should see the following\n\n\u003Cimg src=\"/images/ssr-example.png\" style=\"box-shadow: 0px 1px 5px rgba(0,0,0,0.1);\" alt=\"React SSR\" width=\"100%\" />\n\nHowever, you may notice that pressing the button doesn't increment the counter. This is because we haven't added any client-side code yet. Let's go ahead and do that now. Create a new file called `index.tsx` in your `./react/` folder with the following code\n\n```tsx\n// src/react/index.tsx\n// Make sure to include the following two lines:\n/// \u003Creference lib=\"dom\" />\n/// \u003Creference lib=\"dom.iterable\" />\nimport React from 'react'\nimport { hydrateRoot } from 'react-dom/client'\nimport App from './App.js'\n\nhydrateRoot(document, \u003CApp />)\n```\n\nNormally this is where we would call `createRoot`, but since the root will be created on the server, all we need to do is hydrate the client after the initial load. This will attach event listeners to the server-generated HTML and make it interactive.\n\n[React Hydrate Documentation](https://react.dev/reference/react-dom/client/hydrateRoot)\n\n```ts\n/// \u003Creference lib=\"dom\" />\n/// \u003Creference lib=\"dom.iterable\" />\n```\n\nNote these two lines above are not comments, but rather [Triple-Slash Directives](https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html). These are used to tell the TypeScript compiler how to handle certain files. In this case, we are telling the compiler to include the DOM types in our project. This is necessary because the `hydrateRoot` function requires the DOM types to be present (i.e. `document`).\n\nIf you wish to access DOM elements (`window`, `document`, etc.) in another file just add these directives at the top of the file.\n\n[How to add DOM types in Bun](https://stackoverflow.com/a/75726039/4326715)\n\n## Bundle Client JS\n\nWe are almost there! The last step is to bundle our `react` code which will be loaded by the client. Luckily **Bun** has a built-in bundler which we can use to bundle our client-side code. We could do this via the command line or as a script in our `package.json`, but for this example we will do it programmatically in our `./src/index.ts` file, just add the following at the top of the file\n\n```ts\n// src/index.ts\nawait Bun.build({\n  entrypoints: ['./src/react/index.tsx'],\n  outdir: './public',\n})\n```\n\n\u003Cdiv style=\"text-align: center;\">\u003Csub>That's right top level await!\u003C/sub>\u003C/div>\n\nNow our **React** code will be automatically bundled each time we start our server! You can verify this by checking if the `./public/index.js` file exists. Make sure that this file path matches the `bootstrapScripts` option in your `./src/index.ts` file.\n\n```ts\n// Make sure the bootstrapScripts matches the output\n// file path in your ./public folder\nconst stream = await renderToReadableStream(app, {\n  bootstrapScripts: ['/public/index.js'],\n})\n```\n\nNow open [http://localhost:3000](http://localhost:3000) in your browser, the counter should now be working!\n\n## Conclusion\n\nCongratulations you have just created a simple website using Bun, Elysia and React with support for server-side rendering!\n\nIf you have any additional questions feel free to reach out to me on [Twitter](https://twitter.com/asleepace) or dropping me an email at colin@asleepace.com :)\n\n**Next Recommended Reading**\n\n- [React Readable Streams](https://react.dev/reference/react/Suspense)\n- [React Suspense](https://react.dev/reference/react/Suspense)\n\n## Helpful Resources\n\nThe following links are helpful resources for learning more about the technologies used in this project:\n\n- [How to server static files with Elysia](https://elysiajs.com/plugins/static.html)\n- [How to create a simple website with Elysia](https://elysiajs.com/quick-start.html)\n- [How to configure Bun with DOM types](https://stackoverflow.com/a/75726039/4326715)\n- [How to configure Bun with JSX documentation](https://bun.sh/docs/runtime/jsx)\n- [How to bundle assets with Bun documentation](https://bun.sh/docs/bundler)\n- [How to render react on the server](https://react.dev/reference/react-dom/server/renderToReadableStream)\n\nIf you have any additional questions feel free to reach out to me on [Twitter](https://twitter.com/asleepace) or dropping me an [email](mailto:colin@asleepace.com).\n\n## TL;DR\n\nHere is the final code from the article, you can also view this project on [GitHub](https://github.com/asleepace/bun-elysia-react-srr-example).\n\n#### Project Structure\n\n```bash\n├── ./your-project-name\n│   ├── node_modules\n│   ├── public              # client-side static files\n│   │   └── index.js        # generated client bundle\n│   ├── src\n│   │   ├── react\n│   │   │   ├── App.tsx     # react application\n│   │   │   └── index.tsx   # client-side entry point\n│   │   └── index.ts        # server-side entry point\n│   ├── bun.lock.b\n│   ├── package.json\n│   ├── tsconfig.json\n│   └── yarn.lock\n```\n\n#### **src/index.ts**\n\n```ts\n// src/index.ts\nimport { Elysia } from 'elysia'\nimport { staticPlugin } from '@elysiajs/static'\nimport { renderToReadableStream } from 'react-dom/server'\nimport { createElement } from 'react'\nimport App from './react/App'\n\n// bundle client side react-code\nawait Bun.build({\n  entrypoints: ['./src/react/index.tsx'],\n  outdir: './public',\n})\n\n// start a new Elysia server on port 3000\nconst app = new Elysia()\n  .use(staticPlugin())\n  .get('/', async () => {\n    // create our react App component\n    const app = createElement(App)\n\n    // render the app component to a readable stream\n    const stream = await renderToReadableStream(app, {\n      bootstrapScripts: ['/public/index.js'],\n    })\n\n    // output the stream as the response\n    return new Response(stream, {\n      headers: { 'Content-Type': 'text/html' },\n    })\n  })\n  .listen(3000)\n```\n\n#### src/react/App.tsx\n\n```tsx\n// src/react/App.tsx\nimport React, { useState } from 'react'\n\nexport default function App() {\n  const [count, setCount] = useState(0)\n  return (\n    \u003Chtml>\n      \u003Chead>\n        \u003Cmeta charSet=\"utf-8\" />\n        \u003Ctitle>Bun, Elysia & React\u003C/title>\n        \u003Cmeta name=\"description\" content=\"Bun, Elysia & React\" />\n        \u003Cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n      \u003C/head>\n      \u003Cbody>\n        \u003Ch1>Counter {count}\u003C/h1>\n        \u003Cbutton onClick={() => setCount(count + 1)}>Increment\u003C/button>\n      \u003C/body>\n    \u003C/html>\n  )\n}\n```\n\n#### src/react/index.tsx\n\n```tsx\n/// \u003Creference lib=\"dom\" />\n/// \u003Creference lib=\"dom.iterable\" />\n\nimport React from 'react'\nimport { hydrateRoot } from 'react-dom/client'\nimport App from './App.js'\n\nhydrateRoot(document, \u003CApp />)\n```\n\n#### tsconfig.json\n\n```json\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2021\",\n    \"jsx\": \"react\",\n    \"jsxFactory\": \"React.createElement\",\n    \"jsxFragmentFactory\": \"React.Fragment\",\n    \"module\": \"ES2022\",\n    \"moduleResolution\": \"node\",\n    \"types\": [\"bun-types\"],\n    \"esModuleInterop\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"strict\": true,\n    \"skipLibCheck\": true\n  }\n}\n```\n\n### package.json\n\n```json\n{\n  \"name\": \"bun-elysia-react-ssr\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"dev\": \"bun run --watch src/index.ts\"\n  },\n  \"dependencies\": {\n    \"@elysiajs/static\": \"^0.6.0\",\n    \"elysia\": \"latest\",\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/react\": \"^18.2.21\",\n    \"@types/react-dom\": \"^18.2.7\",\n    \"bun-types\": \"latest\"\n  },\n  \"module\": \"src/index.js\"\n}\n```\n\nArticle and [source code](https://github.com/asleepace/bun-elysia-react-srr-example) by [Colin Teahan](https://www.linkedin.com/in/colin-teahan/?lipi=urn%3Ali%3Apage%3Ad_flagship3_feed%3BeM7QoEWiSIOwjiKXlYu0VA%3D%3D)\n\n\u003Ch1>🥳\u003C/h1>","src/content/blog/bun-elysia-react-ssr.mdx","f93155f55ca3f06c","try",{"id":67,"data":69,"body":75,"filePath":76,"digest":77,"deferredRender":22},{"title":70,"description":71,"pubDate":72,"heroImage":73,"hashTags":74},"The Quest for Isomorphic Error Handling in Typescript","A deep dive into error handling paradigms and advanced Typescript types to create the perfect errors-as-values utility.",["Date","2025-04-26T07:00:00.000Z"],"/images/try-catch-cover.jpg","Technical, Typescript, NPM","Error handling in software engineering is a bit like paying taxes — _it's something that we all have to do and something that nobody enjoys doing..._\n\nIf you are anything like me, then you are most likely familiar with how tedious and awkward error handling with try / catch statements can feel especially in languages like Javascript & Typescript. Often times I find myself having to write unwieldy code like the following:\n\n```ts\nfunction getUrlFromString(urlString: string): URL | undefined {\n  let url: URL | undefined\n  try {\n    url = new URL(urlString)\n  } catch (error) {\n    console.warn(`invalid url: ${(error as Error)?.message}`)\n    try {\n      url = new URL(`https://${urlString}`)\n    } catch (error2) {\n      return undefined\n    }\n  }\n  return url\n}\n```\n\nAnd while this might seem like a contrived example or something that could easily be abstracted into smaller utility functions, it might surprise you how many times I've see code just like this in production software.\n\nWhat I do like about the code snippet above is that it demonstrates several key issues with the try / catch pattern, especially relating to Typescript:\n\n- values are scoped to their respective blocks\n- errors are not guaranteed to be an `Error` instance\n- retry logic can become extremely verbose\n- it isn't clear when something can throw\n\nSince any function can throw from somewhere deep in the call stack, the control flow of the program can become unpredictable and hard to reason about. In fact, let's take a look at one more example. What do you think this function will return?\n\n```ts\nfunction generateOddNumbers(count: number) {\n  let oddNumbers: number[] = new Array(count).fill(0)\n\n  try {\n    // generate an array of random numbers\n    oddNumbers = oddNumbers.map((_, i) => Math.floor(Math.random() * i))\n\n    // check if they are all odd and return or throw\n    if (oddNumbers.every((num) => num % 2 === 1)) {\n      return oddNumbers\n    } else {\n      throw 'Invalid sequence'\n    }\n  } catch (e) {\n    // handle errors\n    console.warn(`Error generating numbers: ${e}`)\n    return false\n  } finally {\n    // cleanup resource\n    console.log('cleaning up resources...')\n    oddNumbers = []\n    return\n  }\n}\n```\n\nPerhaps you might have guessed that when the argument `count` is small enough it might return an array of only odd numbers once in a while. That would make send right?\n\nWell if you guessed `undefined` for any number, you would be correct. This is because the `finally` block will always execute after the `try` and `catch` blocks, no matter what.\n\n> The try...catch statement is comprised of a try block and either a catch block, a finally block, or both. The code in the try block is executed first, and if it throws an exception, the code in the catch block will be executed. The code in the finally block will always be executed before control flow exits the entire construct.\n> [[source]](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch)\n\nIf this seems confusing to you, don't worry you are not alone.\n\n### A better way?\n\nIf you are familiar with other programming languages like Go or Rust, then you probably already know where I am going with this — _errors as **values**_.\n\nInstead of throwing errors _willy-nilly_ to whoever will catch them, the idea is to treat errors as first class citizens and handle them as close to the call site as possible. While this article isn't a deep dive into the errors as values paradigm, a lot of the techniques for code written in this article have been inspired by [Rust](https://doc.rust-lang.org/book/ch09-00-error-handling.html).\n\nNow let's start coding a re-usable solution which can help simplify our error handling logic. Since this will be in Typescript let's begin by describing the shape of our data, which should either be a generic value `T` or the concrete `Error` class, but not both.\n\n```ts\ntype ResultOk\u003CT> = [T, undefined]\ntype ResultError = [undefined, Error]\ntype Result\u003CT> = ResultOk\u003CT> | ResultError\n```\n\nThe above types are just [tuples](https://www.typescriptlang.org/docs/handbook/2/objects.html#tuple-types) which either contain the generic value `T` or `undefined` in the first position and `Error` or `undefined` in the second position. The last type is a [discriminated union](https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes-func.html#discriminated-unions) of both the `ResultOk\u003CT>` and `ResultError` types.\n\nNext we will create a simple utility function which takes a function as an argument, execute that function inside a try/catch expression, and returns the output wrapped in our `Result\u003CT>` type:\n\n```ts\nfunction tryCatch\u003CT>(fn: () => T | never): Result\u003CT> {\n  try {\n    const value = fn()\n    return [value, undefined] as ResultOk\u003CT>\n  } catch (e) {\n    const error = e instanceof Error ? e : new Error(String(e))\n    return [undefined, error] as ResultError\n  }\n}\n```\n\nIf the function throws then the exception will be caught and converted to an error if needed, otherwise it will return the value. Since each branch returns a type which is narrower than the `Result\u003CT>` the result tuple is easy to unpack and check for errors.\n\n```ts\nconst [url, error] = tryCatch(() => new URL(maybeUrl))\n\nif (error) return console.warn(error.message)\n\nreturn url.href // type-safe!\n```\n\nBy checking if the `error` value is defined and early returning if so, the Typescript type system is able to infer that `url` must be defined below, because `error` will only be defined when `Result\u003CT>` is `[undefined, Error]`! Now let's revisit the same problem I mentioned in the beginning of this article and see how this approach does:\n\n```ts\nfunction getUrlFromString(urlString: string): URL | undefined {\n  let [url1, err1] = tryCatch(() => new URL(urlString))\n  if (!err1) return url\n  else console.warn(err1.message)\n\n  let [url2, err2] = tryCatch(() => new URL(`https://${urlString}`))\n  if (!err2) return url2\n  else console.warn(err2.message)\n\n  let [url3, err3] = tryCatch(() => new URL(`https://${urlString}`).trim())\n  if (!err3) return url3\n  else console.warn(err3.message)\n}\n```\n\nJust like that our `getUrlFromString(urlString)` is far more succinct and easy to follow, so much so that we were able to add another case to make the program even more robust!\n\nThe less time we spend fiddling with nested try/catch statements, casting errors and wrangling control flow; the more time we can spend on making programs which crash less!\n\n### Synchronous vs. Asynchronous\n\nSo far the `tryCatch` utility works great for synchronous error handling. However, most of the time errors tend to stem from asynchronous operations like `fetch()` requests and JSON decoding. Here is where we run into a little issue with the type system...\n\n```ts\nconst result = tryCatch(async () => {\n  return JSON.parse('[1, 2, 3]') as number[]\n})\n\ntypeof result // Result\u003CPromise\u003Cnumber[]>>\n```\n\nThe problem is that the promise is now inside our result `Result\u003CPromise\u003Cnumber[]>>` and thus needs to be unpacked before we can call **await**. However, this also causes another issue as calling await on the result value can throw! Instead what we would like is for the return type to be `Promise\u003CResult\u003Cnumber[]>>` so we can do the following:\n\n```ts\nconst [data, error] = await tryCatch(async () => {\n  return JSON.parse('[1, 2, 3]') as number[]\n})\n\nif (!error) {\n  return data.map((num) => num * 10)\n}\n```\n\nWhile we _could_ just create another utility like `tryCatchAsync(fn)` that fits these constraints, just look at that beautiful example above, that's what we **want** — not that _\"we have error values at home nonsense\"_.\n\n### Advanced Types\n\nJust like before, let's start by describing what it is we want via types. We know what the async type should be from above example, but how can we translate this to our code? Well the first thing to understand is that async / await is merely just syntactic sugar around promises\\*.\n\n```ts\nfunction example1() {\n  return new Promise\u003Cstring>((resolve) => resolve('abc'))\n}\n\nasync function example2() {\n  return 'hello'\n}\n\ntype PromiseType = typeof example1 // () => Promise\u003Cstring>\ntype AsyncFnType = typeof example1 // () => Promise\u003Cstring>\n```\n\nThis means that _theoretically_ all we need to do is adjust our `tryCatch(fn)` to distinguish between `T` and `Promise\u003CT>`. If we notice that the return type is a `Promise`, then we can assume the function should be considered async.\n\n```ts\nfunction tryCatch\u003CT>(\n  fn: () => Promise\u003CT> | T | never\n): Result\u003CPromise\u003CT>> | Result\u003CT> {\n  // ...\n}\n```\n\nUnfortunately, this is where things start getting a bit complicated. If you hover over the result type now you will see the following:\n\n```ts\nconst result = tryCatch(someFunc)\ntypeof result // ResultError | ResultOk\u003Cnumber[]> | ResultOk\u003CPromise\u003Cnumber[]>>\n```\n\nThe issue is the type system isn't able to narrow the type simply by placing an await statement in front of the try/catch. This means functions which should only be synchronous are now appearing as potentially async and vis-versa...\n\nWe need to find a way to narrow the type system such that promises are only returned for async functions and not for the synchronous ones, while async functions should only return promises and never synchronous results.\n\nHaving tinkered with this problem for longer than I would like to admit and making marginal gains in one area only to regress in others, for a time I thought the technology simply didn't exist, until one day I stumbled across the following [code snippet](https://github.com/markedjs/marked/blob/ea13bbe1e6a6318ea7c9aecaef3403ad1c5a0369/src/marked.ts#L26):\n\n```ts\n// https://github.com/markedjs/marked\nconst example1 = marked.render(markdown, { async: false })\nconst example2 = marked.render(markdown, { async: true })\n\ntypeof example1 // string\ntypeof example2 // Promise\u003Cstring>\n```\n\nA library that was able to return either sync or async values simply by changing the value of an argument! This discovery re-ignited my unyielding thirst for a truly isomorphic try / catch helper and sent me into overdrive. Quickly, I rushed to the Github source code and began trawling through every line until finally I noticed the secret...\n\n### Function Overloading\n\n[Function overloading](https://www.typescriptlang.org/docs/handbook/declaration-files/by-example.html#overloaded-functions) in Typescript is most likely one of those things you probably never think about unless you are a library maintainer or deep in the weeds. It allows for defining multiple variants of the same function (or method) with different arguments and return types.\n\nFor example imagine we have two similar functions which either add two numbers together or concat two strings. The implementation is nearly identical and it would be nice if we just had two write this logic once. The issue we want to avoid is allowing our new `add(a, b)` function to add a number to a string or vis-versa.\n\n```ts\nfunction addString(x: string, y: string): string {\n  return x + y\n}\n\nfunction addNumber(x: number, y: number): number {\n  return x + y\n}\n```\n\nThis is where function overloading comes in handy, we can declare multiple versions of the same function to help the Typescript type system narrow the return type. The caveat is that the actual implementation must contain the most permissive type which can accommodate any of the values also passed to the overloads.\n\n```ts\nfunction add(x: number, y: number): number\nfunction add(x: string, y: string): string\nfunction add(x: number | string, y: number | string): number | string {\n  if (typeof x === 'string' && typeof y === 'string') return x + y\n  if (typeof x === 'number' && typeof y === 'number') return x + y\n  throw new Error('Mismatched types!')\n}\n\nadd(123, 456) // ok!\nadd('a', 'b') // ok!\nadd(123, 'b') // type-error\nadd('a', 456) // type-error\n```\n\nAs you can see we had to jump through a lot of hoops just to get this simple example working, but it illustrates how function overloading can be used to declare multiple type variants of the same function. The first two function definition are recognized by the type system as overloads, where the last definition handles the actual implementation.\n\nBringing this back to the `tryCatch(fn)` helper, let's see how we can leverage function overloads to help distinguish between the synchronous and asynchronous versions of our function.\n\n```ts\nfunction tryCatch\u003CT>(fn: () => Promise\u003CT>): Promise\u003CResult\u003CT>>\nfunction tryCatch\u003CT>(fn: () => T | never): Result\u003CT>\nfunction tryCatch\u003CT>(\n  fn: () => T | never | Promise\u003CT>\n): Result\u003CT> | Promise\u003CResult\u003CT>> {\n  // ...\n}\n```\n\nThe first function overload handles our async case where the `fn` argument returns a promise, this version should also return a promise which can then be awaited to obtain our result tuple containing `T` or `Error`. The second overload handles our synchronous case where the `fn` argument either returns `T` or `never` (can throw). Finally the last overload combines all three and the actual function implementation.\n\nOk, this is starting to look fairly _promising_ if I do say so myself... all that is left now is the logic. The tricky part here is figuring out how to perform a runtime check for an async function and then how to apply our error catching logic to and async function in a synchronous context. Luckily, this is actually what promises are in the first place!\n\n```ts\ntry {\n  const output = fn()\n  if (output instanceof Promise) {\n    return output\n      .then((value) => [value, undefined] as ResultOk\u003CT>)\n      .catch((error) => [undefined, error] as ResultError)\n  }\n  return [output, undefined] as ResultOk\u003CT>\n} catch (e) {\n  const error = e instanceof Error ? e : new Error(String(e))\n  return [undefined, error] as ResultError\n}\n```\n\nThe first step is execute the `fn()` argument and check if `output` is an instance of a promise. We can do this using the `instanceof` operator and if `true` we can call the `.then()` and `.catch()` methods to extract the value and construct our result tuple! This will then return our desired type `Promise\u003CResult\u003CT>>` when awaited!\n\nWe are almost there now, but as some of you might have already noticed, we haven't properly coerced the async `error` value into the `Error` class. Let's extract the logic we used below in the original version into a separate helper which can be used by both versions.\n\n```ts\nconst toError = (e: unknown): Error =>\n  e instanceof Error ? e : new Error(String(e))\n```\n\nIt's not perfect, but it gets the job done for now. Basically, it just checks if the error value is already an instance of the `Error` class and if so does nothing, otherwise it converts the value to a string which is then used to instantiate a new `Error`. Tying this altogether we should have something that looks like the following:\n\n```ts\n// our result types...\ntype ResultOk\u003CT> = [T, undefined]\ntype ResultError = [undefined, Error]\ntype Result\u003CT> = ResultOk\u003CT> | ResultError\n\n// our error handling utility...\nconst toError = (e: unknown): Error =>\n  e instanceof Error ? e : new Error(String(e))\n\n// our try/catch overloads and implementation...\nfunction tryCatch\u003CT>(fn: () => Promise\u003CT>): Promise\u003CResult\u003CT>>\nfunction tryCatch\u003CT>(fn: () => T | never): Result\u003CT>\nfunction tryCatch\u003CT>(\n  fn: () => T | never | Promise\u003CT>\n): Result\u003CT> | Promise\u003CResult\u003CT>> {\n  try {\n    const output = fn()\n    if (output instanceof Promise) {\n      return output\n        .then((value) => [value, undefined] as ResultOk\u003CT>)\n        .catch((error) => [undefined, toError(error)] as ResultError)\n    }\n    return [output, undefined] as ResultOk\u003CT>\n  } catch (e) {\n    return [undefined, toError(e)] as ResultError\n  }\n}\n```\n\nLet's go ahead and test this implementation with a couple different variations to ensure our types are working properly and the code does what is expected for both synchronous and asynchronous operations! Below I've added test cases for synchronous, asynchronous and promise based `fn` arguments. For each different variant I've included one that throws and one that returns successfully:\n\n```ts\nasync function main() {\n  const result0 = tryCatch(() => 123)\n  const result1 = tryCatch(() => {\n    if (Math.random() \u003C 1.0) throw new Error('thrown sync')\n    return 123\n  })\n  const result2 = await tryCatch(async () => 'abc')\n  const result3 = await tryCatch(async () => {\n    throw new Error('thrown async')\n  })\n  const result4 = await tryCatch(() => new Promise\u003Cboolean>((res) => res(true)))\n  const result5 = await tryCatch(\n    () => new Promise((_, reject) => reject('thrown promise'))\n  )\n\n  // output the all the results once finished...\n  const outputs = [result0, result1, result2, result3, result4, result5]\n  outputs.forEach((info, i) => console.log(`Test #${i}: `, info))\n}\n```\n\nLooking at this code in a code editor shows that each of the results indeed have the desired return type, please note that some additional type casting needs to be done for the promises. Running this code also outputs what we expect as well:\n\n```txt\n[LOG] Test #0:  [123, undefined]\n[LOG] Test #1:  [undefined, thrown sync]\n[LOG] Test #2:  [\"abc\", undefined]\n[LOG] Test #3:  [undefined, thrown async]\n[LOG] Test #4:  [true, undefined]\n[LOG] Test #5:  [undefined, thrown promise]\n```\n\nThe result types are looking good and the implementation is working as expected! Lastly, let's try adding some edge-cases to make sure we haven't missed anything. Let's test the following:\n\n1. What happens if `fn()` doesn't return or throw anything\n2. What happens if `fn()` returns an `Error` instead of throwing\n3. What happens if `fn()` never returns and only throws\n\n```ts\nconst result6 = tryCatch(() => {})\nconst result7 = tryCatch(() => new Error('error as value'))\nconst result8 = tryCatch(() => {\n  throw new Error('123')\n})\n```\n\nThe first two edge-cases appear to work as we might expect, the first one returns `Result\u003Cvoid>` and the second returns `Result\u003CError>`, which is reasonable as our function is only concerned with catching errors, but not if the value they return is an error _per se_. However, for `result8` we can see something funky...\n\n```ts\n// this wasn't from an async function?!\nconst result8: Promise\u003CResult\u003Cunknown>>\n```\n\nOh no, what is happening here? Well since this function _**never**_ returns a value, the signature for the `fn` looks like the following `fn: () => never`, which can't easily be matched by our current function overloads. No worries, the fix is quite simple and we just need to add the following overload:\n\n```ts\n// handle edge case where function never returns\nfunction tryCatch\u003CT>(fn: () => never): ResultError\n```\n\nSince the function `never` returns, this means it must throw and thus we can specify the return type to always be the sync `ResultError`. Thankfully, we only need to add this for sync version as the async version will still always return a promise first.\n\nFinally, after the all the things we've tried, we were able to catch a break and create the fabled _isomorphic_ try/catch utility. Well, at least that's what I call it anyways. Isomorphic in this context meaning:\n\n> An isomorphic function, or isomorphism, is a bijection (one-to-one and onto mapping) between two sets or structures that preserves the relevant properties or operations of those structures. In simpler terms, it's a way of showing that two things are essentially the same, even if they look different, by establishing a perfect match between their elements while maintaining their underlying relationships.\n\nWhich I found as a fitting way to describe the relationship between the try/catch utility behaving the same in both synchronous and asynchronous contexts. What's even more fitting is that usually function overloading is meant for polymorphism...\n\n\u003Cimg src=\"/images/result-tuple.jpg\" alt=\"Isomorphic Try/Catch Error Handling\" />\n\nAnyways, I hope you enjoyed this article and learned something along the way. The next step is expand on the actual result type, with special methods like `.unwrap()` and `or()`, but I will save that for the next article.\n\nYou can play around with a live example of the code here on the [Typescript playground](https://www.typescriptlang.org/play/?target=99#code/FAehAICUFMGcFcA2AXcA3Aho+0C00AnAgewN2XgAdFpxkBPSuYBpqOJZAeQGsAeACoA+cAF5wAbQEAacPAB2AE2gAzAJbzoigLotGtGAhQBRIqTGSFy9ZsWzTJArtYGOKQSPGHOvD+AA+7EbIDqTAoBChBOAAxsTyaISwavFyyGqIagzAcfKwqMjEURYAFNAAXHLyPPLEAO7yAJSVxaIitBr5GPIx0MQq4MUA-OC0lZp1g2YEJQDKyAQaAOZljY3hYOAAYgox6anEiQSIxBiKsOAAZOBqALbU0LfQ8sgY+-IAdF-AKrvvdAR6ABhN4xAAWHhKKnklRKjTEIk0R2aQU4UR+fxS8gBwNBEOEUJh4DhCPAAAUSLc1LBoB4URTiFSaXxvO5hEIMT1-gtcchwZDobD4W1wAIAuAkYQUazkB5OXssTiQXz8UJCULSWLApLooEGUzacJpW5ZcJxfrqbSZR4RABvYDgR048D2p1u2LxfLgYjwZCUX0WaFwh3ux1qAYlH1+gOdV49PoDC00+Gu0PugjQCgEbFR-3IENptMfZBg54lEqYbDQYUiCSVnCyKyqDRabTgDAXGW+I0Fwvuj4xPHlwiOGuWJTN2yyQpRMrTRptjuokzz3tugC+a6dGaz2Ikud9jYnNlb7c7Ju7HI3sSH1ZdW8dO-g2fH1hbdjoRWmq0X5+C6I3YBNwiUU4FQQcaVgcpgA7egenAX4uUVW4MA0ElU0dXJYGIGgBxoDAZnWN0sNQDNggABgsHllXBcsxwARgAJgAZiIp0SPAMjOHoqjARosE6NJDD3XDYkAFk3jBD4CG6RRGRJPhwHIj4AFZ4RLEhJgmKZHBKAByDT6mxWA4JiPS2NDJ8XyY5je3XCyPTyUiTUYiwMDqVCCj4odYPgkkRT0jAACMzIcjiuJQZi3I8rIlR8ky-LHYS3UMrToEmWcDLBTTsV80KH3Aeze3Ck0ABZos8uKVUEkVtKTWkguIHDoG6NUSjIscyJKBYcDWMLPWc4IVIq2LqKHAr-MRdLyUpS0+B1NqAH1ZAzAAraA9k66B1r2fTUuxShZppcyHP6pzOJNAA2XjeVoyaXSK4iBou4IAHYbv4mqpoy78ACIR3MJd62gX61mK56IuQAAOD6h3u5KnVSiVptnX6bNBuz1nB86D2QC5xAkSHyJWk16JJ4JGPJzhmKplBStp5AVIZy6Gdehmod0N1cdgD4VFIYwMDujQ+dkNQxyw5qPhOFYAAMBDA8AAGIABJbTUddKhl0X5D5sHgM2AAReIDIQ0glkzT8b0QRA6DBakAEJgBQtDGiAA) or view the full source code on my Github.\n\nThanks again for reading and if you have any questions, comments or suggestions feel free to reach out to me on X or Github; happy coding!\n\n**UPDATE**: This code is now available as a npm package: https://www.npmjs.com/package/@asleepace/try\n\n```bash\n# install npm package\nnpm i @asleepace/try\n```","src/content/blog/try.mdx","186e9234822c1e99","markdown-style-guide",{"id":78,"data":80,"body":85,"filePath":86,"digest":87,"deferredRender":22},{"title":81,"description":82,"pubDate":83,"heroImage":84},"Markdown Style Guide","Here is a sample of some basic Markdown syntax that can be used when writing Markdown content in Astro.",["Date","2022-07-01T07:00:00.000Z"],"/images/blog-placeholder-1.jpg","Here is a sample of some basic Markdown syntax that can be used when writing Markdown content in Astro.\n\n## Headings\n\nThe following HTML `\u003Ch1>`—`\u003Ch6>` elements represent six levels of section headings. `\u003Ch1>` is the highest section level while `\u003Ch6>` is the lowest.\n\n# H1\n\n## H2\n\n### H3\n\n#### H4\n\n##### H5\n\n###### H6\n\n## Paragraph\n\nXerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\n\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\n\n## Images\n\n![This is a placeholder image description](/images/blog-placeholder-1.jpg)\n\n## Blockquotes\n\nThe blockquote element represents content that is quoted from another source, optionally with a citation which must be within a `footer` or `cite` element, and optionally with in-line changes such as annotations and abbreviations.\n\n#### Blockquote without attribution\n\n> Tiam, ad mint andaepu dandae nostion secatur sequo quae.  \n> **Note** that you can use _Markdown syntax_ within a blockquote.\n\n#### Blockquote with attribution\n\n> Don't communicate by sharing memory, share memory by communicating.\u003Cbr />\n> — \u003Ccite>Rob Pike[^1]\u003C/cite>\n\n[^1]: The above quote is excerpted from Rob Pike's [talk](https://www.youtube.com/watch?v=PAAkCSZUG1c) during Gopherfest, November 18, 2015.\n\n## Tables\n\n| Italics   | Bold     | Code   |\n| --------- | -------- | ------ |\n| _italics_ | **bold** | `code` |\n\n## Code Blocks\n\n```html\n\u003C!DOCTYPE html>\n\u003Chtml lang=\"en\">\n  \u003Chead>\n    \u003Cmeta charset=\"utf-8\" />\n    \u003Ctitle>Example HTML5 Document\u003C/title>\n  \u003C/head>\n  \u003Cbody>\n    \u003Cp>Test\u003C/p>\n  \u003C/body>\n\u003C/html>\n```\n\n## List Types\n\n#### Ordered List\n\n1. First item\n2. Second item\n3. Third item\n\n#### Unordered List\n\n- List item\n- Another item\n- And another item\n\n#### Nested list\n\n- Fruit\n  - Apple\n  - Orange\n  - Banana\n- Dairy\n  - Milk\n  - Cheese\n\n## Other Elements — abbr, sub, sup, kbd, mark\n\n\u003Cabbr title=\"Graphics Interchange Format\">GIF\u003C/abbr> is a bitmap image format.\n\nH\u003Csub>2\u003C/sub>O\n\nX\u003Csup>n\u003C/sup> + Y\u003Csup>n\u003C/sup> = Z\u003Csup>n\u003C/sup>\n\nPress \u003Ckbd>\u003Ckbd>CTRL\u003C/kbd>+\u003Ckbd>ALT\u003C/kbd>+\u003Ckbd>Delete\u003C/kbd>\u003C/kbd> to end the session.\n\nMost \u003Cmark>salamanders\u003C/mark> are nocturnal, and hunt for insects, worms, and other small creatures.","src/content/blog/markdown-style-guide.mdx","8157f3607edd08fc","santa-rally-mara-thon",{"id":88,"data":90,"body":95,"filePath":96,"digest":97,"deferredRender":22},{"title":91,"description":92,"pubDate":93,"heroImage":94,"hashTags":18},"Santa Rally Mara-thon","Marathon Digital soars over 51% this past week as inflation cools and speculation around a Bitcoin ETF rises, all in time for the holidays!",["Date","2023-12-22T08:00:00.000Z"],"/images/santa-rally.png","With only one trading day left before Christmas, it appears that Santa may have come early this year! At the time of writing [Marathon Digital (MARA)](https://www.mara.com/) is flirting with the **$27.00** price point and up over **52%** this week alone!\n\n\u003CStockChart ticker=\"MARA\">\u003C/StockChart>\n\nFor those who are unfamiliar [Marathon Digital](https://www.mara.com/) is a bitcoin mining company with a focus on blockchain technologies and various digital assets. While crypto has definitely fallen out of favor in recent memory, it appears that things might be changing...\n\n> Before market open, Marathon shook up the crypto miner scene by announcing that it had agreed to acquire a pair of Bitcoin (CRYPTO: BTC) mining sites. It bought the pair from subsidiaries of finance company Generate Capital at a price of $178.6 million. This purchase price is to be paid entirely in cash. [Source](https://finance.yahoo.com/news/why-marathon-digital-other-crypto-235300345.html)\n\nI’ve been following this stock along with her little brother [Riot Platforms (RIOT)](https://www.riotplatforms.com/) since the height of the pandemic, and after what can only be described as a boring year for trading all around, I’m finally starting to feel excited again!\n\nRumors have also been circulating for quite some time about the U.S. Securities and Exchange Commission approving [spot bitcoin ETFs](https://www.cnbc.com/2023/12/22/the-spot-bitcoin-etf-race-could-quickly-reach-your-401k-plan.html) in early January 2024. This prospect along with the halving scheduled later next year has sent Bitcoins price skyrocketing 64.33% over the past 3 months with Marathon Digital and Riot Platforms following in hot pursuit.\n\nAlong with this the Fed has taken a less hawkish stance as inflation has retreated faster than anticipated, with more rumors quickly circulating that interest rates could start coming down as early as March. While this is still purely speculation, the Fed’s favorite inflation metric the Personal Consumption Expenditures Price Index numbers came in at [3.2% beating expectations of 3.3%](https://www.cnbc.com/2023/12/22/pce-inflation-november-2023-.html) and signaling we may see a soft landing yet.\n\nCouple this with the yearly Santa Rally after a long year of dismal returns and a new generation of retail options trader, it’s possible we may have the perfect ingredients for a real Christmas miracle!\n\n**NOTE**: _This is not financial advice and I am currently holding 100 Shares along with several options contracts for 12/29_","src/content/blog/santa-rally-mara-thon.mdx","67b046c2d8d428f1","lowest-common-ancestor",{"id":98,"data":100,"body":105,"filePath":106,"digest":107,"deferredRender":22},{"title":101,"description":102,"pubDate":103,"heroImage":104,"hashTags":52},"The Lowest Common Ancestor (LCA) Algorithm","An in-depth breakdown of the lowest common ancestor (LCA) algorithm for finding the deepest node in a graph which is a parent of two other nodes.",["Date","2025-04-20T07:00:00.000Z"],"/images/abstract-tree.png","The Lowest Common Ancestor or Least Common Ancestor (LCA) algorithm is a classic computer science problem, and one that I've had somewhat of a storied personal experience with over my years as a software engineer. Whether you are new to computer science, brushing up for an interview or just a curious individual, I hope you will enjoy this article!\n\n### Problem Overview\n\nFirst things first, let's start with a simple definition of the problem, don't worry if it sounds a bit abstract at first, I promise it is not that bad.\n\n> _Given a tree or directed acyclic graph and two nodes `v` & `w`, find the deepest node `T`, such that `T` is both a parent of `v` and `w`._\n\nIn more plain terms, given two family members, find the first common ancestor they both share. Given the tree in the image below, the LCA of nodes `E` & `H` would be node `B`, since node `B`.\n\n\u003Cimg src=\"/images/example-tree-1.png\" alt=\"Example Tree\" />\n\nA couple things to note as well, each node can have an arbitrary number of children and can be arranged in any sort of particular order. Also a node is considered a direct descendent of itself, so the LCA of node `F` and `H` in this example would just be node `F`.\n\n### Implementing the Tree\n\nNow that we have a basic understanding of the problem, let's start writing some code! I will be using Typescript for the actual implementation, but it shouldn't be too hard to follow if you are coming from another programming language as well.\n\nFirst, let's define the shape of our node which will be used to recreate the tree above, each node will contain a string value (`A`, `B`, `C`, etc.) and an array of children nodes. I will be writing the node as a class, but this could just as easily be a simple object as well.\n\n```ts\nclass TreeNode {\n  public value: string\n  public children: TreeNode[] = []\n\n  constructor(value: string) {\n    this.value = value\n  }\n}\n```\n\nNext, let's add some helper methods for common tree operations, which will be useful for building out our tree. We can start by adding a simple method for retrieving a specific node for a given value:\n\n```ts\nclass TreeNode {\n  // ...\n\n  public find(value: string): TreeNode | undefined {\n    if (this.value === value) return this\n\n    for (const child of this.children) {\n      const found = child.find(value)\n      if (found) return found\n    }\n\n    return undefined\n  }\n}\n```\n\nThe `find(value: string)` method will return if the current node if the provided value matches the nodes value, otherwise it will recursively check each child node until a match is found. If no match is found, then this method should just return `undefined`.\n\nNext, let's write another helper method which will find a node for a given value, and then insert a new child node. This will be quite useful for building the tree.\n\n```ts\nclass TreeNode {\n  // ...\n\n  public insert(value: string, parentValue: string): TreeNode {\n    const parent = this.find(parentValue)\n    if (!parent) {\n      throw new Error(`Failed to find node \"${parentValue}\"`)\n    }\n    const child = new TreeNode(value)\n    parent.children.push(child)\n    return child\n  }\n}\n```\n\nThe `insert(value: string, parentValue: string)` method will attempt to find a node in the current tree with the `parentValue`, and if found, insert a new node with the given `value` as a child. If the parent node cannot be found, this method will throw an error.\n\nFinally, let's add one more method which will return the values of our tree as an **in-order** array of strings. To do this we will just create an array containing the current nodes value, then we will add all the values of each child's subtree recursively.\n\n```ts\nclass TreeNode {\n  // ...\n\n  public getSubtree(): string[] {\n    const tree = [this.value]\n    for (const child of this.children) {\n      const subtree = child.getSubtree()\n      for (const childValue of subtree) {\n        tree.push(childValue)\n      }\n    }\n    return tree\n  }\n}\n```\n\nPlease note that I've written the `getSubstree()` method above in a way which should be understandable for people coming from different languages, but this does come with a slight performance penalty. For this example it shouldn't matter too much, but as an exercise left for the reader, can you write this method such that we only need to instantiate an array once?\n\nOk, now that we have finished adding our helper methods, the full `TreeNode` class should look something like the following:\n\n```ts\nclass TreeNode {\n  public value: string\n  public children: TreeNode[] = []\n\n  constructor(value: string) {\n    this.value = value\n  }\n\n  public find(value: string): TreeNode | undefined {\n    if (this.value === value) return this\n    for (const child of this.children) {\n      const found = child.find(value)\n      if (found) return found\n    }\n    return undefined\n  }\n\n  public insert(value: string, parentValue: string): TreeNode {\n    const parent = this.find(parentValue)\n    if (!parent) {\n      throw new Error(`Failed to find node \"${parentValue}\"`)\n    }\n    const child = new TreeNode(value)\n    parent.children.push(child)\n    return child\n  }\n\n  public getSubtree(): string[] {\n    const tree = [this.value]\n    for (const child of this.children) {\n      const subtree = child.getSubtree()\n      for (const subTreeValue of subtree) {\n        tree.push(subTreeValue)\n      }\n    }\n    return tree\n  }\n}\n```\n\nNow let's go ahead and instantiate our tree from the original example, all we need to do is create our root node and call our helper methods:\n\n```ts\nconst root = new TreeNode('A')\nroot.insert('B', 'A')\nroot.insert('C', 'A')\nroot.insert('D', 'B')\nroot.insert('E', 'B')\nroot.insert('F', 'B')\nroot.insert('G', 'F')\nroot.insert('H', 'F')\n```\n\nWe can verify that our tree has been built correctly by calling the `getSubtree()` on our root, which should return the following in-order array `[\"A\", \"B\", \"D\", \"E\", \"F\", \"G\", \"H\", \"C\"]`.\n\n```ts\nconst output = root.getSubtree()\nconsole.log(output)\n```\n\n\u003Ca href=\"https://www.typescriptlang.org/play/?target=99#code/MYGwhgzhAEAqBOBTRA5A9gE0dA3gKGmgAcBXAIxAEthoA3MEExALmggBd5KA7AcwOLkqNYAAtKIDEm6sEydFgDaAXWgBeaCrwDgabh3glg7NPAAU9RizacevAJS4BhduIgA6S03V0GTANwCAL7ahKQU1NAAZjwYFn7WBnb2skiomNgAPtAk3Fgx3IgYToSElFHQZq6UHl7Yag2+Vo5I7CTw3NDVEIGl0aaVuvrs0GISxWgV3e5jktKO+H2EQxz9ucUasxjuBXF19r1L5ZVRaOstiG0da3mHhCF9re2d64gFRYchAuHC0DwQiHg7HiVlYST4ABpiGBpOwAGoJMG2PgpOBpBTYRalFYjIgwxDcEYaaa7Mx42EI5p3P4VMwAQnJBPYC2cpVc8DQAHdoIVuQBReAc8wAAwAYmAJEUumhorEeRloAAiAAkOEZhMpTCCiuF9lZD2xelWWx8vLR8gyIKYB1Z6vYM3EcwJ7lIEFEZi2Nsel2eo0dGE+oUEERovEuAGVyJxkGZUeDeCoSobhl00j5FNM6spqad4IMjSMTZMum4HeN5kmlqMC2wo2nNv73GH2JGyNHELHWX1c-mUxByHJEJrsMX+220iyq1X2y6SG6zGPB8O9VPoAb7qyntd24GvgB6PfQABCJHGdhL2HbzG0OOgHLQRJ5iG5g4xZgA5ABBd82+-2-6AsCipHoqUKKp+iq-mgD7uABQJmIqADCoFKhBUEwXBQEACIocBkGBH+sH6IBCF8rhIHof+xHwYqorkfheCEZhCEAOK4XRlFEQCNEABLsQxeC3mc7CkI+hHNq27adisaAgIg7ggGgvBmMJon2EAA\">Click here to view on the Typescript Playground!\u003C/a>\n\n### Designing the Algorithm\n\nNow that we have a tree we can test, let's start designing our Lowest Common Ancestor algorithm by first defining the shape of our function. In this example, we will write a function which takes the root node of a tree along with two values, and returns the least common ancestor they share.\n\n```ts\nfunction getLCA(root: TreeNode, value1: string, value2: string) {\n  // ...\n}\n```\n\nThere are several ways to solve this, but we will start will a simple recursive approach. When approaching recursive problems, it is generally a good idea to start by defining our base case.\n\nSince we are looking for a node which is both an ancestor of `value1` and `value2`, our base case should just return the current nodes values when these conditions are satisfied. Now how should for this condition?\n\nRemember our `find(value: string)` helper method above, we can use this check if a child exists at a current node, by checking if it returns a `TreeNode` or `undefined`.\n\n```ts\nfunction getLCA(root: TreeNode, value1: string, value2: string) {\n  if (root.find(value1) && root.find(value2)) return root.value\n\n  return undefined\n}\n```\n\nOnce we find a node that is a direct ancestor of both `value1` and `value2`, all we need to do is return the current node all the way up the call stack, otherwise we should return `undefined`. Let's test our base case with a simple example:\n\n```ts\nconsole.log(getLCA(root, 'B', 'C')) // outputs \"A\"\n```\n\nAwesome, we have now just implemented the logic to check if a node is an ancestor! While this does return an ancestor of two nodes, this is not guaranteed to be the least common ancestor.\n\nTo check for the least common ancestor, all we need to do is traverse the tree recursively until we find the last node for which our base condition evaluates to `true`.\n\nSince the root node of a tree will always be an ancestor of any sub-values in the tree, we should add our traversal logic before our base case. We can do this by first checking if any of the child nodes are the LCA:\n\n```ts\nfunction getLCA(\n  root: TreeNode,\n  value1: string,\n  value2: string\n): string | undefined {\n  // first check children subtree for LCA\n  for (const child of root.children) {\n    const found = getLCA(child, value1, value2)\n    if (found) return found\n  }\n\n  // the check if current node is the LCA\n  if (root.find(value1) && root.find(value2)) {\n    return root.value\n  }\n\n  // if current node or subtree does not contain\n  // the LCA then return undefined\n  return undefined\n}\n```\n\nPlease note I also added a return type to the function, which is just `string` or `undefined`. Sweet, now let's write some test cases and check if our solution works!\n\n```ts\nconsole.log(getLCA(root, 'B', 'C') === 'A')\nconsole.log(getLCA(root, 'D', 'F') === 'B')\nconsole.log(getLCA(root, 'D', 'G') === 'B')\nconsole.log(getLCA(root, 'F', 'H') === 'F')\nconsole.log(getLCA(root, 'F', 'Z') === undefined) // edge case\n```\n\nIf you followed all of the steps above, each of these should output `true` to the console!\n\n\u003Ca href=\"https://www.typescriptlang.org/play/?target=99#code/MYGwhgzhAEAqBOBTRA5A9gE0dA3gKGmgAcBXAIxAEthoA3MEExALmggBd5KA7AcwOLkqNYAAtKIDEm6sEydFgDaAXWgBeaCrwDgabh3glg7NPAAU9RizacevAJS4BhduIgA6S03V0GTANwCAL7ahKQU1NAAZjwYFn7WBnb2skiomNgAPtAk3Fgx3IgYToSElFHQZq6UHl7Yag2+Vo5I7CTw3NDVEIGl0aaVuvrs0GISxWgV3e5jktKO+H2EQxz9ucUasxjuBXF19r1L5ZVRaOstiG0da3mHhCF9re2d64gFRYchAuHC0DwQiHg7HiVlYST4ABpiGBpOwAGoJMG2PgpOBpBTYRalFYjIgwxDcEYaaa7Mx42EI5p3P4VMwAQnJBPYC2cpVc8DQAHdoIVuQBReAc8wAAwAYmAJEUumhorEeRloAAiAAkOEZhMpTCCiuF9lZD2xelWWx8vLR8gyIKYB1Z6vYM3EcwJ7lIEFEZi2Nsel2eo0dGE+oUEERovEuAGVyJxkGZUeDeCoSobhl00j5FNM6spqad4IMjSMTZMum4HeN5kmlqMC2wo2nNv73GH2JGyNHELHWX1c-mUxByHJEJrsMX+220iyq1X2y6SG6zGPB8O9VPoAb7qyntd24GvgB6PfQABCJHGdhL2HbzG0OOgHLQRJ5iG5g4xZgA5ABBd82+-2-6AsCipHoqUKKp+iq-mgD7uABQJmIqADCoFKhBUEwXBQEACIocBkGBH+sH6IBCF8rhIHof+xHwYqorkfheCEZhCEAOK4XRlFEQCNEABLsQxeC3mc7CkI+hHNq27adisaAgIgMxyTC0lGrJ8kgGgvBmMJol6toB7QFhbw8OeZx5gwvCmJQrgALbaFEuTGJQejQM2AAyiGfmYf6pBaWBQnUACMSJcJCTRMAATMFyRRXw0DZK87zFPgrI9h6NZFhUhFbBWWJVrepzrD4bkeR6-r+QkAXlVY4UrlOxxmAVeQXFcnSNQG+pBmUtKEaSgWOAAZP1d7QfavUJDVk5TlunSEXU1JfN6LU5HkRmFO1+6HrAiDGpA203ipcnuOpmnFZ5f5Qu+R7vhdiE-uojRfj+gkHWpGlmKdXkjRdWHXdA76indDQaJdT0yYdx3vZc7lnV9f0-RdLGAw9V16mDr0nVDJXnX9AMXTxSPAwDqMvUdb0fdj-2-e+ABaBPLfkPBFI4+lFGGoy7UAA\">Click here to view full example!\u003C/a>","src/content/blog/lowest-common-ancestor.mdx","92c99d13ec7f70b8","typescript-range-without-a-loop",{"id":108,"data":110,"body":115,"filePath":116,"digest":117,"deferredRender":22},{"title":111,"description":112,"pubDate":113,"heroImage":114,"hashTags":52},"Implement a range in TypeScript without loops*","How to implement a range sequence using generators in TypeScript for fun!",["Date","2024-02-13T08:00:00.000Z"],"/images/generator-cover.png","The other day I was browsing **LinkedIn** and came across the following [post](https://www.linkedin.com/feed/update/urn:li:activity:7163364024087220224?utm_source=share&utm_medium=member_desktop)\n\n> 👌 A common coding question in Javascript interviews: Write a function that implements range WITHOUT using loops?\n\nUnable to resist the urge to write some needlessly complex and over-engineered code, I began weighing my options. Initially, my mind went to recursion. Then to recursion, then to recursion...\n\n```ts\nfunction range(a: number, b: number): number[] {\n  return a \u003C b ? [a, ...range(a + 1, b)] : [b]\n}\n```\n\n[Try it on the TypeScript playground!](https://www.typescriptlang.org/play?module=1#code/GYVwdgxgLglg9mABAJwIZgOYFMAUqBciYIAtgEZbIA0iZhx5lAlPaRcgNoC6iA3gFCIUWKCGRJUiADy1EAfkQdUNAHRq0mXJIDUiAIw0yTHoQ5ku-AL79+AeluIsAD1QkADgBssiEAGdU2PwQCL5wXioecBg4Gtg4BvoADExMQA)\n\nHowever, this was widely **boring** and **severely unambitious**; No, what I needed was something with a bit more _spice_...\n\n## Generator Experiments\n\nThen it hit me! Let's use that thing I always want to use, but literally can never find a good enough reason. That's right, the good 'ol **[Generator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator)**.\n\n> The Generator object is returned by a generator function and it conforms to both the iterable protocol and the iterator protocol.\n> Generator is a subclass of the hidden Iterator class. [Source](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator)\n\nIt had been a while since I last touched these pointy starred wonders, and so I got to experimenting to refresh my memory.\n\n```ts\nfunction* range() {\n  yield 1\n  yield 2\n  yield 3\n  yield 4\n  yield 5\n}\n\nconsole.log(...range()) // 1, 2, 3, 4, 5\n```\n\nBut, then it dawned on me that I normally use a **loop** inside a generator! The solution would have to bring back our old friend recursion, recursion, recursion!\n\n```ts\nfunction* range(a: number, b: number) {\n  if (a > b) return\n  yield a\n  yield* range(a + 1, b)\n}\n```\n\nHmmm.... the code was working, but TypeScript wasn't pleased. A few prayers to the **TypeGod's** and a couple \u003Cstrike>minutes\u003C/strike> hours later I had finished at last, and was eagerly awaiting to dunk on the **LinkedIn** n00bs!\n\n```ts\ntype RangeIterator = Generator\u003Cnumber, void, undefined>\n\nfunction* range(a: number, b: number): RangeIterator {\n  if (a > b) return\n  yield a\n  yield* range(a + 1, b)\n}\n\nconsole.log(...range(1, 5)) // 1, 2, 3, 4, 5\n```\n\n[Try it on the TypeScript playground!](https://www.typescriptlang.org/play?module=1&ssl=10&ssc=29&pln=2&pc=1#code/FAFwngDgpgBASgQwHYHMoEkRQE4JAe2xgF4YBxKJHPQgHiQFcBbAIxwBoYA3fASwBNODJPygAzXlX4A+YMDHCAxiF74kAKhi5UUABQIAXDEasOMFkZNtsASiOIdmagSIBvYDBi8xMfTGnmNlpQIAzYSB4wYLxQADb8MAiR0XH8mtpougDUWQicLDbAAL5yimoAzvixUAB0sfgoujXNGXoAjJxtAAw2NkA)\n\n## How it works?\n\nWhile the above code may look foreign to the unsuspecting LinkedIn denizen, it actually isn't all that complicated. The key takeaway here is how we can abuse the spread `...` operator to _spread_ them cheeks.\n\nLet's take a look at the execution flow starting from `console.log(...range(1, 5))`\n\n```ts\n\nrange(1, 5) // Step 1: called (move inside context)\n\nif (a > b) return      // (1 > 5) is false so we continue\nyield a                // pause execution, return (1) to the caller, then resume\nyield* range(a + 1, b) // pause execution, return iteration from range(2, 5), then resume\n\nrange(2, 5) // Step 2: called (move inside context)\n\nif (a > b) return      // (2 > 5) is false so we continue\nyield a                // pause execution, return (2) to the caller, then resume\nyield* range(a + 1, b) // pause execution, return iteration from range(3, 5), then resume\n\nrange(3, 5) // Step 3: called (move inside context)\n\nif (a > b) return      // (3 > 5) is false so we continue\nyield a                // pause execution, return (3) to the caller, then resume\nyield* range(a + 1, b) // pause execution, return iteration from range(4, 5), then resume\n\nrange(4, 5) // Step 4: called (move inside context)\n\nif (a > b) return      // (4 > 5) is false so we continue\nyield a                // pause execution, return (4) to the caller, then resume\nyield* range(a + 1, b) // pause execution, return iteration from range(5, 5), then resume\n\nrange(5, 5) // Step 5: called (move inside context)\n\nif (a > b) return      // (5 > 5) is false so we continue\nyield a                // pause execution, return (5) to the caller, then resume\nyield* range(a + 1, b) // pause execution, return iteration from range(6, 5), then resume\n\nrange(6, 5) // Step 6: called (move inside context)\n\nif (a > b) return      // (6 > 5) is true so we return which ends the iterator\n\n// Moving backwards through the call stack we get\n//\n// [1, [2, [3, [4, [5]]]]]\n// [1, [2, [3, [4, 5]]]]\n// [1, [2, [3, 4, 5]]]\n// [1, [2, 3, 4, 5]]\n// [1, 2, 3, 4, 5]\n\n// Which more or less simplifies to the following expression, note the\n// star (*) operator is used to spread the values from the iterator,\n// just omitting here the the sake of brevity\n\nfunction* range(1, 5) {\n  yield (((((yield 1), yield 2), yield 3), yield 4), yield 5)\n}\n\n// Then back in Step 1: context\n\nyield* [1, 2, 3, 4, 5]\n\n// Which returns 1, 2, 3, 4, 5 to the caller (...)\n\nconsole.log(...[1, 2, 3, 4, 5])\n\n// 1, 2, 3, 4, 5\n```\n\n0. We call `range(1, 5)` which creates our iterator\n1. The `...` operator does the dirty work of iterating\n2. The iterator will continue until `return` has been called\n3. The first pass `a = 1` and `b = 5`\n   - Since `a > b` is `false` we continue\n   - Next we `yield a` which is `1` to the output\n   - Next we `yield*` which returns another generator (step #4)\n4. The second pass `a = 2` and `b = 5`\n   - Since `a > b` is `false` we continue\n   - Next we `yield a` which is `2` to the output\n   - Next we `yield*` which returns another generator ()\n5. This continues until `a > b` and `return`\n6. This tells the iterator we are done!\n7. Leaving us with `1, 2, 3, 4, 5`\n\nOr an even more simplified way to think about this\n\n- `yield` pauses / resumes the iterator and returns a value to the caller\n- `yield*` delegate to another iterable object, such as a Generator.\n- `return` tells the iterator we are done\n\n## Final thoughts\n\nWhile this code would most certainly be rejected on any production pull request, it was a fun example of leveraging some seldom used parts [TypeScript](https://www.typescriptlang.org/) which are quite cool, _and this is just the surface_!\n\nThe way I like to think about generators is that they are functions with state, which can pause /resume execution and even have values passed back-in from the caller. They are used quite heavily in libraries like `react-redux` and also have support for `async` via the `AsyncGenerator`. You can learn more about them here or feel free to ask me any questions!\n\n- [Mozilla Docs: Generator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator)\n- [Mozilla Docs: AsyncGenerator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator)\n- [Mozilla Docs: Spread Syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax)\n- [Mozilla Docs: Yield](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield)\n- [Mozilla Docs: Yield\\*](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield*)\n\n## That's cool, but can you?\n\nMy original post succeeded in stirring up quite the controversy from folks all across the software engineering spectrum, and one comment caught my attention in particular:\n\n> Everything uses a loop under the hood, unless it's using tensors.\n>\n> \u003Cdiv style=\"text-align: right\">— Some AI Engineer\u003C/div>\n\nWhile this is probably unavoidable to some degree, one thing that still bothered me was that the iterator solution was not all that much different from the original recursive solution. What if we change the problem slightly to include the following:\n\n\u003Ch3 style=\"text-align: center\">Implement a range WITHOUT using loops or recursion.\u003C/h3>\n\nNow things are getting interesting! Just to add a little more context, the comment section had already ruled out using the usual higher order functional such as `.forEach`, `.map`, `.filter`, `.reduce`, etc.\n\n```ts\nArray.from({ length: finish - start + 1 }, (_, i) => start + i + 1)\n\n// or\n\n[...Array(finish - start + 1)].map((_, i) => start + i)]\n```\n\nWhile these are short and concise solutions, they are still using loops under the hood. So, I decided to take it a step further and see if I could implement a solution without using loops or recursion.\n\n\u003Cimg src=\"/images/ah-shit-here-we-go-again.gif\" style=\"box-shadow: 0px 1px 5px rgba(0,0,0,0.1);\" alt=\"Ah shit here we go again...\" width=\"100%\" />\n\n\u003Cbr />\n\u003Cbr />\n\n## YCombinator + Generators\n\nSome of you may be familiar with the name **YCombinator** as it is indeed the same as the venture capital firm, but did you know that it also has a deeper meaning?\n\nThe **YCombinator** is a higher-order function which allows you to write recursive functions without using recursion. It is a concept from the field of computer science and is often used in functional programming languages.\n\nEquipped with this we now have everything we need to implement a solution without loops or recursion! Feast your eyes...\n\n```ts\ntype Y = (next: Y) => (x: number, y: number) => Generator\n\nfunction YCombinator(f: Y) {\n  return ((g: Y) => g(g))((g: Y) =>\n    f(() => (x: number, y: number) => g(g)(x, y))\n  )\n}\n\nconst range = YCombinator(\n  (next: Y) =>\n    function* (x: number, y: number) {\n      if (x > y) return\n      yield x\n      yield* next(next)(x + 1, y)\n    }\n)\n\nconsole.log(...range(3, 9)) // 3, 4, 5, 6, 7, 8, 9\n```\n\n[Try it on the TypeScript playground!](https://www.typescriptlang.org/play?module=1&ssl=14&ssc=29&pln=1&pc=1#code/C4TwDgpgBAmlC8UAUA7CAPYAuWBKBAfMujigK4C2ARhAE4A0UIplNt+8RA4hGrQIbAA9rQBQogGZkUAY2ABLISlgBhIdXkpBIpBJwx8Ab1FRTUWhGBlaypEgDm+jkXsPcuO47yEoEu8+IWajpGZihyYPYfV3sPdFD3XFEAX3EZJQBnYHN+FHtoRBg1DS1hWjs0TCcfKVkFJQAqQPDWEKYgtiMTM3kJYigiEHwLKxtu0xB5CAAbABModHGmKbmmyuBUDGA4qABqKABGBJSktMyhaYgAOmmhVyuHgTyIJAB2RgAmA-dRIA)\n\nIf you want to lean more about the **YCombinator** I recommend checking out the following [blog post](https://lucasfcosta.com/2018/05/20/Y-The-Most-Beautiful-Idea-in-Computer-Science.html) which does an excellent job of breaking it down and explaining it step by step!\n\n## Happily ever after?\n\nAs you can imagine I was riding pretty high after writing potentially the most needlessly complex and over-engineered code to dunk on Jr. devs on LinkedIn when the unthinkable happened...\n\n\u003Cimg src=\"/images/challenger.jpeg\" style=\"box-shadow: 0px 1px 5px rgba(0,0,0,0.1);\" alt=\"A new challenger approaches\" width=\"100%\" />\n\n> Interesting approach. \u003Cbr />\n> Unfortunately, you can easily encounter: \u003Cbr /> [ERR]: Maximum call stack size exceeded \u003Cbr />\n> Be careful with recursion in Javascript. \u003Cbr />\n>\n> \u003Cdiv style=\"text-align: right\">— Principal Software Engineer at Microsoft\u003C/div>\n\nAnd just like that my reality was shattered.\n\nAll the new found joy of working through the mind-boggling intricacies of implementing the Y-Combinator for the first time quickly evaporated. Someone had come along a blew the stack off my code by creating a range over **9,000**. At this moment I remembered the wise words once told to me long ago\n\n_\"For thou who hath not been dunked on, let him cast the first lineth of code\"_\n~ Ancient Proverbs\n\n## The Correct Way?\n\nThe Microsoft engineer then proceeded to drop this magnificent specimen of code, which could not only easily handle **9,000**+ iterations, but relied solely on the built-in mechanics of iterables.\n\n\u003Cimg src=\"/images/iterator-solution.png\" style=\"box-shadow: 0px 1px 5px rgba(0,0,0,0.1);\" alt=\"The correct way.\" width=\"100%\" />\n\n> In Javascript, an Iterable can be ...spread or used in a for loop. It implements a method named by Symbol.iterator, returning an Iterator. Iterator implements a method next, returning an object containing a value property and a done property, used to control the loop.\n> \u003Ccite>[Jaime Leonardo Pinheiro](https://www.linkedin.com/in/ACoAABFt5Z0BH8hw7mI-T2JCW2Gw-BoOePePUdg?lipi=urn%3Ali%3Apage%3Ad_flagship3_detail_base%3BUZ%2FiBARFQzKowiXCf9skRw%3D%3D)\u003C/cite>\n\nIt just goes to show there's always someone out there who knows more than you, and that's okay! It's all part of the learning process. I'm grateful for the opportunity to learn from others and to be able to share my own knowledge with the community.\n\n## Notable Mentions?\n\n```ts\n// the changes are slim, but not zero...\nconst sequence = String(Math.random())\nconst regex = new RegExp(`^(?=\\d{4}$)0?1?2?3?4?5?6?7?8?9?`)\nsequence.match()\n```\n\n\u003Cimg src=\"https://media2.giphy.com/media/v1.Y2lkPTc5MGI3NjExOWdwMGZ1d2I4bWs2Zmgxb2VqMXR2OWQ3bjJ6aXc4M3B1a2w3czc3NCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/BPJmthQ3YRwD6QqcVD/giphy.gif\" style=\"box-shadow: 0px 1px 5px rgba(0,0,0,0.1);\" alt=\"Generator Cheers\" width=\"100%\" />\n\n\u003Ch2 style=\"text-align: center; margin-top: 16px\">Happy coding!\u003C/h2>\n\u003Ch4 style=\"text-align: center;\">~Colin Teahan\u003C/h4>","src/content/blog/typescript-range-without-a-loop.mdx","99df8b119921fa1d","how-to-export-imessage",{"id":118,"data":120,"body":126,"filePath":127,"digest":128,"deferredRender":22},{"title":121,"description":122,"pubDate":123,"heroImage":124,"hashTags":125},"How to Export iMessage Chat History","How to export your iMessage chat history to a text file which can be uploaded and analyzed with Ai.",["Date","2025-06-14T07:00:00.000Z"],"/images/blog-export-imessage.png","Technical, MacOS, Bash","The other day the group chat my friends and I use to talk about stocks, trading and investing devolved into pure political chaos. Desperate to find the culprit who kept steering the conversation towards politics, we turned to Ai.\n\nOur first attempts consisted of taking screenshots and uploading them individually, but this proved to be painfully slow and missing a lof of context, such as was someone responding to a question asked by another member about politics or was the conversation about current events which could affect the markets.\n\n### How to access iMessage on MacOS\n\nIf your MacOS is connected with your iCloud account, the all your iMessages are actually saved in an sqlite database. To check if this exists run the following:\n\n```sh\nls ~/Library/Messages/chat.db\n```\n\nYou should see somthing like `/Users/asleepace/Library/Messages/chat.db` as the output. This is your iMessage sqlite database! In order to open you may need to give your Terminal \"Full disk access\" permissions:\n\n\u003Cimg src=\"/images/full-disk-access.png\" />\n\nAfter restarting the terminal you should then be able to open the file with the `sqlite3` command (when run as `sudo`).\n\n```sh\nsudo sqlite3 ~/Library/Messages/chat.db\n```\n\nFrom here you can execute raw SQL commands, lets view what tables are available:\n\n```sql\n. tables\n```\n\nThis should show you a list like the following:\n\n```txt\n_SqliteDatabaseProperties\nattachment\nchat\nchat_handle_join\nchat_message_join\nchat_recoverable_message_join\ndeleted_messages\nhandle\nkvtable\nmessage\nmessage_attachment_join\nmessage_processing_task\nrecoverable_message_part\nscheduled_messages_pending_cloudkit_delete\nsync_deleted_attachments\nsync_deleted_chats\nsync_deleted_messages\nunsynced_removed_recoverable_messages\n```\n\nNow let's find that specific group chat, in my case it's name is `'Money Gang'`\n\n```sql\nSELECT\n    c.chat_identifier,\n    c.display_name,\n    COUNT(m.ROWID) as message_count,\n    datetime(MAX(m.date)/1000000000 + strftime(\"%s\", \"2001-01-01\"), \"unixepoch\", \"localtime\") as last_message_date\nFROM chat c\nLEFT JOIN chat_message_join cmj ON c.ROWID = cmj.chat_id\nLEFT JOIN message m ON cmj.message_id = m.ROWID\nWHERE c.display_name IN ('Money Gang')  -- note \"Moeny Gang\" is the name of our chat\nGROUP BY c.ROWID\nORDER BY MAX(m.date) DESC;\n```\n\nSince this group chat has been ongoing for quite some time, I actually found several instances:\n\n```txt\nchat449416128167948589|Money Gang|17818|2025-06-14 10:20:16\nchat449416128167948589|Money Gang|6|2025-06-09 16:07:01\nchat145145727747807125|Money Gang|1053|2025-05-16 13:10:17\n```\n\nWe can check how many messages are in each instance with the following passing in the specific id, in my case `'chat449416128167948589'`:\n\n```sql\nSELECT COUNT(*) as total_messages\nFROM message m\nJOIN chat_message_join cmj ON m.ROWID = cmj.message_id\nJOIN chat c ON cmj.chat_id = c.ROWID\nWHERE c.chat_identifier = 'chat449416128167948589'\n    AND m.text IS NOT NULL\n    AND m.text != ''\n    AND m.text != '￼'\n    AND LENGTH(TRIM(m.text)) > 0;\n```\n\nIf you want to extract all the messages from a specific chat we can do the following:\n\n```sql\nSELECT\n    h.id as sender,\n    COALESCE(h.id, 'Me') as sender,\n    COALESCE(m.text, '[No text]') as message,\n    datetime(m.date/1000000000 + strftime(\"%s\", \"2025-01-01\"), \"unixepoch\", \"localtime\") as date\nFROM message m\nJOIN chat_message_join cmj ON m.ROWID = cmj.message_id\nJOIN chat c ON cmj.chat_id = c.ROWID\nLEFT JOIN handle h ON m.handle_id = h.ROWID\nWHERE c.chat_identifier = 'chat449416128167948589'\nORDER BY m.date DESC\nLIMIT 100;\n```\n\nOr if you want to extract all messages from all group chats with that display name:\n\n```sql\nSELECT\n  c.chat_identifier,\n  COALESCE(h.id, 'Me') as sender,\n   m.text as message,\n   datetime(m.date/1000000000 + strftime('%s', '2001-01-01'), 'unixepoch', 'localtime') as date\nFROM message m\nJOIN chat_message_join cmj ON m.ROWID = cmj.message_id\nJOIN chat c ON cmj.chat_id = c.ROWID\nLEFT JOIN handle h ON m.handle_id = h.ROWID\nWHERE c.display_name = 'Money Gang'\n     AND m.text IS NOT NULL\n     AND m.text != ''\n     AND m.text != '￼'\n     AND LENGTH(TRIM(m.text)) > 0\nORDER BY m.date ASC;\n```\n\n### Exporting to a Text File\n\nSince we wanted to use Ai to read the conversation and determine who was the culprit, the next step was to export the combined conversations into a single text file which could be uploaded to Claude.\n\nThe following shell command will coalesce all `'Money Gang'` chat threads into a single text file `chat.txt`\n\n```sh\n#!/bin/zsh\nsudo sqlite3 ~/Library/Messages/chat.db \"SELECT\n    c.chat_identifier,\n    COALESCE(h.id, 'Me') as sender,\n    m.text as message,\n    datetime(m.date/1000000000 + strftime('%s', '2001-01-01'), 'unixepoch', 'localtime') as date\nFROM message m\nJOIN chat_message_join cmj ON m.ROWID = cmj.message_id\nJOIN chat c ON cmj.chat_id = c.ROWID\nLEFT JOIN handle h ON m.handle_id = h.ROWID\nWHERE c.display_name = 'Money Gang'\n    AND m.text IS NOT NULL\n    AND m.text != ''\n    AND m.text != '￼'\n    AND LENGTH(TRIM(m.text)) > 0\nORDER BY m.date ASC;\" >> chat.txt\n```\n\nThe file should now be in the directory where you ran the command.","src/content/blog/how-to-export-imessage.mdx","4c2cd22ebc5dc2cf","online-code-editor",{"id":129,"data":131,"body":137,"filePath":138,"digest":139,"deferredRender":22},{"title":132,"description":133,"pubDate":134,"heroImage":135,"hashTags":136},"Online Code Editor","a simple online code editor which can compile and run typescript code.",["Date","2025-01-15T08:00:00.000Z"],"/images/online-editor-cover.jpg","Application","Introducing my **Online Code Editor** (v1.0) a simple online code editor which can compile and run typescript code!\n\n\u003Cbutton href=\"/code\" className=\"bg-blue-500 hover:bg-blue-400 hover:underline w-full py-4 rounded-xl text-white\">Click to open online text editor!\u003C/button>\n\n### Technical Overview\n\nThe code editor appears to be a custom React-based implementation that likely provides in-browser code editing capabilities. It's built using TypeScript and seems to handle several key features:\n\n### Core Components\n\n- `Code.tsx`: Main editor component\n- `useSyntax.ts`: Custom hook for syntax handling\n\n### Key Features\n\n1. **Selection Management**\n\n   - Tracks cursor position and text selection\n   - Handles range selection with `Selection` API\n   - Includes safety checks for editor reference and anchor nodes\n\n2. **Text Content Handling**\n\n   - Manages code content through `innerText`\n   - Tracks total text length and code length separately\n   - Includes debug logging for content management\n\n3. **Client-Side Rendering**\n   - Uses `prerender = false` flag, indicating it's meant to run purely on the client side\n   - This makes sense for a code editor as it needs direct DOM access\n\n### Technical Implementation Notes\n\n- Uses React refs (`editorRef`) to maintain direct DOM access\n- Implements selection range management for cursor positioning\n- Includes debug logging with '[caret]' prefix for tracking selection and content states\n\nNote: This is still a work in progress and is mainly just an exploration of how to implement an online code editor with React, HTML, CSS and Tailwind. The hardest part was handling the text selection along with copy / paste.\n\n### What's next?\n\nNote this is still a work in progress and mainly just something I wanted to build for myself. At some point I'll add some more quality of life features like syntax highlighting, auto-completion, and more. Either way, this was a fun project to build and I'm glad I was able to share it with you all!","src/content/blog/online-code-editor.mdx","3306be28fcae10b1"]